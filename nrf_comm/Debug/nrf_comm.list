
nrf_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c68  08006c68  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08006c68  08006c68  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c68  08006c68  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08006c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001218  20000184  08006df4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  08006df4  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016662  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000322a  00000000  00000000  0003680f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00039a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  0003a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016cb5  00000000  00000000  0003b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd6b  00000000  00000000  0005207d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f77b  00000000  00000000  0005fde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf563  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000355c  00000000  00000000  000cf5e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b88 	.word	0x08006b88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08006b88 	.word	0x08006b88

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b0aa      	sub	sp, #168	; 0xa8
 8000150:	af12      	add	r7, sp, #72	; 0x48
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe51 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8b7 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f945 	bl	80003e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f90d 	bl	800037c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f006 f849 	bl	80061f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  nRF24L01_STM32(hspi1); // Set the SPI parameters for the nRF library
 8000166:	4c53      	ldr	r4, [pc, #332]	; (80002b4 <main+0x168>)
 8000168:	4668      	mov	r0, sp
 800016a:	f104 0310 	add.w	r3, r4, #16
 800016e:	2248      	movs	r2, #72	; 0x48
 8000170:	4619      	mov	r1, r3
 8000172:	f006 fcf5 	bl	8006b60 <memcpy>
 8000176:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800017a:	f000 fa5d 	bl	8000638 <nRF24L01_STM32>

  // ****** debug ****** INICIO
  HAL_Delay(5000);
 800017e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000182:	f000 fe9b 	bl	8000ebc <HAL_Delay>

  uint8_t bbb[] = {"Regitrador STATUS antes do Init:\n"};
 8000186:	4b4c      	ldr	r3, [pc, #304]	; (80002b8 <main+0x16c>)
 8000188:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800018c:	461d      	mov	r5, r3
 800018e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000196:	682b      	ldr	r3, [r5, #0]
 8000198:	8023      	strh	r3, [r4, #0]
  CDC_Transmit_FS(bbb, sizeof(bbb));
 800019a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800019e:	2122      	movs	r1, #34	; 0x22
 80001a0:	4618      	mov	r0, r3
 80001a2:	f006 f8e7 	bl	8006374 <CDC_Transmit_FS>
  HAL_Delay(10);
 80001a6:	200a      	movs	r0, #10
 80001a8:	f000 fe88 	bl	8000ebc <HAL_Delay>

  uint8_t sta = SPI_read2(NRF_STATUS);
 80001ac:	2007      	movs	r0, #7
 80001ae:	f000 fcd3 	bl	8000b58 <SPI_read2>
 80001b2:	4603      	mov	r3, r0
 80001b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t setup_aw = SPI_read2(SETUP_AW);
 80001b8:	2003      	movs	r0, #3
 80001ba:	f000 fccd 	bl	8000b58 <SPI_read2>
 80001be:	4603      	mov	r3, r0
 80001c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  uint8_t en_aa = SPI_read2(EN_AA);
 80001c4:	2001      	movs	r0, #1
 80001c6:	f000 fcc7 	bl	8000b58 <SPI_read2>
 80001ca:	4603      	mov	r3, r0
 80001cc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  uint8_t rf_ch = SPI_read2(RF_CH);
 80001d0:	2005      	movs	r0, #5
 80001d2:	f000 fcc1 	bl	8000b58 <SPI_read2>
 80001d6:	4603      	mov	r3, r0
 80001d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

  printAscii(sta);
 80001dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f9dc 	bl	800059e <printAscii>
  printAscii(setup_aw);
 80001e6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f9d7 	bl	800059e <printAscii>
  printAscii(en_aa);
 80001f0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f9d2 	bl	800059e <printAscii>
  printAscii(rf_ch);
 80001fa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f9cd 	bl	800059e <printAscii>

  uint8_t sep[] = {"-------------\n"};
 8000204:	4b2d      	ldr	r3, [pc, #180]	; (80002bc <main+0x170>)
 8000206:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800020a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800020c:	c407      	stmia	r4!, {r0, r1, r2}
 800020e:	8023      	strh	r3, [r4, #0]
 8000210:	3402      	adds	r4, #2
 8000212:	0c1b      	lsrs	r3, r3, #16
 8000214:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS(sep, sizeof(sep));
 8000216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800021a:	210f      	movs	r1, #15
 800021c:	4618      	mov	r0, r3
 800021e:	f006 f8a9 	bl	8006374 <CDC_Transmit_FS>

  // ****** debug ****** FIM

  // Initiate the nRF with the channel, data rate and tx power parameters
  uint8_t status = init(nRF_Canal, RF_DATA_RATE_1Mbps, RF_TX_POWER_0dBm);
 8000222:	2203      	movs	r2, #3
 8000224:	2100      	movs	r1, #0
 8000226:	205c      	movs	r0, #92	; 0x5c
 8000228:	f000 fa1e 	bl	8000668 <init>
 800022c:	4603      	mov	r3, r0
 800022e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  // ****** debug ******

  uint8_t ddd[] = {"Regitrador STATUS depois do Init:\n"};
 8000232:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <main+0x174>)
 8000234:	463c      	mov	r4, r7
 8000236:	461d      	mov	r5, r3
 8000238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000240:	682b      	ldr	r3, [r5, #0]
 8000242:	461a      	mov	r2, r3
 8000244:	8022      	strh	r2, [r4, #0]
 8000246:	3402      	adds	r4, #2
 8000248:	0c1b      	lsrs	r3, r3, #16
 800024a:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS(ddd, sizeof(ddd));
 800024c:	463b      	mov	r3, r7
 800024e:	2123      	movs	r1, #35	; 0x23
 8000250:	4618      	mov	r0, r3
 8000252:	f006 f88f 	bl	8006374 <CDC_Transmit_FS>
  HAL_Delay(10);
 8000256:	200a      	movs	r0, #10
 8000258:	f000 fe30 	bl	8000ebc <HAL_Delay>

  uint8_t _setup_aw = SPI_read2(SETUP_AW);
 800025c:	2003      	movs	r0, #3
 800025e:	f000 fc7b 	bl	8000b58 <SPI_read2>
 8000262:	4603      	mov	r3, r0
 8000264:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
  uint8_t _en_aa = SPI_read2(EN_AA);
 8000268:	2001      	movs	r0, #1
 800026a:	f000 fc75 	bl	8000b58 <SPI_read2>
 800026e:	4603      	mov	r3, r0
 8000270:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  uint8_t _rf_ch = SPI_read2(RF_CH);
 8000274:	2005      	movs	r0, #5
 8000276:	f000 fc6f 	bl	8000b58 <SPI_read2>
 800027a:	4603      	mov	r3, r0
 800027c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

  printAscii(status);
 8000280:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f98a 	bl	800059e <printAscii>
  printAscii(_setup_aw);
 800028a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f985 	bl	800059e <printAscii>
  printAscii(_en_aa);
 8000294:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f980 	bl	800059e <printAscii>
  printAscii(_rf_ch);
 800029e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f97b 	bl	800059e <printAscii>

  // ****** debug ****** FIM

  nRFint_guard = 1; //liberar execução da interrupção externa
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <main+0x178>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]
	  {
		  uint8_t fff[] = {"Chegou um trem\n"};
		  CDC_Transmit_FS(fff, sizeof(fff));
		  RF_IRQ();
	  }*/
	  rx_task();
 80002ae:	f000 f91f 	bl	80004f0 <rx_task>
 80002b2:	e7fc      	b.n	80002ae <main+0x162>
 80002b4:	20000440 	.word	0x20000440
 80002b8:	08006ba0 	.word	0x08006ba0
 80002bc:	08006bc4 	.word	0x08006bc4
 80002c0:	08006bd4 	.word	0x08006bd4
 80002c4:	200001a0 	.word	0x200001a0

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	; 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f006 fc4d 	bl	8006b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f8:	2301      	movs	r3, #1
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000314:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fff6 	bl	8002310 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032a:	f000 f97f 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f002 fa60 	bl	8002810 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000356:	f000 f969 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800035a:	2310      	movs	r3, #16
 800035c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800035e:	2300      	movs	r3, #0
 8000360:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f002 fbbd 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000370:	f000 f95c 	bl	800062c <Error_Handler>
  }
}
 8000374:	bf00      	nop
 8000376:	3750      	adds	r7, #80	; 0x50
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <MX_SPI1_Init+0x64>)
 8000382:	4a18      	ldr	r2, [pc, #96]	; (80003e4 <MX_SPI1_Init+0x68>)
 8000384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000386:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <MX_SPI1_Init+0x64>)
 8000388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800038c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_SPI1_Init+0x64>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_SPI1_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_SPI1_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_SPI1_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_SPI1_Init+0x64>)
 80003a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_SPI1_Init+0x64>)
 80003b0:	2208      	movs	r2, #8
 80003b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <MX_SPI1_Init+0x64>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_SPI1_Init+0x64>)
 80003bc:	2200      	movs	r2, #0
 80003be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <MX_SPI1_Init+0x64>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_SPI1_Init+0x64>)
 80003c8:	220a      	movs	r2, #10
 80003ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_SPI1_Init+0x64>)
 80003ce:	f002 fc3f 	bl	8002c50 <HAL_SPI_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003d8:	f000 f928 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000440 	.word	0x20000440
 80003e4:	40013000 	.word	0x40013000

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fc:	4b37      	ldr	r3, [pc, #220]	; (80004dc <MX_GPIO_Init+0xf4>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a36      	ldr	r2, [pc, #216]	; (80004dc <MX_GPIO_Init+0xf4>)
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b34      	ldr	r3, [pc, #208]	; (80004dc <MX_GPIO_Init+0xf4>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0310 	and.w	r3, r3, #16
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000414:	4b31      	ldr	r3, [pc, #196]	; (80004dc <MX_GPIO_Init+0xf4>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a30      	ldr	r2, [pc, #192]	; (80004dc <MX_GPIO_Init+0xf4>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <MX_GPIO_Init+0xf4>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0320 	and.w	r3, r3, #32
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <MX_GPIO_Init+0xf4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a2a      	ldr	r2, [pc, #168]	; (80004dc <MX_GPIO_Init+0xf4>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b28      	ldr	r3, [pc, #160]	; (80004dc <MX_GPIO_Init+0xf4>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b25      	ldr	r3, [pc, #148]	; (80004dc <MX_GPIO_Init+0xf4>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a24      	ldr	r2, [pc, #144]	; (80004dc <MX_GPIO_Init+0xf4>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b22      	ldr	r3, [pc, #136]	; (80004dc <MX_GPIO_Init+0xf4>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000462:	481f      	ldr	r0, [pc, #124]	; (80004e0 <MX_GPIO_Init+0xf8>)
 8000464:	f001 f82a 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_CE_Pin|RF_CSN_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2118      	movs	r1, #24
 800046c:	481d      	ldr	r0, [pc, #116]	; (80004e4 <MX_GPIO_Init+0xfc>)
 800046e:	f001 f825 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2302      	movs	r3, #2
 8000482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4815      	ldr	r0, [pc, #84]	; (80004e0 <MX_GPIO_Init+0xf8>)
 800048c:	f000 febc 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CE_Pin RF_CSN_Pin */
  GPIO_InitStruct.Pin = RF_CE_Pin|RF_CSN_Pin;
 8000490:	2318      	movs	r3, #24
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	2301      	movs	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2302      	movs	r3, #2
 800049e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	480f      	ldr	r0, [pc, #60]	; (80004e4 <MX_GPIO_Init+0xfc>)
 80004a8:	f000 feae 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 80004ac:	2301      	movs	r3, #1
 80004ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <MX_GPIO_Init+0x100>)
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <MX_GPIO_Init+0x104>)
 80004c0:	f000 fea2 	bl	8001208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2100      	movs	r1, #0
 80004c8:	2006      	movs	r0, #6
 80004ca:	f000 fdf0 	bl	80010ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004ce:	2006      	movs	r0, #6
 80004d0:	f000 fe09 	bl	80010e6 <HAL_NVIC_EnableIRQ>

}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40011000 	.word	0x40011000
 80004e4:	40010800 	.word	0x40010800
 80004e8:	10210000 	.word	0x10210000
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <rx_task>:

/* USER CODE BEGIN 4 */
void rx_task()
{
 80004f0:	b5b0      	push	{r4, r5, r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
    //Verificar se chegou (recebeu) um novo pacote pelo canal RF.
    //(O MIP enviou um pacote para o HOST).
    if (rx_newPayload > 0)  //newPayload setada em IRQ de chegada de novo pacote (RX)
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <rx_task+0x74>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d02d      	beq.n	800055a <rx_task+0x6a>
    {
        rx_newPayload = 0; //sdinalizar payload recebida
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <rx_task+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
        uint8_t rrr[] = {"Entrou no rx task\n"};
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <rx_task+0x78>)
 8000506:	1d3c      	adds	r4, r7, #4
 8000508:	461d      	mov	r5, r3
 800050a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050e:	682b      	ldr	r3, [r5, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	8022      	strh	r2, [r4, #0]
 8000514:	3402      	adds	r4, #2
 8000516:	0c1b      	lsrs	r3, r3, #16
 8000518:	7023      	strb	r3, [r4, #0]
        CDC_Transmit_FS(rrr, sizeof(rrr));
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2113      	movs	r1, #19
 800051e:	4618      	mov	r0, r3
 8000520:	f005 ff28 	bl	8006374 <CDC_Transmit_FS>

        if(rx_payloadWidth > 0) //Se a interrupção foi gerado por algum ruído etc, não teremos dados no payload
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <rx_task+0x7c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d016      	beq.n	800055a <rx_task+0x6a>
        {
          //Enviar pacote recebido para o código do HOST (Visual Studio) via serial COMM (USB)
          //Serial.write(host_nrf.rx_buf, host_nrf.rx_payloadWidth);

        	HAL_Delay(10);
 800052c:	200a      	movs	r0, #10
 800052e:	f000 fcc5 	bl	8000ebc <HAL_Delay>
        	CDC_Transmit_FS(rx_buf, rx_payloadWidth);
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <rx_task+0x7c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b29b      	uxth	r3, r3
 8000538:	4619      	mov	r1, r3
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <rx_task+0x80>)
 800053c:	f005 ff1a 	bl	8006374 <CDC_Transmit_FS>
        	HAL_Delay(10);
 8000540:	200a      	movs	r0, #10
 8000542:	f000 fcbb 	bl	8000ebc <HAL_Delay>
        	uint8_t nl = '\n';
 8000546:	230a      	movs	r3, #10
 8000548:	70fb      	strb	r3, [r7, #3]
        	CDC_Transmit_FS(&nl, 1);
 800054a:	1cfb      	adds	r3, r7, #3
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f005 ff10 	bl	8006374 <CDC_Transmit_FS>
        	HAL_Delay(10);
 8000554:	200a      	movs	r0, #10
 8000556:	f000 fcb1 	bl	8000ebc <HAL_Delay>
        }
    }
}
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bdb0      	pop	{r4, r5, r7, pc}
 8000562:	bf00      	nop
 8000564:	200001a2 	.word	0x200001a2
 8000568:	08006bf8 	.word	0x08006bf8
 800056c:	200001a1 	.word	0x200001a1
 8000570:	20000420 	.word	0x20000420

08000574 <convert2ascii>:

uint8_t convert2ascii(uint8_t num)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	if(num <= 0x09)
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b09      	cmp	r3, #9
 8000582:	d803      	bhi.n	800058c <convert2ascii+0x18>
	{
		num = num + 0x30;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	3330      	adds	r3, #48	; 0x30
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	e002      	b.n	8000592 <convert2ascii+0x1e>
	}
	else
	{
		num = num + 0x37;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	3337      	adds	r3, #55	; 0x37
 8000590:	71fb      	strb	r3, [r7, #7]
	}
	return num;
 8000592:	79fb      	ldrb	r3, [r7, #7]
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <printAscii>:
void printAscii(uint8_t byte)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b084      	sub	sp, #16
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	4603      	mov	r3, r0
 80005a6:	71fb      	strb	r3, [r7, #7]
	uint8_t sta[3];
  sta[0] = ((byte & 0xF0) >> 4); //MSB
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	091b      	lsrs	r3, r3, #4
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	733b      	strb	r3, [r7, #12]
  sta[0] = convert2ascii(sta[0]);
 80005b0:	7b3b      	ldrb	r3, [r7, #12]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ffde 	bl	8000574 <convert2ascii>
 80005b8:	4603      	mov	r3, r0
 80005ba:	733b      	strb	r3, [r7, #12]
  sta[1] = (byte & 0x0F);
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	737b      	strb	r3, [r7, #13]
  sta[1] = convert2ascii(sta[1]);//LSB
 80005c6:	7b7b      	ldrb	r3, [r7, #13]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffd3 	bl	8000574 <convert2ascii>
 80005ce:	4603      	mov	r3, r0
 80005d0:	737b      	strb	r3, [r7, #13]
  sta[2] = '\n';
 80005d2:	230a      	movs	r3, #10
 80005d4:	73bb      	strb	r3, [r7, #14]

  CDC_Transmit_FS(sta, 3);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2103      	movs	r1, #3
 80005dc:	4618      	mov	r0, r3
 80005de:	f005 fec9 	bl	8006374 <CDC_Transmit_FS>
  HAL_Delay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f000 fc6a 	bl	8000ebc <HAL_Delay>
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == RF_IRQ_Pin)
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d108      	bne.n	8000612 <HAL_GPIO_EXTI_Callback+0x22>
	  //SPI_Read_Buf(R_RX_PAYLOAD, &rxx_buf, tamanho);
	  //CDC_Transmit_FS(rxx_buf, sizeof(rxx_buf));
	  //uint8_t fifo_sta = SPI_read2(FIFO_STATUS);
	  //printAscii(fifo_sta);

	  if(nRFint_guard > 0)
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d004      	beq.n	8000612 <HAL_GPIO_EXTI_Callback+0x22>
		  RF_IRQ(rx_buf, &rx_payloadWidth, &rx_newPayload);
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <HAL_GPIO_EXTI_Callback+0x30>)
 800060a:	4906      	ldr	r1, [pc, #24]	; (8000624 <HAL_GPIO_EXTI_Callback+0x34>)
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <HAL_GPIO_EXTI_Callback+0x38>)
 800060e:	f000 fa4b 	bl	8000aa8 <RF_IRQ>



  }
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200001a0 	.word	0x200001a0
 8000620:	200001a2 	.word	0x200001a2
 8000624:	200001a1 	.word	0x200001a1
 8000628:	20000420 	.word	0x20000420

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <nRF24L01_STM32>:
/**
 * Construtor usando pinos default
 * @param spi
 **/
void nRF24L01_STM32(SPI_HandleTypeDef spi)
{
 8000638:	b084      	sub	sp, #16
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
 800063e:	f107 0c08 	add.w	ip, r7, #8
 8000642:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    _spi = spi;
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <nRF24L01_STM32+0x2c>)
 8000648:	4618      	mov	r0, r3
 800064a:	f107 0108 	add.w	r1, r7, #8
 800064e:	2358      	movs	r3, #88	; 0x58
 8000650:	461a      	mov	r2, r3
 8000652:	f006 fa85 	bl	8006b60 <memcpy>
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800065e:	b004      	add	sp, #16
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200003c8 	.word	0x200003c8

08000668 <init>:
 * @param rf_data_rate
 * @param rf_pwr
 */

uint8_t init(uint8_t rf_channel, rf_data_rate_t rf_data_rate, rf_tx_power_t rf_pwr)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	460b      	mov	r3, r1
 8000674:	71bb      	strb	r3, [r7, #6]
 8000676:	4613      	mov	r3, r2
 8000678:	717b      	strb	r3, [r7, #5]
    // Setup values of the registers
    uint8_t rf_setup_byte;
    uint8_t setup_aw_value = 0x03;
 800067a:	2303      	movs	r3, #3
 800067c:	757b      	strb	r3, [r7, #21]
    uint8_t en_aa_value = 0x00;
 800067e:	2300      	movs	r3, #0
 8000680:	753b      	strb	r3, [r7, #20]
    uint8_t en_rxaddr_value = 0x01;
 8000682:	2301      	movs	r3, #1
 8000684:	74fb      	strb	r3, [r7, #19]
    uint8_t setup_retr_value = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	74bb      	strb	r3, [r7, #18]
    uint8_t dypnd_value = 0x01;
 800068a:	2301      	movs	r3, #1
 800068c:	747b      	strb	r3, [r7, #17]
    uint8_t feature_value = 0x07;
 800068e:	2307      	movs	r3, #7
 8000690:	743b      	strb	r3, [r7, #16]
    uint8_t zero = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
    uint8_t nrf_status_value = 0x07;
 8000696:	2307      	movs	r3, #7
 8000698:	73bb      	strb	r3, [r7, #14]

    //uint8_t addr_host[TX_RX_ADDR_WIDTH] = {0xE7,0xE7,0xE7,0xE7,0xE7};

    //Aguardar sequencia de power-up _ start do CI (~12ms) 
    HAL_Delay(20);
 800069a:	2014      	movs	r0, #20
 800069c:	f000 fc0e 	bl	8000ebc <HAL_Delay>

    //rx_newPayload = 0;      // Init with no new payload
    //rx_payloadWidth = 0;    // It has no length
    status = 0;             // Stores the STATUS register status
 80006a0:	4b59      	ldr	r3, [pc, #356]	; (8000808 <init+0x1a0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
    TX_OK = 0;              // initiates in stand-by
 80006a6:	4b59      	ldr	r3, [pc, #356]	; (800080c <init+0x1a4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
    RX_OK = 0;              // "
 80006ac:	4b58      	ldr	r3, [pc, #352]	; (8000810 <init+0x1a8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]

    // Set CSN high, no SPI transaction yet
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2110      	movs	r1, #16
 80006b6:	4857      	ldr	r0, [pc, #348]	; (8000814 <init+0x1ac>)
 80006b8:	f000 ff00 	bl	80014bc <HAL_GPIO_WritePin>
 
    // Disable RX TX
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2108      	movs	r1, #8
 80006c0:	4854      	ldr	r0, [pc, #336]	; (8000814 <init+0x1ac>)
 80006c2:	f000 fefb 	bl	80014bc <HAL_GPIO_WritePin>
    //Configuração:

    //W_REGISTER=001A AAAA: Read command and status registers. AAAAA = 5 bit Register Map Address

    // SETUP_AW register: Setup of Address Widths - (common for all data pipes)  
    SPI_Write_Reg(SETUP_AW, &setup_aw_value); //RX/TX Address field width 5 bytes
 80006c6:	f107 0315 	add.w	r3, r7, #21
 80006ca:	4619      	mov	r1, r3
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f8a5 	bl	800081c <SPI_Write_Reg>
    // Configuration register é definido quando entra no modo RX ou TX (ver funções para cada modo)
    
    // EN_AA register: Disable Auto Acknowledgment
    SPI_Write_Reg(EN_AA, &en_aa_value);        // Disable Auto Acknowledgment: All pipes
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 f89f 	bl	800081c <SPI_Write_Reg>

    // EN_RXADDR register: Enable Pipe0 (only pipe0)
    SPI_Write_Reg(EN_RXADDR, &en_rxaddr_value);    // Enable Pipe0 (only pipe0)
 80006de:	f107 0313 	add.w	r3, r7, #19
 80006e2:	4619      	mov	r1, r3
 80006e4:	2002      	movs	r0, #2
 80006e6:	f000 f899 	bl	800081c <SPI_Write_Reg>

    // SETUP_RETR register: Time to automatic retransmition selected: 250us, retransmition disabled
    SPI_Write_Reg(SETUP_RETR, &setup_retr_value);
 80006ea:	f107 0312 	add.w	r3, r7, #18
 80006ee:	4619      	mov	r1, r3
 80006f0:	2004      	movs	r0, #4
 80006f2:	f000 f893 	bl	800081c <SPI_Write_Reg>

    // RF_CH register: Select RF channel
    SPI_Write_Reg(RF_CH, &rf_channel);          // Select RF channel: Fo = 2,490 GHz + rf_channel
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	4619      	mov	r1, r3
 80006fa:	2005      	movs	r0, #5
 80006fc:	f000 f88e 	bl	800081c <SPI_Write_Reg>
    /************************* CONTINUA DAQUI *************************/

    //RF SETUP
    //Ajustar potência de saída em modo TX (bits 2:1)
    //  bit 0 = 1 (setup LNA gain)
    rf_setup_byte = 0x01; //0000 0001
 8000700:	2301      	movs	r3, #1
 8000702:	75bb      	strb	r3, [r7, #22]
    switch (rf_pwr) 
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	2b03      	cmp	r3, #3
 8000708:	d82c      	bhi.n	8000764 <init+0xfc>
 800070a:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <init+0xa8>)
 800070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000710:	08000721 	.word	0x08000721
 8000714:	0800072d 	.word	0x0800072d
 8000718:	08000743 	.word	0x08000743
 800071c:	08000759 	.word	0x08000759
    {     
        case RF_TX_POWER_NEGATIVE_18dBm: //bits 2:1 = 00
            rf_setup_byte &= 0xF9; //1111 1001
 8000720:	7dbb      	ldrb	r3, [r7, #22]
 8000722:	f023 0306 	bic.w	r3, r3, #6
 8000726:	b2db      	uxtb	r3, r3
 8000728:	75bb      	strb	r3, [r7, #22]
        break;
 800072a:	e01c      	b.n	8000766 <init+0xfe>

        case RF_TX_POWER_NEGATIVE_12dBm: //bits 2:1 = 01
            rf_setup_byte |= 0x02;//0000 0010
 800072c:	7dbb      	ldrb	r3, [r7, #22]
 800072e:	f043 0302 	orr.w	r3, r3, #2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	75bb      	strb	r3, [r7, #22]
            rf_setup_byte &= 0xFB;//1111 1011 
 8000736:	7dbb      	ldrb	r3, [r7, #22]
 8000738:	f023 0304 	bic.w	r3, r3, #4
 800073c:	b2db      	uxtb	r3, r3
 800073e:	75bb      	strb	r3, [r7, #22]
        break;
 8000740:	e011      	b.n	8000766 <init+0xfe>

        case RF_TX_POWER_NEGATIVE_6dBm: //bits 2:1 = 10
            rf_setup_byte &= 0xFD;//1111 1101
 8000742:	7dbb      	ldrb	r3, [r7, #22]
 8000744:	f023 0302 	bic.w	r3, r3, #2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	75bb      	strb	r3, [r7, #22]
            rf_setup_byte |= 0x04;//0000 0100
 800074c:	7dbb      	ldrb	r3, [r7, #22]
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	b2db      	uxtb	r3, r3
 8000754:	75bb      	strb	r3, [r7, #22]
        break;
 8000756:	e006      	b.n	8000766 <init+0xfe>

        case RF_TX_POWER_0dBm: //bits 2:1 = 11
            rf_setup_byte |= 0x06;//0000 0110
 8000758:	7dbb      	ldrb	r3, [r7, #22]
 800075a:	f043 0306 	orr.w	r3, r3, #6
 800075e:	b2db      	uxtb	r3, r3
 8000760:	75bb      	strb	r3, [r7, #22]
        break;
 8000762:	e000      	b.n	8000766 <init+0xfe>

        default: 
        break;      
 8000764:	bf00      	nop
        }
        //Ajustar Air Data Rate (bit 3)
        switch (rf_data_rate) 
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <init+0x10a>
 800076c:	2b01      	cmp	r3, #1
 800076e:	d006      	beq.n	800077e <init+0x116>
 8000770:	e00b      	b.n	800078a <init+0x122>
        {
        case RF_DATA_RATE_1Mbps: //bit 3 = 0
            rf_setup_byte &= 0xF7;//1111 0111
 8000772:	7dbb      	ldrb	r3, [r7, #22]
 8000774:	f023 0308 	bic.w	r3, r3, #8
 8000778:	b2db      	uxtb	r3, r3
 800077a:	75bb      	strb	r3, [r7, #22]
        break;
 800077c:	e005      	b.n	800078a <init+0x122>
        case RF_DATA_RATE_2Mbps: //bit 3 = 1
            rf_setup_byte |= 0x08;//0000 1000
 800077e:	7dbb      	ldrb	r3, [r7, #22]
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	b2db      	uxtb	r3, r3
 8000786:	75bb      	strb	r3, [r7, #22]
        break;
 8000788:	bf00      	nop
        }
    //Bit 4: PLL_LOCK = 0; bits 7:5 = Reserved = 000
    rf_setup_byte &= 0x0F;//0000 1111
 800078a:	7dbb      	ldrb	r3, [r7, #22]
 800078c:	f003 030f 	and.w	r3, r3, #15
 8000790:	b2db      	uxtb	r3, r3
 8000792:	75bb      	strb	r3, [r7, #22]
    SPI_Write_Reg(RF_SETUP, &rf_setup_byte);     // TX_PWR:0dBm, Datarate:1Mbps, LNA:HCURR
 8000794:	f107 0316 	add.w	r3, r7, #22
 8000798:	4619      	mov	r1, r3
 800079a:	2006      	movs	r0, #6
 800079c:	f000 f83e 	bl	800081c <SPI_Write_Reg>
    uint8_t addr_host[TX_RX_ADDR_WIDTH] = {0};
    for(int i = 0; i < TX_RX_ADDR_WIDTH; i++)
    	addr_host[i] = ADDR_HOST[i];
    	*/
    //Transmiter Address.
    SPI_Write_Buf_Reg(TX_ADDR, &ADDR_HOST, TX_RX_ADDR_WIDTH);
 80007a0:	2205      	movs	r2, #5
 80007a2:	491d      	ldr	r1, [pc, #116]	; (8000818 <init+0x1b0>)
 80007a4:	2010      	movs	r0, #16
 80007a6:	f000 f865 	bl	8000874 <SPI_Write_Buf_Reg>
    //Receiver Address - Pipe 0
    SPI_Write_Buf_Reg(RX_ADDR_P0, &ADDR_HOST, TX_RX_ADDR_WIDTH);
 80007aa:	2205      	movs	r2, #5
 80007ac:	491a      	ldr	r1, [pc, #104]	; (8000818 <init+0x1b0>)
 80007ae:	200a      	movs	r0, #10
 80007b0:	f000 f860 	bl	8000874 <SPI_Write_Buf_Reg>
    // Ativa Payload dinamico em data pipe 0
    SPI_Write_Reg(DYNPD, &dypnd_value);        // Ativa Payload dinâmico em data pipe 0
 80007b4:	f107 0311 	add.w	r3, r7, #17
 80007b8:	4619      	mov	r1, r3
 80007ba:	201c      	movs	r0, #28
 80007bc:	f000 f82e 	bl	800081c <SPI_Write_Reg>
    // Ativa Payload dinamico, com ACK e comando W_TX_PAY
    SPI_Write_Reg(FEATURE, &feature_value);      // Ativa Payload dinâmico, com ACK e comando W_TX_PAY
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	201d      	movs	r0, #29
 80007c8:	f000 f828 	bl	800081c <SPI_Write_Reg>
    //After the packet is validated, Enhanched ShockBurst™ disassembles the packet and loads the payload into
    //the RX FIFO, and assert the RX_DR IRQ (active low)
    //A interrupção é associada ao handler RF_IRQ (nesta classe), no código principal (rf_shield_Host.cpp).

    // Clears the TX and RX FIFO
    SPI_Write(FLUSH_TX, &zero);
 80007cc:	f107 030f 	add.w	r3, r7, #15
 80007d0:	4619      	mov	r1, r3
 80007d2:	20e1      	movs	r0, #225	; 0xe1
 80007d4:	f000 f87a 	bl	80008cc <SPI_Write>
    SPI_Write(FLUSH_RX, &zero);
 80007d8:	f107 030f 	add.w	r3, r7, #15
 80007dc:	4619      	mov	r1, r3
 80007de:	20e2      	movs	r0, #226	; 0xe2
 80007e0:	f000 f874 	bl	80008cc <SPI_Write>

    // Writes in the STATUS register
    SPI_Write_Reg(NRF_STATUS, &nrf_status_value);
 80007e4:	f107 030e 	add.w	r3, r7, #14
 80007e8:	4619      	mov	r1, r3
 80007ea:	2007      	movs	r0, #7
 80007ec:	f000 f816 	bl	800081c <SPI_Write_Reg>

    uint8_t sta = SPI_Read_Reg(NRF_STATUS);
 80007f0:	2007      	movs	r0, #7
 80007f2:	f000 f8e1 	bl	80009b8 <SPI_Read_Reg>
 80007f6:	4603      	mov	r3, r0
 80007f8:	75fb      	strb	r3, [r7, #23]

    //Default: Stay in RX Mode waiting for data from MIP
    RX_Mode();
 80007fa:	f000 f931 	bl	8000a60 <RX_Mode>

    return sta;
 80007fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200001a3 	.word	0x200001a3
 800080c:	200001a4 	.word	0x200001a4
 8000810:	200001a5 	.word	0x200001a5
 8000814:	40010800 	.word	0x40010800
 8000818:	20000000 	.word	0x20000000

0800081c <SPI_Write_Reg>:
 * Writes a value in a register
 * @param reg   Register adress
 * @param value Value to be written
 **/
void SPI_Write_Reg(uint8_t reg, uint8_t * value)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
    uint16_t size = sizeof(*value);
 8000828:	2301      	movs	r3, #1
 800082a:	81fb      	strh	r3, [r7, #14]
    reg = (uint8_t) W_REGISTER + reg;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	3320      	adds	r3, #32
 8000830:	b2db      	uxtb	r3, r3
 8000832:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000834:	2200      	movs	r2, #0
 8000836:	2110      	movs	r1, #16
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <SPI_Write_Reg+0x50>)
 800083a:	f000 fe3f 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY);                    // select register
 800083e:	1df9      	adds	r1, r7, #7
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	2201      	movs	r2, #1
 8000846:	480a      	ldr	r0, [pc, #40]	; (8000870 <SPI_Write_Reg+0x54>)
 8000848:	f002 fa63 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 800084c:	89fa      	ldrh	r2, [r7, #14]
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	6839      	ldr	r1, [r7, #0]
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <SPI_Write_Reg+0x54>)
 8000856:	f002 fa5c 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 800085a:	2201      	movs	r2, #1
 800085c:	2110      	movs	r1, #16
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <SPI_Write_Reg+0x50>)
 8000860:	f000 fe2c 	bl	80014bc <HAL_GPIO_WritePin>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40010800 	.word	0x40010800
 8000870:	200003c8 	.word	0x200003c8

08000874 <SPI_Write_Buf_Reg>:
 * @param reg   Register adress
 * @param value Value to be written
 * @param size  Buffer size
 **/
void SPI_Write_Buf_Reg(uint8_t reg, uint8_t *value, uint16_t size)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	80bb      	strh	r3, [r7, #4]
    reg = (uint8_t) W_REGISTER + reg;
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	3320      	adds	r3, #32
 8000888:	b2db      	uxtb	r3, r3
 800088a:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <SPI_Write_Buf_Reg+0x50>)
 8000892:	f000 fe13 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY);                    // select register
 8000896:	1df9      	adds	r1, r7, #7
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2201      	movs	r2, #1
 800089e:	480a      	ldr	r0, [pc, #40]	; (80008c8 <SPI_Write_Buf_Reg+0x54>)
 80008a0:	f002 fa37 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 80008a4:	88ba      	ldrh	r2, [r7, #4]
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	6839      	ldr	r1, [r7, #0]
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <SPI_Write_Buf_Reg+0x54>)
 80008ae:	f002 fa30 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 80008b2:	2201      	movs	r2, #1
 80008b4:	2110      	movs	r1, #16
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <SPI_Write_Buf_Reg+0x50>)
 80008b8:	f000 fe00 	bl	80014bc <HAL_GPIO_WritePin>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010800 	.word	0x40010800
 80008c8:	200003c8 	.word	0x200003c8

080008cc <SPI_Write>:
 * Send a command that need a value to be written
 * @param command   SPI command
 * @param value     Value to be written
 **/
void SPI_Write(uint8_t command, uint8_t * value)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
    uint16_t size = sizeof(*value);
 80008d8:	2301      	movs	r3, #1
 80008da:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 80008dc:	2200      	movs	r2, #0
 80008de:	2110      	movs	r1, #16
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SPI_Write+0x48>)
 80008e2:	f000 fdeb 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY);                    // select register
 80008e6:	1df9      	adds	r1, r7, #7
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2201      	movs	r2, #1
 80008ee:	480a      	ldr	r0, [pc, #40]	; (8000918 <SPI_Write+0x4c>)
 80008f0:	f002 fa0f 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 80008f4:	89fa      	ldrh	r2, [r7, #14]
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	6839      	ldr	r1, [r7, #0]
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <SPI_Write+0x4c>)
 80008fe:	f002 fa08 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000902:	2201      	movs	r2, #1
 8000904:	2110      	movs	r1, #16
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <SPI_Write+0x48>)
 8000908:	f000 fdd8 	bl	80014bc <HAL_GPIO_WritePin>
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40010800 	.word	0x40010800
 8000918:	200003c8 	.word	0x200003c8

0800091c <SPI_Read>:
 * Reads a value returned by a command
 * @param command   SPI command
 * @return The byte returned by the command
 **/
uint8_t SPI_Read(uint8_t command)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
    uint8_t reading = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 800092a:	2200      	movs	r2, #0
 800092c:	2110      	movs	r1, #16
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <SPI_Read+0x4c>)
 8000930:	f000 fdc4 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY); 
 8000934:	1df9      	adds	r1, r7, #7
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	2201      	movs	r2, #1
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <SPI_Read+0x50>)
 800093e:	f002 f9e8 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, &reading, sizeof(command), HAL_MAX_DELAY);
 8000942:	f107 010f 	add.w	r1, r7, #15
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	2201      	movs	r2, #1
 800094c:	4807      	ldr	r0, [pc, #28]	; (800096c <SPI_Read+0x50>)
 800094e:	f002 fb14 	bl	8002f7a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000952:	2201      	movs	r2, #1
 8000954:	2110      	movs	r1, #16
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <SPI_Read+0x4c>)
 8000958:	f000 fdb0 	bl	80014bc <HAL_GPIO_WritePin>

    return reading;
 800095c:	7bfb      	ldrb	r3, [r7, #15]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40010800 	.word	0x40010800
 800096c:	200003c8 	.word	0x200003c8

08000970 <SPI_Read_Status>:

uint8_t SPI_Read_Status()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af02      	add	r7, sp, #8
    uint8_t reg_read = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	71fb      	strb	r3, [r7, #7]
    uint8_t zeros = 0xFF;
 800097a:	23ff      	movs	r3, #255	; 0xff
 800097c:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 800097e:	2200      	movs	r2, #0
 8000980:	2110      	movs	r1, #16
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <SPI_Read_Status+0x40>)
 8000984:	f000 fd9a 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive (&_spi, &zeros, &reg_read, 1, HAL_MAX_DELAY);
 8000988:	1dfa      	adds	r2, r7, #7
 800098a:	1db9      	adds	r1, r7, #6
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <SPI_Read_Status+0x44>)
 8000996:	f002 fbf9 	bl	800318c <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 800099a:	2201      	movs	r2, #1
 800099c:	2110      	movs	r1, #16
 800099e:	4804      	ldr	r0, [pc, #16]	; (80009b0 <SPI_Read_Status+0x40>)
 80009a0:	f000 fd8c 	bl	80014bc <HAL_GPIO_WritePin>

    return reg_read;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010800 	.word	0x40010800
 80009b4:	200003c8 	.word	0x200003c8

080009b8 <SPI_Read_Reg>:
 * Reads a register e returns its value
 * @param reg   Register adress
 * @return Value read from the register
 **/
uint8_t SPI_Read_Reg(uint8_t reg)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
    uint8_t reg_read = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73fb      	strb	r3, [r7, #15]
    reg = (uint8_t) R_REGISTER + reg;
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 80009ca:	2200      	movs	r2, #0
 80009cc:	2110      	movs	r1, #16
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <SPI_Read_Reg+0x50>)
 80009d0:	f000 fd74 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY); 
 80009d4:	1df9      	adds	r1, r7, #7
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	2201      	movs	r2, #1
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <SPI_Read_Reg+0x54>)
 80009de:	f002 f998 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, &reg_read, sizeof(reg), HAL_MAX_DELAY);
 80009e2:	f107 010f 	add.w	r1, r7, #15
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	2201      	movs	r2, #1
 80009ec:	4807      	ldr	r0, [pc, #28]	; (8000a0c <SPI_Read_Reg+0x54>)
 80009ee:	f002 fac4 	bl	8002f7a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 80009f2:	2201      	movs	r2, #1
 80009f4:	2110      	movs	r1, #16
 80009f6:	4804      	ldr	r0, [pc, #16]	; (8000a08 <SPI_Read_Reg+0x50>)
 80009f8:	f000 fd60 	bl	80014bc <HAL_GPIO_WritePin>

    return reg_read;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	200003c8 	.word	0x200003c8

08000a10 <SPI_Read_Buf>:
 * Sends a command and reads a buffer of bytes
 * @param command   SPI command
 * @param dataBuf   Buffer to store the data
 **/
void SPI_Read_Buf(uint8_t command, uint8_t *dataBuf, uint16_t size)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	80bb      	strh	r3, [r7, #4]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);  // CSN low, initiate SPI transaction
 8000a20:	2200      	movs	r2, #0
 8000a22:	2110      	movs	r1, #16
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <SPI_Read_Buf+0x48>)
 8000a26:	f000 fd49 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, 1, HAL_MAX_DELAY);           // select register
 8000a2a:	1df9      	adds	r1, r7, #7
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	2201      	movs	r2, #1
 8000a32:	480a      	ldr	r0, [pc, #40]	; (8000a5c <SPI_Read_Buf+0x4c>)
 8000a34:	f002 f96d 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, dataBuf, size, HAL_MAX_DELAY);               // read register
 8000a38:	88ba      	ldrh	r2, [r7, #4]
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <SPI_Read_Buf+0x4c>)
 8000a42:	f002 fa9a 	bl	8002f7a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);    // CSN high again, ends SPI transaction
 8000a46:	2201      	movs	r2, #1
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <SPI_Read_Buf+0x48>)
 8000a4c:	f000 fd36 	bl	80014bc <HAL_GPIO_WritePin>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	200003c8 	.word	0x200003c8

08000a60 <RX_Mode>:

/**
 * Changes the nRF state to RX
 **/
void RX_Mode(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
    //rx_newPayload = 0;
    status = 0;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <RX_Mode+0x3c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
    RX_OK = 0;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <RX_Mode+0x40>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]

    uint8_t config_value = 0x1F;
 8000a72:	231f      	movs	r3, #31
 8000a74:	71fb      	strb	r3, [r7, #7]
    //The RX mode is an active mode where the nRF24L01 radio is a receiver. To enter this mode, the
    //nRF24L01 must have the PWR_UP bit set high, PRIM_RX bit set high and the CE pin set high.

    //Make sure you sett CE = 0 first, so the chip is in Standby mode before you change radio mode. 
    //CE (active high and is used to activate the chip in RX or TX mode) - 0: Desativa o transceiver para programação
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET); 
 8000a76:	2200      	movs	r2, #0
 8000a78:	2108      	movs	r1, #8
 8000a7a:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <RX_Mode+0x44>)
 8000a7c:	f000 fd1e 	bl	80014bc <HAL_GPIO_WritePin>
    // b4. MASK_MAX_RT  = 1: Disabled - Reflect MAX_RT as active low on RFIRQ
    // b3. EN_CRC       = 1: Enable CRC - Forced high if one of the bits in the EN_AA is high
    // b2. CRCO         = 1: CRC encoding 2 bytes
    // b1. PWR_UP       = 1: POWER UP
    // b0. PRIM_RX      = 1: RX/TX control with RX (sets the nRF24L01 in transmit/receive)
    SPI_Write_Reg(CONFIG, &config_value);
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	4619      	mov	r1, r3
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fec9 	bl	800081c <SPI_Write_Reg>

    //CE (active high and is used to activate the chip in RX or TX mode) - a: Ativa o transceiver para RX
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_SET); 
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <RX_Mode+0x44>)
 8000a90:	f000 fd14 	bl	80014bc <HAL_GPIO_WritePin>
  
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200001a3 	.word	0x200001a3
 8000aa0:	200001a5 	.word	0x200001a5
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <RF_IRQ>:
/**
 * Function called when an IRQ occurs. After verifying the nRF state it saves the paylod (RX mode) or 
 *  flushes the TX FIFO after a sucessful transmission
 **/
void RF_IRQ(uint8_t *buf, uint8_t *size, uint8_t *newPayload)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
    // Read STATUS register
    status = SPI_Read_Status();
 8000ab4:	f7ff ff5c 	bl	8000970 <SPI_Read_Status>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <RF_IRQ+0xa0>)
 8000abe:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_TogglePin(_RF_LED_GPIO_Port, _RF_LED_Pin);
 8000ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac4:	4821      	ldr	r0, [pc, #132]	; (8000b4c <RF_IRQ+0xa4>)
 8000ac6:	f000 fd11 	bl	80014ec <HAL_GPIO_TogglePin>

    if(status & RX_DR)
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <RF_IRQ+0xa0>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d01f      	beq.n	8000b16 <RF_IRQ+0x6e>
    { 
        // if received data ready (RX_DR) interrupt
        RX_OK = 1;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <RF_IRQ+0xa8>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
        *size = SPI_Read(R_RX_PLD_WIDTH);  // Retorna o número de bytes no payload recebido
 8000adc:	2060      	movs	r0, #96	; 0x60
 8000ade:	f7ff ff1d 	bl	800091c <SPI_Read>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	701a      	strb	r2, [r3, #0]
        SPI_Read_Buf(R_RX_PAYLOAD, buf, *size);  // read receive payload from RX_FIFO buffer
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	68f9      	ldr	r1, [r7, #12]
 8000af4:	2061      	movs	r0, #97	; 0x61
 8000af6:	f7ff ff8b 	bl	8000a10 <SPI_Read_Buf>

        if(*size > 32)  //Não pode conter mais que 32 bytes
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b20      	cmp	r3, #32
 8000b00:	d902      	bls.n	8000b08 <RF_IRQ+0x60>
        {
            *size = 0;
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
        }
        SPI_Write(FLUSH_RX, 0x00); //Limpar o buffer RX (os dados recebidos estão em rx_buf).
 8000b08:	2100      	movs	r1, #0
 8000b0a:	20e2      	movs	r0, #226	; 0xe2
 8000b0c:	f7ff fede 	bl	80008cc <SPI_Write>
        //*size = 1; //indicar que um novo payload está disponível em rx_buf
        *newPayload = 1;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
    }

    //se o pacote foi reconhecido pelo receptor (funciona com TX-ACK)
    if(status & TX_DS)
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <RF_IRQ+0xa0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	f003 0320 	and.w	r3, r3, #32
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <RF_IRQ+0x88>
    {
        //Completou TX ?
        TX_OK = 1;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <RF_IRQ+0xac>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
        SPI_Write(FLUSH_TX,0); //limpar o buffer TX
 8000b28:	2100      	movs	r1, #0
 8000b2a:	20e1      	movs	r0, #225	; 0xe1
 8000b2c:	f7ff fece 	bl	80008cc <SPI_Write>
    }
    
    //Reset status
    uint8_t sta_val = 0x70;
 8000b30:	2370      	movs	r3, #112	; 0x70
 8000b32:	75fb      	strb	r3, [r7, #23]
    SPI_Write_Reg(NRF_STATUS, &sta_val);
 8000b34:	f107 0317 	add.w	r3, r7, #23
 8000b38:	4619      	mov	r1, r3
 8000b3a:	2007      	movs	r0, #7
 8000b3c:	f7ff fe6e 	bl	800081c <SPI_Write_Reg>
}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200001a3 	.word	0x200001a3
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	200001a5 	.word	0x200001a5
 8000b54:	200001a4 	.word	0x200001a4

08000b58 <SPI_read2>:

uint8_t SPI_read2(uint8_t reg)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
    uint8_t reg_read = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]
    reg = (uint8_t) R_REGISTER + reg;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <SPI_read2+0x50>)
 8000b70:	f000 fca4 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY);
 8000b74:	1df9      	adds	r1, r7, #7
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <SPI_read2+0x54>)
 8000b7e:	f002 f8c8 	bl	8002d12 <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, &reg_read, sizeof(reg), HAL_MAX_DELAY);
 8000b82:	f107 010f 	add.w	r1, r7, #15
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <SPI_read2+0x54>)
 8000b8e:	f002 f9f4 	bl	8002f7a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000b92:	2201      	movs	r2, #1
 8000b94:	2110      	movs	r1, #16
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <SPI_read2+0x50>)
 8000b98:	f000 fc90 	bl	80014bc <HAL_GPIO_WritePin>

    return reg_read;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	200003c8 	.word	0x200003c8

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_MspInit+0x60>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_MspInit+0x60>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000

08000c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <HAL_SPI_MspInit+0x98>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d137      	bne.n	8000ca4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <HAL_SPI_MspInit+0x9c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_SPI_MspInit+0x9c>)
 8000c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_SPI_MspInit+0x9c>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_SPI_MspInit+0x9c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_SPI_MspInit+0x9c>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_SPI_MspInit+0x9c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MOSI_Pin;
 8000c64:	23a0      	movs	r3, #160	; 0xa0
 8000c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4619      	mov	r1, r3
 8000c76:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <HAL_SPI_MspInit+0xa0>)
 8000c78:	f000 fac6 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_MISO_Pin;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RF_MISO_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <HAL_SPI_MspInit+0xa0>)
 8000c90:	f000 faba 	bl	8001208 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2023      	movs	r0, #35	; 0x23
 8000c9a:	f000 fa08 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c9e:	2023      	movs	r0, #35	; 0x23
 8000ca0:	f000 fa21 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40013000 	.word	0x40013000
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <HardFault_Handler+0x4>

08000cca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <MemManage_Handler+0x4>

08000cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <BusFault_Handler+0x4>

08000cd6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f8be 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 fc03 	bl	800151c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d22:	f000 fd1a 	bl	800175a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20001130 	.word	0x20001130

08000d30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <SPI1_IRQHandler+0x10>)
 8000d36:	f002 fbcb 	bl	80034d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000440 	.word	0x20000440

08000d44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <SystemInit+0x5c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <SystemInit+0x5c>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <SystemInit+0x5c>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	4911      	ldr	r1, [pc, #68]	; (8000da0 <SystemInit+0x5c>)
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <SystemInit+0x60>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <SystemInit+0x5c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <SystemInit+0x5c>)
 8000d66:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <SystemInit+0x5c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SystemInit+0x5c>)
 8000d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <SystemInit+0x5c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <SystemInit+0x5c>)
 8000d82:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d86:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SystemInit+0x5c>)
 8000d8a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d8e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SystemInit+0x64>)
 8000d92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d96:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000
 8000da4:	f8ff0000 	.word	0xf8ff0000
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dae:	e003      	b.n	8000db8 <LoopCopyDataInit>

08000db0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000db2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000db4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000db6:	3104      	adds	r1, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000db8:	480a      	ldr	r0, [pc, #40]	; (8000de4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000dbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000dc0:	d3f6      	bcc.n	8000db0 <CopyDataInit>
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000dc4:	e002      	b.n	8000dcc <LoopFillZerobss>

08000dc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000dc8:	f842 3b04 	str.w	r3, [r2], #4

08000dcc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000dce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dd0:	d3f9      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dd2:	f7ff ffb7 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f005 fe9f 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dda:	f7ff f9b7 	bl	800014c <main>
  bx lr
 8000dde:	4770      	bx	lr
  ldr r3, =_sidata
 8000de0:	08006c70 	.word	0x08006c70
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000de8:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 8000dec:	20000184 	.word	0x20000184
  ldr r3, = _ebss
 8000df0:	2000139c 	.word	0x2000139c

08000df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_2_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x28>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x28>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f945 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fecc 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f95d 	bl	8001102 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f925 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000010 	.word	0x20000010
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x1c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	20000010 	.word	0x20000010
 8000ea4:	20000498 	.word	0x20000498

08000ea8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <HAL_GetTick+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000498 	.word	0x20000498

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff fff0 	bl	8000ea8 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_Delay+0x40>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffe0 	bl	8000ea8 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000010 	.word	0x20000010

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4906      	ldr	r1, [pc, #24]	; (8000f98 <__NVIC_EnableIRQ+0x34>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff90 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff2d 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff42 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff90 	bl	8000ff0 <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5f 	bl	8000f9c <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff35 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800112e:	2b02      	cmp	r3, #2
 8001130:	d005      	beq.n	800113e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2204      	movs	r2, #4
 8001136:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e051      	b.n	80011e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 020e 	bic.w	r2, r2, #14
 800114c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_DMA_Abort_IT+0xd0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d029      	beq.n	80011bc <HAL_DMA_Abort_IT+0xa0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <HAL_DMA_Abort_IT+0xd4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d022      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x9c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <HAL_DMA_Abort_IT+0xd8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d01a      	beq.n	80011b2 <HAL_DMA_Abort_IT+0x96>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_DMA_Abort_IT+0xdc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d012      	beq.n	80011ac <HAL_DMA_Abort_IT+0x90>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_DMA_Abort_IT+0xe0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d00a      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x8a>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <HAL_DMA_Abort_IT+0xe4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d102      	bne.n	80011a0 <HAL_DMA_Abort_IT+0x84>
 800119a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800119e:	e00e      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a4:	e00b      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011aa:	e008      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	e005      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b6:	e002      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011b8:	2310      	movs	r3, #16
 80011ba:	e000      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011bc:	2301      	movs	r3, #1
 80011be:	4a11      	ldr	r2, [pc, #68]	; (8001204 <HAL_DMA_Abort_IT+0xe8>)
 80011c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	4798      	blx	r3
    } 
  }
  return status;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40020008 	.word	0x40020008
 80011f0:	4002001c 	.word	0x4002001c
 80011f4:	40020030 	.word	0x40020030
 80011f8:	40020044 	.word	0x40020044
 80011fc:	40020058 	.word	0x40020058
 8001200:	4002006c 	.word	0x4002006c
 8001204:	40020000 	.word	0x40020000

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b08b      	sub	sp, #44	; 0x2c
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e127      	b.n	800146c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800121c:	2201      	movs	r2, #1
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 8116 	bne.w	8001466 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b12      	cmp	r3, #18
 8001240:	d034      	beq.n	80012ac <HAL_GPIO_Init+0xa4>
 8001242:	2b12      	cmp	r3, #18
 8001244:	d80d      	bhi.n	8001262 <HAL_GPIO_Init+0x5a>
 8001246:	2b02      	cmp	r3, #2
 8001248:	d02b      	beq.n	80012a2 <HAL_GPIO_Init+0x9a>
 800124a:	2b02      	cmp	r3, #2
 800124c:	d804      	bhi.n	8001258 <HAL_GPIO_Init+0x50>
 800124e:	2b00      	cmp	r3, #0
 8001250:	d031      	beq.n	80012b6 <HAL_GPIO_Init+0xae>
 8001252:	2b01      	cmp	r3, #1
 8001254:	d01c      	beq.n	8001290 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001256:	e048      	b.n	80012ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001258:	2b03      	cmp	r3, #3
 800125a:	d043      	beq.n	80012e4 <HAL_GPIO_Init+0xdc>
 800125c:	2b11      	cmp	r3, #17
 800125e:	d01b      	beq.n	8001298 <HAL_GPIO_Init+0x90>
          break;
 8001260:	e043      	b.n	80012ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001262:	4a89      	ldr	r2, [pc, #548]	; (8001488 <HAL_GPIO_Init+0x280>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d026      	beq.n	80012b6 <HAL_GPIO_Init+0xae>
 8001268:	4a87      	ldr	r2, [pc, #540]	; (8001488 <HAL_GPIO_Init+0x280>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d806      	bhi.n	800127c <HAL_GPIO_Init+0x74>
 800126e:	4a87      	ldr	r2, [pc, #540]	; (800148c <HAL_GPIO_Init+0x284>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d020      	beq.n	80012b6 <HAL_GPIO_Init+0xae>
 8001274:	4a86      	ldr	r2, [pc, #536]	; (8001490 <HAL_GPIO_Init+0x288>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d01d      	beq.n	80012b6 <HAL_GPIO_Init+0xae>
          break;
 800127a:	e036      	b.n	80012ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800127c:	4a85      	ldr	r2, [pc, #532]	; (8001494 <HAL_GPIO_Init+0x28c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0xae>
 8001282:	4a85      	ldr	r2, [pc, #532]	; (8001498 <HAL_GPIO_Init+0x290>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d016      	beq.n	80012b6 <HAL_GPIO_Init+0xae>
 8001288:	4a84      	ldr	r2, [pc, #528]	; (800149c <HAL_GPIO_Init+0x294>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0xae>
          break;
 800128e:	e02c      	b.n	80012ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e028      	b.n	80012ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	3304      	adds	r3, #4
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e023      	b.n	80012ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	3308      	adds	r3, #8
 80012a8:	623b      	str	r3, [r7, #32]
          break;
 80012aa:	e01e      	b.n	80012ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	330c      	adds	r3, #12
 80012b2:	623b      	str	r3, [r7, #32]
          break;
 80012b4:	e019      	b.n	80012ea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012be:	2304      	movs	r3, #4
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e012      	b.n	80012ea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012cc:	2308      	movs	r3, #8
 80012ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	611a      	str	r2, [r3, #16]
          break;
 80012d6:	e008      	b.n	80012ea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d8:	2308      	movs	r3, #8
 80012da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	615a      	str	r2, [r3, #20]
          break;
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
          break;
 80012e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2bff      	cmp	r3, #255	; 0xff
 80012ee:	d801      	bhi.n	80012f4 <HAL_GPIO_Init+0xec>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	e001      	b.n	80012f8 <HAL_GPIO_Init+0xf0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3304      	adds	r3, #4
 80012f8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2bff      	cmp	r3, #255	; 0xff
 80012fe:	d802      	bhi.n	8001306 <HAL_GPIO_Init+0xfe>
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x104>
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	3b08      	subs	r3, #8
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	210f      	movs	r1, #15
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	401a      	ands	r2, r3
 800131e:	6a39      	ldr	r1, [r7, #32]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	431a      	orrs	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 8096 	beq.w	8001466 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800133a:	4b59      	ldr	r3, [pc, #356]	; (80014a0 <HAL_GPIO_Init+0x298>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a58      	ldr	r2, [pc, #352]	; (80014a0 <HAL_GPIO_Init+0x298>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <HAL_GPIO_Init+0x298>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001352:	4a54      	ldr	r2, [pc, #336]	; (80014a4 <HAL_GPIO_Init+0x29c>)
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <HAL_GPIO_Init+0x2a0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x19e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4a      	ldr	r2, [pc, #296]	; (80014ac <HAL_GPIO_Init+0x2a4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x19a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a49      	ldr	r2, [pc, #292]	; (80014b0 <HAL_GPIO_Init+0x2a8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x196>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <HAL_GPIO_Init+0x2ac>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x192>
 8001396:	2303      	movs	r3, #3
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x1a0>
 800139a:	2304      	movs	r3, #4
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x1a0>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x1a0>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x1a0>
 80013a6:	2300      	movs	r3, #0
 80013a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013b8:	493a      	ldr	r1, [pc, #232]	; (80014a4 <HAL_GPIO_Init+0x29c>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4938      	ldr	r1, [pc, #224]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
 80013de:	e006      	b.n	80013ee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013e0:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	4933      	ldr	r1, [pc, #204]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013fa:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	492e      	ldr	r1, [pc, #184]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
 8001406:	e006      	b.n	8001416 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	43db      	mvns	r3, r3
 8001410:	4929      	ldr	r1, [pc, #164]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001412:	4013      	ands	r3, r2
 8001414:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	4924      	ldr	r1, [pc, #144]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	608b      	str	r3, [r1, #8]
 800142e:	e006      	b.n	800143e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	43db      	mvns	r3, r3
 8001438:	491f      	ldr	r1, [pc, #124]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 800143a:	4013      	ands	r3, r2
 800143c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	491a      	ldr	r1, [pc, #104]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	60cb      	str	r3, [r1, #12]
 8001456:	e006      	b.n	8001466 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	43db      	mvns	r3, r3
 8001460:	4915      	ldr	r1, [pc, #84]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001462:	4013      	ands	r3, r2
 8001464:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	3301      	adds	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	fa22 f303 	lsr.w	r3, r2, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	f47f aed0 	bne.w	800121c <HAL_GPIO_Init+0x14>
  }
}
 800147c:	bf00      	nop
 800147e:	372c      	adds	r7, #44	; 0x2c
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	10210000 	.word	0x10210000
 800148c:	10110000 	.word	0x10110000
 8001490:	10120000 	.word	0x10120000
 8001494:	10310000 	.word	0x10310000
 8001498:	10320000 	.word	0x10320000
 800149c:	10220000 	.word	0x10220000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40011400 	.word	0x40011400
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001504:	887a      	ldrh	r2, [r7, #2]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800150a:	e002      	b.n	8001512 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800150c:	887a      	ldrh	r2, [r7, #2]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	611a      	str	r2, [r3, #16]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f858 	bl	80005f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	b08b      	sub	sp, #44	; 0x2c
 8001550:	af06      	add	r7, sp, #24
 8001552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0d3      	b.n	8001706 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f005 f832 	bl	80065dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2203      	movs	r2, #3
 800157c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f002 f9a9 	bl	80038dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	687e      	ldr	r6, [r7, #4]
 8001592:	466d      	mov	r5, sp
 8001594:	f106 0410 	add.w	r4, r6, #16
 8001598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	602b      	str	r3, [r5, #0]
 80015a0:	1d33      	adds	r3, r6, #4
 80015a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f002 f972 	bl	800388e <USB_CoreInit>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0a4      	b.n	8001706 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 f9a6 	bl	8003914 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e035      	b.n	800163a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	015b      	lsls	r3, r3, #5
 80015d4:	4413      	add	r3, r2
 80015d6:	3329      	adds	r3, #41	; 0x29
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	4413      	add	r3, r2
 80015e4:	3328      	adds	r3, #40	; 0x28
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	b291      	uxth	r1, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	015b      	lsls	r3, r3, #5
 80015f4:	4413      	add	r3, r2
 80015f6:	3336      	adds	r3, #54	; 0x36
 80015f8:	460a      	mov	r2, r1
 80015fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	4413      	add	r3, r2
 8001604:	332b      	adds	r3, #43	; 0x2b
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	015b      	lsls	r3, r3, #5
 8001610:	4413      	add	r3, r2
 8001612:	3338      	adds	r3, #56	; 0x38
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	4413      	add	r3, r2
 8001620:	333c      	adds	r3, #60	; 0x3c
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	3302      	adds	r3, #2
 800162c:	015b      	lsls	r3, r3, #5
 800162e:	4413      	add	r3, r2
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	3301      	adds	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3c4      	bcc.n	80015ce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e031      	b.n	80016ae <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	4413      	add	r3, r2
 8001652:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	015b      	lsls	r3, r3, #5
 8001660:	4413      	add	r3, r2
 8001662:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	015b      	lsls	r3, r3, #5
 8001670:	4413      	add	r3, r2
 8001672:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	015b      	lsls	r3, r3, #5
 8001680:	4413      	add	r3, r2
 8001682:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	4413      	add	r3, r2
 8001692:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	330a      	adds	r3, #10
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	4413      	add	r3, r2
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	3301      	adds	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3c8      	bcc.n	800164a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	687e      	ldr	r6, [r7, #4]
 80016c0:	466d      	mov	r5, sp
 80016c2:	f106 0410 	add.w	r4, r6, #16
 80016c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	602b      	str	r3, [r5, #0]
 80016ce:	1d33      	adds	r3, r6, #4
 80016d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d2:	6838      	ldr	r0, [r7, #0]
 80016d4:	f002 f92a 	bl	800392c <USB_DevInit>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2202      	movs	r2, #2
 80016e2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00d      	b.n	8001706 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 f967 	bl	80049d2 <USB_DevDisconnect>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800170e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_PCD_Start+0x16>
 8001720:	2302      	movs	r3, #2
 8001722:	e016      	b.n	8001752 <HAL_PCD_Start+0x44>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800172c:	2101      	movs	r1, #1
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f005 f9bb 	bl	8006aaa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f003 f940 	bl	80049be <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f002 f8b3 	bl	80038ae <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f003 f93d 	bl	80049e6 <USB_ReadInterrupts>
 800176c:	4603      	mov	r3, r0
 800176e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001776:	d102      	bne.n	800177e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 faf3 	bl	8001d64 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f003 f92f 	bl	80049e6 <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001792:	d112      	bne.n	80017ba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800179c:	b29a      	uxth	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017a6:	b292      	uxth	r2, r2
 80017a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f004 ff8a 	bl	80066c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017b2:	2100      	movs	r1, #0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f8de 	bl	8001976 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 f911 	bl	80049e6 <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017ce:	d10b      	bne.n	80017e8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017e2:	b292      	uxth	r2, r2
 80017e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 f8fa 	bl	80049e6 <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017fc:	d10b      	bne.n	8001816 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001810:	b292      	uxth	r2, r2
 8001812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f003 f8e3 	bl	80049e6 <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182a:	d126      	bne.n	800187a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0204 	bic.w	r2, r2, #4
 800183e:	b292      	uxth	r2, r2
 8001840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0208 	bic.w	r2, r2, #8
 8001856:	b292      	uxth	r2, r2
 8001858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f004 ff6b 	bl	8006738 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001874:	b292      	uxth	r2, r2
 8001876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f003 f8b1 	bl	80049e6 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800188a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800188e:	d13d      	bne.n	800190c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0208 	orr.w	r2, r2, #8
 80018a2:	b292      	uxth	r2, r2
 80018a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ba:	b292      	uxth	r2, r2
 80018bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0204 	orr.w	r2, r2, #4
 80018d2:	b292      	uxth	r2, r2
 80018d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 f882 	bl	80049e6 <USB_ReadInterrupts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ec:	d10b      	bne.n	8001906 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001900:	b292      	uxth	r2, r2
 8001902:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f004 fefc 	bl	8006704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f003 f868 	bl	80049e6 <USB_ReadInterrupts>
 8001916:	4603      	mov	r3, r0
 8001918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800191c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001920:	d10e      	bne.n	8001940 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001934:	b292      	uxth	r2, r2
 8001936:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f004 feb5 	bl	80066aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f003 f84e 	bl	80049e6 <USB_ReadInterrupts>
 800194a:	4603      	mov	r3, r0
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001954:	d10b      	bne.n	800196e <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001968:	b292      	uxth	r2, r2
 800196a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_PCD_SetAddress+0x1a>
 800198c:	2302      	movs	r3, #2
 800198e:	e013      	b.n	80019b8 <HAL_PCD_SetAddress+0x42>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fff5 	bl	8004998 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	70fb      	strb	r3, [r7, #3]
 80019d2:	460b      	mov	r3, r1
 80019d4:	803b      	strh	r3, [r7, #0]
 80019d6:	4613      	mov	r3, r2
 80019d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da0b      	bge.n	80019fe <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	015b      	lsls	r3, r3, #5
 80019ee:	3328      	adds	r3, #40	; 0x28
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	705a      	strb	r2, [r3, #1]
 80019fc:	e00b      	b.n	8001a16 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	015b      	lsls	r3, r3, #5
 8001a06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a22:	883a      	ldrh	r2, [r7, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	78ba      	ldrb	r2, [r7, #2]
 8001a2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	785b      	ldrb	r3, [r3, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a40:	78bb      	ldrb	r3, [r7, #2]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d102      	bne.n	8001a4c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_PCD_EP_Open+0x9a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e00e      	b.n	8001a78 <HAL_PCD_EP_Open+0xb8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f001 ff83 	bl	8003974 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001a76:	7afb      	ldrb	r3, [r7, #11]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da0b      	bge.n	8001aac <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	3328      	adds	r3, #40	; 0x28
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	705a      	strb	r2, [r3, #1]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	015b      	lsls	r3, r3, #5
 8001ab4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_PCD_EP_Close+0x5e>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e00e      	b.n	8001afc <HAL_PCD_EP_Close+0x7c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68f9      	ldr	r1, [r7, #12]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 fa2f 	bl	8003f50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	460b      	mov	r3, r1
 8001b12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b14:	7afb      	ldrb	r3, [r7, #11]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	015b      	lsls	r3, r3, #5
 8001b1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d106      	bne.n	8001b62 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6979      	ldr	r1, [r7, #20]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fb8e 	bl	800427c <USB_EPStartXfer>
 8001b60:	e005      	b.n	8001b6e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6979      	ldr	r1, [r7, #20]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fb87 	bl	800427c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	330a      	adds	r3, #10
 8001b8e:	015b      	lsls	r3, r3, #5
 8001b90:	4413      	add	r3, r2
 8001b92:	3304      	adds	r3, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	460b      	mov	r3, r1
 8001bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	015b      	lsls	r3, r3, #5
 8001bb8:	3328      	adds	r3, #40	; 0x28
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001be4:	7afb      	ldrb	r3, [r7, #11]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6979      	ldr	r1, [r7, #20]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 fb41 	bl	800427c <USB_EPStartXfer>
 8001bfa:	e005      	b.n	8001c08 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6979      	ldr	r1, [r7, #20]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fb3a 	bl	800427c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 0207 	and.w	r2, r3, #7
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d901      	bls.n	8001c30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e046      	b.n	8001cbe <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da0b      	bge.n	8001c50 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	3328      	adds	r3, #40	; 0x28
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	705a      	strb	r2, [r3, #1]
 8001c4e:	e009      	b.n	8001c64 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	015b      	lsls	r3, r3, #5
 8001c54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_PCD_EP_SetStall+0x72>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e01c      	b.n	8001cbe <HAL_PCD_EP_SetStall+0xac>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fdaa 	bl	80047ec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d108      	bne.n	8001cb4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f002 fea8 	bl	8004a04 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f003 020f 	and.w	r2, r3, #15
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d901      	bls.n	8001ce4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e03a      	b.n	8001d5a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da0b      	bge.n	8001d04 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	015b      	lsls	r3, r3, #5
 8001cf4:	3328      	adds	r3, #40	; 0x28
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	705a      	strb	r2, [r3, #1]
 8001d02:	e00b      	b.n	8001d1c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	015b      	lsls	r3, r3, #5
 8001d0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_PCD_EP_ClrStall+0x76>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e00e      	b.n	8001d5a <HAL_PCD_EP_ClrStall+0x94>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68f9      	ldr	r1, [r7, #12]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 fd90 	bl	8004870 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d6c:	e282      	b.n	8002274 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d76:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d78:	8afb      	ldrh	r3, [r7, #22]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001d82:	7d7b      	ldrb	r3, [r7, #21]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 8142 	bne.w	800200e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d8a:	8afb      	ldrh	r3, [r7, #22]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d151      	bne.n	8001e38 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da4:	b29c      	uxth	r4, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3328      	adds	r3, #40	; 0x28
 8001dba:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	441a      	add	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001df6:	2100      	movs	r1, #0
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f004 fc3f 	bl	800667c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8234 	beq.w	8002274 <PCD_EP_ISR_Handler+0x510>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f040 822f 	bne.w	8002274 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e36:	e21d      	b.n	8002274 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e3e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e48:	8a7b      	ldrh	r3, [r7, #18]
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d033      	beq.n	8001eba <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	3306      	adds	r3, #6
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f002 fe06 	bl	8004aa2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	b29c      	uxth	r4, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f004 fbb8 	bl	8006628 <HAL_PCD_SetupStageCallback>
 8001eb8:	e1dc      	b.n	8002274 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f280 81d8 	bge.w	8002274 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	b29c      	uxth	r4, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001edc:	b292      	uxth	r2, r2
 8001ede:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3306      	adds	r3, #6
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d019      	beq.n	8001f48 <PCD_EP_ISR_Handler+0x1e4>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6959      	ldr	r1, [r3, #20]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f002 fdb8 	bl	8004aa2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	441a      	add	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f40:	2100      	movs	r1, #0
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f004 fb82 	bl	800664c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	461c      	mov	r4, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	441c      	add	r4, r3
 8001f5a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001f5e:	461c      	mov	r4, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10e      	bne.n	8001f86 <PCD_EP_ISR_Handler+0x222>
 8001f68:	8823      	ldrh	r3, [r4, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	8023      	strh	r3, [r4, #0]
 8001f74:	8823      	ldrh	r3, [r4, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	8023      	strh	r3, [r4, #0]
 8001f84:	e02d      	b.n	8001fe2 <PCD_EP_ISR_Handler+0x27e>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8001f8c:	d812      	bhi.n	8001fb4 <PCD_EP_ISR_Handler+0x250>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <PCD_EP_ISR_Handler+0x244>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	029b      	lsls	r3, r3, #10
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	8023      	strh	r3, [r4, #0]
 8001fb2:	e016      	b.n	8001fe2 <PCD_EP_ISR_Handler+0x27e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	095b      	lsrs	r3, r3, #5
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <PCD_EP_ISR_Handler+0x26a>
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	029b      	lsls	r3, r3, #10
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	b29c      	uxth	r4, r3
 8001ff4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001ff8:	b29c      	uxth	r4, r3
 8001ffa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001ffe:	b29c      	uxth	r4, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4ba2      	ldr	r3, [pc, #648]	; (8002290 <PCD_EP_ISR_Handler+0x52c>)
 8002006:	4323      	orrs	r3, r4
 8002008:	b29b      	uxth	r3, r3
 800200a:	8013      	strh	r3, [r2, #0]
 800200c:	e132      	b.n	8002274 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	7d7b      	ldrb	r3, [r7, #21]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800201e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f280 80d1 	bge.w	80021ca <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	7d7b      	ldrb	r3, [r7, #21]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29a      	uxth	r2, r3
 8002038:	f640 738f 	movw	r3, #3983	; 0xf8f
 800203c:	4013      	ands	r3, r2
 800203e:	b29c      	uxth	r4, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	7d7b      	ldrb	r3, [r7, #21]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002050:	b292      	uxth	r2, r2
 8002052:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002054:	7d7b      	ldrb	r3, [r7, #21]
 8002056:	015b      	lsls	r3, r3, #5
 8002058:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	7b1b      	ldrb	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d121      	bne.n	80020ae <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	3306      	adds	r3, #6
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002092:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002094:	8bfb      	ldrh	r3, [r7, #30]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d072      	beq.n	8002180 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6959      	ldr	r1, [r3, #20]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	88da      	ldrh	r2, [r3, #6]
 80020a6:	8bfb      	ldrh	r3, [r7, #30]
 80020a8:	f002 fcfb 	bl	8004aa2 <USB_ReadPMA>
 80020ac:	e068      	b.n	8002180 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d021      	beq.n	800210c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	3302      	adds	r3, #2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80020f2:	8bfb      	ldrh	r3, [r7, #30]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d02a      	beq.n	800214e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6959      	ldr	r1, [r3, #20]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	891a      	ldrh	r2, [r3, #8]
 8002104:	8bfb      	ldrh	r3, [r7, #30]
 8002106:	f002 fccc 	bl	8004aa2 <USB_ReadPMA>
 800210a:	e020      	b.n	800214e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	3306      	adds	r3, #6
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002134:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002136:	8bfb      	ldrh	r3, [r7, #30]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6959      	ldr	r1, [r3, #20]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	895a      	ldrh	r2, [r3, #10]
 8002148:	8bfb      	ldrh	r3, [r7, #30]
 800214a:	f002 fcaa 	bl	8004aa2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002168:	b29c      	uxth	r4, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	441a      	add	r2, r3
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <PCD_EP_ISR_Handler+0x530>)
 800217a:	4323      	orrs	r3, r4
 800217c:	b29b      	uxth	r3, r3
 800217e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	8bfb      	ldrh	r3, [r7, #30]
 8002186:	441a      	add	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	8bfb      	ldrh	r3, [r7, #30]
 8002192:	441a      	add	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <PCD_EP_ISR_Handler+0x446>
 80021a0:	8bfa      	ldrh	r2, [r7, #30]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d206      	bcs.n	80021b8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f004 fa4b 	bl	800664c <HAL_PCD_DataOutStageCallback>
 80021b6:	e008      	b.n	80021ca <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	7819      	ldrb	r1, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fc9d 	bl	8001b04 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021ca:	8a7b      	ldrh	r3, [r7, #18]
 80021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d04f      	beq.n	8002274 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80021d4:	7d7b      	ldrb	r3, [r7, #21]
 80021d6:	015b      	lsls	r3, r3, #5
 80021d8:	3328      	adds	r3, #40	; 0x28
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	7d7b      	ldrb	r3, [r7, #21]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f8:	b29c      	uxth	r4, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	7d7b      	ldrb	r3, [r7, #21]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800220a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800220e:	b29b      	uxth	r3, r3
 8002210:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	3302      	adds	r3, #2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	441a      	add	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d106      	bne.n	8002262 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f004 fa0e 	bl	800667c <HAL_PCD_DataInStageCallback>
 8002260:	e008      	b.n	8002274 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	7819      	ldrb	r1, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fc96 	bl	8001ba0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800227c:	b29b      	uxth	r3, r3
 800227e:	b21b      	sxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	f6ff ad74 	blt.w	8001d6e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3724      	adds	r7, #36	; 0x24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	ffff8080 	.word	0xffff8080
 8002294:	ffff80c0 	.word	0xffff80c0

08002298 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	817b      	strh	r3, [r7, #10]
 80022a6:	4613      	mov	r3, r2
 80022a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b6:	897b      	ldrh	r3, [r7, #10]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	015b      	lsls	r3, r3, #5
 80022be:	3328      	adds	r3, #40	; 0x28
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e006      	b.n	80022d6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022c8:	897b      	ldrh	r3, [r7, #10]
 80022ca:	015b      	lsls	r3, r3, #5
 80022cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022d6:	893b      	ldrh	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2200      	movs	r2, #0
 80022e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	80da      	strh	r2, [r3, #6]
 80022ea:	e00b      	b.n	8002304 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2201      	movs	r2, #1
 80022f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	b29a      	uxth	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e26c      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800233c:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
 8002348:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06c      	beq.n	800243c <HAL_RCC_OscConfig+0x12c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d168      	bne.n	800243c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e246      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x76>
 8002378:	4b80      	ldr	r3, [pc, #512]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a7f      	ldr	r2, [pc, #508]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e02e      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b78      	ldr	r3, [pc, #480]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a77      	ldr	r2, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e01d      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0xbc>
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023cc:	4b6b      	ldr	r3, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a67      	ldr	r2, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe fd5c 	bl	8000ea8 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe fd58 	bl	8000ea8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1fa      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe4>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe fd48 	bl	8000ea8 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe fd44 	bl	8000ea8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1e6      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x10c>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d063      	beq.n	8002512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d11c      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1ba      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4939      	ldr	r1, [pc, #228]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e03a      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fcfd 	bl	8000ea8 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe fcf9 	bl	8000ea8 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e19b      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4927      	ldr	r1, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e015      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fcdc 	bl	8000ea8 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7fe fcd8 	bl	8000ea8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e17a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03a      	beq.n	8002594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7fe fcbc 	bl	8000ea8 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe fcb8 	bl	8000ea8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e15a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 faa8 	bl	8002aa8 <RCC_Delay>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7fe fca2 	bl	8000ea8 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe fc9e 	bl	8000ea8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e140      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	42420000 	.word	0x42420000
 8002584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a6 	beq.w	80026ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b97      	ldr	r3, [pc, #604]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b94      	ldr	r3, [pc, #592]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a93      	ldr	r2, [pc, #588]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b91      	ldr	r3, [pc, #580]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b8e      	ldr	r3, [pc, #568]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b8b      	ldr	r3, [pc, #556]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a8a      	ldr	r2, [pc, #552]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fc5f 	bl	8000ea8 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7fe fc5b 	bl	8000ea8 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0fd      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b81      	ldr	r3, [pc, #516]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x312>
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a7a      	ldr	r2, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e02d      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x334>
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a72      	ldr	r2, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	e01c      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x356>
 800264c:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a69      	ldr	r2, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a63      	ldr	r2, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7fe fc0f 	bl	8000ea8 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fc0b 	bl	8000ea8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0ab      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ee      	beq.n	800268e <HAL_RCC_OscConfig+0x37e>
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fbf9 	bl	8000ea8 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fbf5 	bl	8000ea8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e095      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a47      	ldr	r2, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8081 	beq.w	80027fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d061      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d146      	bne.n	800279a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe fbc9 	bl	8000ea8 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7fe fbc5 	bl	8000ea8 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e067      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	492d      	ldr	r1, [pc, #180]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a19      	ldr	r1, [r3, #32]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	430b      	orrs	r3, r1
 8002766:	4927      	ldr	r1, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe fb99 	bl	8000ea8 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe fb95 	bl	8000ea8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e037      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x46a>
 8002798:	e02f      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fb82 	bl	8000ea8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe fb7e 	bl	8000ea8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e020      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x498>
 80027c6:	e018      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420060 	.word	0x42420060

08002810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d0      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4965      	ldr	r1, [pc, #404]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800288e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d040      	beq.n	8002930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e073      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06b      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4936      	ldr	r1, [pc, #216]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002900:	f7fe fad2 	bl	8000ea8 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7fe face 	bl	8000ea8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e053      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d210      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4922      	ldr	r1, [pc, #136]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4601      	mov	r1, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	5cd3      	ldrb	r3, [r2, r3]
 80029b2:	fa21 f303 	lsr.w	r3, r1, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1cc>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1d0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fa30 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08006c58 	.word	0x08006c58
 80029dc:	20000008 	.word	0x20000008
 80029e0:	2000000c 	.word	0x2000000c

080029e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b490      	push	{r4, r7}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029ea:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029ec:	1d3c      	adds	r4, r7, #4
 80029ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a0e:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x40>
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x46>
 8002a22:	e02d      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a26:	623b      	str	r3, [r7, #32]
      break;
 8002a28:	e02d      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	0c9b      	lsrs	r3, r3, #18
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a36:	4413      	add	r3, r2
 8002a38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c5b      	lsrs	r3, r3, #17
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a56:	4413      	add	r3, r2
 8002a58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a62:	fb02 f203 	mul.w	r2, r2, r3
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	e004      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	623b      	str	r3, [r7, #32]
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a82:	623b      	str	r3, [r7, #32]
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc90      	pop	{r4, r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	08006c0c 	.word	0x08006c0c
 8002a98:	08006c1c 	.word	0x08006c1c
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	007a1200 	.word	0x007a1200
 8002aa4:	003d0900 	.word	0x003d0900

08002aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <RCC_Delay+0x34>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <RCC_Delay+0x38>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a5b      	lsrs	r3, r3, #9
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac4:	bf00      	nop
  }
  while (Delay --);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	60fa      	str	r2, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f9      	bne.n	8002ac4 <RCC_Delay+0x1c>
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	10624dd3 	.word	0x10624dd3

08002ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d07d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	61d3      	str	r3, [r2, #28]
 8002b1c:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d118      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b38:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b44:	f7fe f9b0 	bl	8000ea8 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	e008      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7fe f9ac 	bl	8000ea8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e06d      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b6a:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02e      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d027      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b88:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b92:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b9e:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d014      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe f97b 	bl	8000ea8 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe f977 	bl	8000ea8 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e036      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4917      	ldr	r1, [pc, #92]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	490b      	ldr	r1, [pc, #44]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4904      	ldr	r1, [pc, #16]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	42420440 	.word	0x42420440

08002c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e053      	b.n	8002d0a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fd ffc9 	bl	8000c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	ea42 0103 	orr.w	r1, r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	0c1a      	lsrs	r2, r3, #16
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f002 0204 	and.w	r2, r2, #4
 8002ce8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b088      	sub	sp, #32
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_SPI_Transmit+0x22>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e11e      	b.n	8002f72 <HAL_SPI_Transmit+0x260>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d3c:	f7fe f8b4 	bl	8000ea8 <HAL_GetTick>
 8002d40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d002      	beq.n	8002d58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d56:	e103      	b.n	8002f60 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_SPI_Transmit+0x52>
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d68:	e0fa      	b.n	8002f60 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	88fa      	ldrh	r2, [r7, #6]
 8002d82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db0:	d107      	bne.n	8002dc2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d007      	beq.n	8002de0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de8:	d14b      	bne.n	8002e82 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_Transmit+0xe6>
 8002df2:	8afb      	ldrh	r3, [r7, #22]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d13e      	bne.n	8002e76 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	881a      	ldrh	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e1c:	e02b      	b.n	8002e76 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d112      	bne.n	8002e52 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e50:	e011      	b.n	8002e76 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e52:	f7fe f829 	bl	8000ea8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d803      	bhi.n	8002e6a <HAL_SPI_Transmit+0x158>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d102      	bne.n	8002e70 <HAL_SPI_Transmit+0x15e>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e74:	e074      	b.n	8002f60 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ce      	bne.n	8002e1e <HAL_SPI_Transmit+0x10c>
 8002e80:	e04c      	b.n	8002f1c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_SPI_Transmit+0x17e>
 8002e8a:	8afb      	ldrh	r3, [r7, #22]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d140      	bne.n	8002f12 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eb6:	e02c      	b.n	8002f12 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d113      	bne.n	8002eee <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	86da      	strh	r2, [r3, #54]	; 0x36
 8002eec:	e011      	b.n	8002f12 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eee:	f7fd ffdb 	bl	8000ea8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d803      	bhi.n	8002f06 <HAL_SPI_Transmit+0x1f4>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_Transmit+0x1fa>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f10:	e026      	b.n	8002f60 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1cd      	bne.n	8002eb8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	6839      	ldr	r1, [r7, #0]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fc96 	bl	8003852 <SPI_EndRxTxTransaction>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e000      	b.n	8002f60 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002f5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f70:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af02      	add	r7, sp, #8
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f96:	d112      	bne.n	8002fbe <HAL_SPI_Receive+0x44>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10e      	bne.n	8002fbe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f8e9 	bl	800318c <HAL_SPI_TransmitReceive>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	e0e2      	b.n	8003184 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_SPI_Receive+0x52>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e0db      	b.n	8003184 <HAL_SPI_Receive+0x20a>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fd4:	f7fd ff68 	bl	8000ea8 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fea:	e0c2      	b.n	8003172 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_SPI_Receive+0x7e>
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d102      	bne.n	8002ffe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ffc:	e0b9      	b.n	8003172 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2204      	movs	r2, #4
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003044:	d107      	bne.n	8003056 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d007      	beq.n	8003074 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d162      	bne.n	8003142 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800307c:	e02e      	b.n	80030dc <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d115      	bne.n	80030b8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f103 020c 	add.w	r2, r3, #12
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	7812      	ldrb	r2, [r2, #0]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030b6:	e011      	b.n	80030dc <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b8:	f7fd fef6 	bl	8000ea8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d803      	bhi.n	80030d0 <HAL_SPI_Receive+0x156>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d102      	bne.n	80030d6 <HAL_SPI_Receive+0x15c>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030da:	e04a      	b.n	8003172 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1cb      	bne.n	800307e <HAL_SPI_Receive+0x104>
 80030e6:	e031      	b.n	800314c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d113      	bne.n	800311e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	b292      	uxth	r2, r2
 8003102:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	1c9a      	adds	r2, r3, #2
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800311c:	e011      	b.n	8003142 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800311e:	f7fd fec3 	bl	8000ea8 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d803      	bhi.n	8003136 <HAL_SPI_Receive+0x1bc>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d102      	bne.n	800313c <HAL_SPI_Receive+0x1c2>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003140:	e017      	b.n	8003172 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1cd      	bne.n	80030e8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fb2c 	bl	80037ae <SPI_EndRxTransaction>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
 800316e:	e000      	b.n	8003172 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003170:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	; 0x30
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800319a:	2301      	movs	r3, #1
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x26>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e18a      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x33c>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ba:	f7fd fe75 	bl	8000ea8 <HAL_GetTick>
 80031be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d00f      	beq.n	80031fc <HAL_SPI_TransmitReceive+0x70>
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031e2:	d107      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x68>
 80031ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d003      	beq.n	80031fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031fa:	e15b      	b.n	80034b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_SPI_TransmitReceive+0x82>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_TransmitReceive+0x82>
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003214:	e14e      	b.n	80034b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b04      	cmp	r3, #4
 8003220:	d003      	beq.n	800322a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2205      	movs	r2, #5
 8003226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	887a      	ldrh	r2, [r7, #2]
 8003252:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d007      	beq.n	800327e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003286:	d178      	bne.n	800337a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x10a>
 8003290:	8b7b      	ldrh	r3, [r7, #26]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d166      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	1c9a      	adds	r2, r3, #2
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ba:	e053      	b.n	8003364 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d11b      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x176>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_SPI_TransmitReceive+0x176>
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d113      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	881a      	ldrh	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	1c9a      	adds	r2, r3, #2
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d119      	bne.n	8003344 <HAL_SPI_TransmitReceive+0x1b8>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d014      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	b292      	uxth	r2, r2
 8003326:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	1c9a      	adds	r2, r3, #2
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003340:	2301      	movs	r3, #1
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003344:	f7fd fdb0 	bl	8000ea8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003350:	429a      	cmp	r2, r3
 8003352:	d807      	bhi.n	8003364 <HAL_SPI_TransmitReceive+0x1d8>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d003      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003362:	e0a7      	b.n	80034b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1a6      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x130>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1a1      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x130>
 8003378:	e07c      	b.n	8003474 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_SPI_TransmitReceive+0x1fc>
 8003382:	8b7b      	ldrh	r3, [r7, #26]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d16b      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	7812      	ldrb	r2, [r2, #0]
 8003394:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ae:	e057      	b.n	8003460 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d11c      	bne.n	80033f8 <HAL_SPI_TransmitReceive+0x26c>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d017      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x26c>
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d114      	bne.n	80033f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d119      	bne.n	800343a <HAL_SPI_TransmitReceive+0x2ae>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d014      	beq.n	800343a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003436:	2301      	movs	r3, #1
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800343a:	f7fd fd35 	bl	8000ea8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003446:	429a      	cmp	r2, r3
 8003448:	d803      	bhi.n	8003452 <HAL_SPI_TransmitReceive+0x2c6>
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d102      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x2cc>
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	2b00      	cmp	r3, #0
 8003456:	d103      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800345e:	e029      	b.n	80034b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1a2      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x224>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d19d      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f9ea 	bl	8003852 <SPI_EndRxTxTransaction>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003490:	e010      	b.n	80034b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	e000      	b.n	80034b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3730      	adds	r7, #48	; 0x30
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	099b      	lsrs	r3, r3, #6
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10f      	bne.n	8003514 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
    return;
 8003512:	e0bf      	b.n	8003694 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_SPI_IRQHandler+0x66>
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	09db      	lsrs	r3, r3, #7
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
    return;
 8003534:	e0ae      	b.n	8003694 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_SPI_IRQHandler+0x80>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80a2 	beq.w	8003694 <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 809b 	beq.w	8003694 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d023      	beq.n	80035b2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b03      	cmp	r3, #3
 8003574:	d011      	beq.n	800359a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f043 0204 	orr.w	r2, r3, #4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	e00b      	b.n	80035b2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	693b      	ldr	r3, [r7, #16]
        return;
 80035b0:	e070      	b.n	8003694 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d014      	beq.n	80035e8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d050      	beq.n	8003692 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d104      	bne.n	800361c <HAL_SPI_IRQHandler+0x14c>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d034      	beq.n	8003686 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0203 	bic.w	r2, r2, #3
 800362a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d011      	beq.n	8003658 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	4a18      	ldr	r2, [pc, #96]	; (800369c <HAL_SPI_IRQHandler+0x1cc>)
 800363a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd fd6b 	bl	800111c <HAL_DMA_Abort_IT>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	4a0d      	ldr	r2, [pc, #52]	; (800369c <HAL_SPI_IRQHandler+0x1cc>)
 8003666:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd fd55 	bl	800111c <HAL_DMA_Abort_IT>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003684:	e003      	b.n	800368e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f80a 	bl	80036a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800368c:	e000      	b.n	8003690 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800368e:	bf00      	nop
    return;
 8003690:	bf00      	nop
 8003692:	bf00      	nop
  }
}
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	080036b3 	.word	0x080036b3

080036a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7ff ffe7 	bl	80036a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ea:	e04c      	b.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d048      	beq.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80036f4:	f7fd fbd8 	bl	8000ea8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d902      	bls.n	800370a <SPI_WaitFlagStateUntilTimeout+0x30>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d13d      	bne.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003722:	d111      	bne.n	8003748 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372c:	d004      	beq.n	8003738 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d107      	bne.n	8003748 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003750:	d10f      	bne.n	8003772 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e00f      	b.n	80037a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1a3      	bne.n	80036ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af02      	add	r7, sp, #8
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c2:	d111      	bne.n	80037e8 <SPI_EndRxTransaction+0x3a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037cc:	d004      	beq.n	80037d8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d107      	bne.n	80037e8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e6:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f0:	d117      	bne.n	8003822 <SPI_EndRxTransaction+0x74>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d112      	bne.n	8003822 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2200      	movs	r2, #0
 8003804:	2101      	movs	r1, #1
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff ff67 	bl	80036da <SPI_WaitFlagStateUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01a      	beq.n	8003848 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e013      	b.n	800384a <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	2180      	movs	r1, #128	; 0x80
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff ff54 	bl	80036da <SPI_WaitFlagStateUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e000      	b.n	800384a <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af02      	add	r7, sp, #8
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2200      	movs	r2, #0
 8003866:	2180      	movs	r1, #128	; 0x80
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff ff36 	bl	80036da <SPI_WaitFlagStateUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e000      	b.n	8003886 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800388e:	b084      	sub	sp, #16
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	f107 0014 	add.w	r0, r7, #20
 800389c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	b004      	add	sp, #16
 80038ac:	4770      	bx	lr

080038ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b085      	sub	sp, #20
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038b6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038ba:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	89fb      	ldrh	r3, [r7, #14]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038e8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	b21a      	sxth	r2, r3
 80038f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	b21b      	sxth	r3, r3
 80038fc:	4013      	ands	r3, r2
 80038fe:	b21b      	sxth	r3, r3
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800392c:	b084      	sub	sp, #16
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	f107 0014 	add.w	r0, r7, #20
 800393a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffa5 	bl	80038ae <USB_EnableGlobalInt>

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003970:	b004      	add	sp, #16
 8003972:	4770      	bx	lr

08003974 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003974:	b490      	push	{r4, r7}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	78db      	ldrb	r3, [r3, #3]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d819      	bhi.n	80039d6 <USB_ActivateEndpoint+0x62>
 80039a2:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <USB_ActivateEndpoint+0x34>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039cd 	.word	0x080039cd
 80039b0:	080039dd 	.word	0x080039dd
 80039b4:	080039c3 	.word	0x080039c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80039b8:	89bb      	ldrh	r3, [r7, #12]
 80039ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039be:	81bb      	strh	r3, [r7, #12]
      break;
 80039c0:	e00d      	b.n	80039de <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80039c2:	89bb      	ldrh	r3, [r7, #12]
 80039c4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80039c8:	81bb      	strh	r3, [r7, #12]
      break;
 80039ca:	e008      	b.n	80039de <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80039cc:	89bb      	ldrh	r3, [r7, #12]
 80039ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d2:	81bb      	strh	r3, [r7, #12]
      break;
 80039d4:	e003      	b.n	80039de <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
      break;
 80039da:	e000      	b.n	80039de <USB_ActivateEndpoint+0x6a>
      break;
 80039dc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	441a      	add	r2, r3
 80039e8:	89bb      	ldrh	r3, [r7, #12]
 80039ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b29c      	uxth	r4, r3
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	4b8a      	ldr	r3, [pc, #552]	; (8003c54 <USB_ActivateEndpoint+0x2e0>)
 8003a2c:	4323      	orrs	r3, r4
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	7b1b      	ldrb	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f040 8112 	bne.w	8003c60 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d067      	beq.n	8003b14 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a44:	687c      	ldr	r4, [r7, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	441c      	add	r4, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	4423      	add	r3, r4
 8003a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5c:	461c      	mov	r4, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	88db      	ldrh	r3, [r3, #6]
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29c      	uxth	r4, r3
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d014      	beq.n	8003aae <USB_ActivateEndpoint+0x13a>
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	b29c      	uxth	r4, r3
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	4b6c      	ldr	r3, [pc, #432]	; (8003c58 <USB_ActivateEndpoint+0x2e4>)
 8003aa8:	4323      	orrs	r3, r4
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	78db      	ldrb	r3, [r3, #3]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d018      	beq.n	8003ae8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003acc:	b29c      	uxth	r4, r3
 8003ace:	f084 0320 	eor.w	r3, r4, #32
 8003ad2:	b29c      	uxth	r4, r3
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	4b5d      	ldr	r3, [pc, #372]	; (8003c54 <USB_ActivateEndpoint+0x2e0>)
 8003ae0:	4323      	orrs	r3, r4
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	8013      	strh	r3, [r2, #0]
 8003ae6:	e22b      	b.n	8003f40 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afe:	b29c      	uxth	r4, r3
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	441a      	add	r2, r3
 8003b0a:	4b52      	ldr	r3, [pc, #328]	; (8003c54 <USB_ActivateEndpoint+0x2e0>)
 8003b0c:	4323      	orrs	r3, r4
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	8013      	strh	r3, [r2, #0]
 8003b12:	e215      	b.n	8003f40 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b14:	687c      	ldr	r4, [r7, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	441c      	add	r4, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	4423      	add	r3, r4
 8003b28:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b2c:	461c      	mov	r4, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	88db      	ldrh	r3, [r3, #6]
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b3c:	687c      	ldr	r4, [r7, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	441c      	add	r4, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4423      	add	r3, r4
 8003b50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b54:	461c      	mov	r4, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10e      	bne.n	8003b7c <USB_ActivateEndpoint+0x208>
 8003b5e:	8823      	ldrh	r3, [r4, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8023      	strh	r3, [r4, #0]
 8003b6a:	8823      	ldrh	r3, [r4, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	8023      	strh	r3, [r4, #0]
 8003b7a:	e02d      	b.n	8003bd8 <USB_ActivateEndpoint+0x264>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b3e      	cmp	r3, #62	; 0x3e
 8003b82:	d812      	bhi.n	8003baa <USB_ActivateEndpoint+0x236>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <USB_ActivateEndpoint+0x22a>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	029b      	lsls	r3, r3, #10
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	8023      	strh	r3, [r4, #0]
 8003ba8:	e016      	b.n	8003bd8 <USB_ActivateEndpoint+0x264>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <USB_ActivateEndpoint+0x250>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	029b      	lsls	r3, r3, #10
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29c      	uxth	r4, r3
 8003be6:	4623      	mov	r3, r4
 8003be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d014      	beq.n	8003c1a <USB_ActivateEndpoint+0x2a6>
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	b29c      	uxth	r4, r3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <USB_ActivateEndpoint+0x2e8>)
 8003c14:	4323      	orrs	r3, r4
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c30:	b29c      	uxth	r4, r3
 8003c32:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c36:	b29c      	uxth	r4, r3
 8003c38:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c3c:	b29c      	uxth	r4, r3
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	441a      	add	r2, r3
 8003c48:	4b02      	ldr	r3, [pc, #8]	; (8003c54 <USB_ActivateEndpoint+0x2e0>)
 8003c4a:	4323      	orrs	r3, r4
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	8013      	strh	r3, [r2, #0]
 8003c50:	e176      	b.n	8003f40 <USB_ActivateEndpoint+0x5cc>
 8003c52:	bf00      	nop
 8003c54:	ffff8080 	.word	0xffff8080
 8003c58:	ffff80c0 	.word	0xffff80c0
 8003c5c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	b29c      	uxth	r4, r3
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	441a      	add	r2, r3
 8003c82:	4b96      	ldr	r3, [pc, #600]	; (8003edc <USB_ActivateEndpoint+0x568>)
 8003c84:	4323      	orrs	r3, r4
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c8a:	687c      	ldr	r4, [r7, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	441c      	add	r4, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	4423      	add	r3, r4
 8003c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ca2:	461c      	mov	r4, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	891b      	ldrh	r3, [r3, #8]
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8023      	strh	r3, [r4, #0]
 8003cb2:	687c      	ldr	r4, [r7, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	441c      	add	r4, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	4423      	add	r3, r4
 8003cc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003cca:	461c      	mov	r4, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	895b      	ldrh	r3, [r3, #10]
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 8088 	bne.w	8003df4 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29c      	uxth	r4, r3
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d014      	beq.n	8003d26 <USB_ActivateEndpoint+0x3b2>
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d12:	b29c      	uxth	r4, r3
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <USB_ActivateEndpoint+0x56c>)
 8003d20:	4323      	orrs	r3, r4
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29c      	uxth	r4, r3
 8003d34:	4623      	mov	r3, r4
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d014      	beq.n	8003d68 <USB_ActivateEndpoint+0x3f4>
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	b29c      	uxth	r4, r3
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	441a      	add	r2, r3
 8003d60:	4b60      	ldr	r3, [pc, #384]	; (8003ee4 <USB_ActivateEndpoint+0x570>)
 8003d62:	4323      	orrs	r3, r4
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	b29c      	uxth	r4, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	4b56      	ldr	r3, [pc, #344]	; (8003ee4 <USB_ActivateEndpoint+0x570>)
 8003d8c:	4323      	orrs	r3, r4
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da8:	b29c      	uxth	r4, r3
 8003daa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003dae:	b29c      	uxth	r4, r3
 8003db0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003db4:	b29c      	uxth	r4, r3
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	441a      	add	r2, r3
 8003dc0:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <USB_ActivateEndpoint+0x574>)
 8003dc2:	4323      	orrs	r3, r4
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dde:	b29c      	uxth	r4, r3
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	441a      	add	r2, r3
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <USB_ActivateEndpoint+0x574>)
 8003dec:	4323      	orrs	r3, r4
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	8013      	strh	r3, [r2, #0]
 8003df2:	e0a5      	b.n	8003f40 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29c      	uxth	r4, r3
 8003e02:	4623      	mov	r3, r4
 8003e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d014      	beq.n	8003e36 <USB_ActivateEndpoint+0x4c2>
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e22:	b29c      	uxth	r4, r3
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	441a      	add	r2, r3
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <USB_ActivateEndpoint+0x56c>)
 8003e30:	4323      	orrs	r3, r4
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29c      	uxth	r4, r3
 8003e44:	4623      	mov	r3, r4
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d014      	beq.n	8003e78 <USB_ActivateEndpoint+0x504>
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e64:	b29c      	uxth	r4, r3
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	441a      	add	r2, r3
 8003e70:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <USB_ActivateEndpoint+0x570>)
 8003e72:	4323      	orrs	r3, r4
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	b29c      	uxth	r4, r3
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	441a      	add	r2, r3
 8003e9a:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <USB_ActivateEndpoint+0x56c>)
 8003e9c:	4323      	orrs	r3, r4
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	78db      	ldrb	r3, [r3, #3]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d020      	beq.n	8003eec <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec0:	b29c      	uxth	r4, r3
 8003ec2:	f084 0320 	eor.w	r3, r4, #32
 8003ec6:	b29c      	uxth	r4, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <USB_ActivateEndpoint+0x574>)
 8003ed4:	4323      	orrs	r3, r4
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	8013      	strh	r3, [r2, #0]
 8003eda:	e01c      	b.n	8003f16 <USB_ActivateEndpoint+0x5a2>
 8003edc:	ffff8180 	.word	0xffff8180
 8003ee0:	ffffc080 	.word	0xffffc080
 8003ee4:	ffff80c0 	.word	0xffff80c0
 8003ee8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f02:	b29c      	uxth	r4, r3
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <USB_ActivateEndpoint+0x5d8>)
 8003f10:	4323      	orrs	r3, r4
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	b29c      	uxth	r4, r3
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	441a      	add	r2, r3
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <USB_ActivateEndpoint+0x5d8>)
 8003f3a:	4323      	orrs	r3, r4
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc90      	pop	{r4, r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	ffff8080 	.word	0xffff8080

08003f50 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f50:	b490      	push	{r4, r7}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	7b1b      	ldrb	r3, [r3, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d171      	bne.n	8004046 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	785b      	ldrb	r3, [r3, #1]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d036      	beq.n	8003fd8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29c      	uxth	r4, r3
 8003f78:	4623      	mov	r3, r4
 8003f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d014      	beq.n	8003fac <USB_DeactivateEndpoint+0x5c>
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f98:	b29c      	uxth	r4, r3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	441a      	add	r2, r3
 8003fa4:	4b6b      	ldr	r3, [pc, #428]	; (8004154 <USB_DeactivateEndpoint+0x204>)
 8003fa6:	4323      	orrs	r3, r4
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc2:	b29c      	uxth	r4, r3
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	441a      	add	r2, r3
 8003fce:	4b62      	ldr	r3, [pc, #392]	; (8004158 <USB_DeactivateEndpoint+0x208>)
 8003fd0:	4323      	orrs	r3, r4
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	8013      	strh	r3, [r2, #0]
 8003fd6:	e144      	b.n	8004262 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b29c      	uxth	r4, r3
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d014      	beq.n	800401a <USB_DeactivateEndpoint+0xca>
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	b29c      	uxth	r4, r3
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	441a      	add	r2, r3
 8004012:	4b52      	ldr	r3, [pc, #328]	; (800415c <USB_DeactivateEndpoint+0x20c>)
 8004014:	4323      	orrs	r3, r4
 8004016:	b29b      	uxth	r3, r3
 8004018:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800402c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004030:	b29c      	uxth	r4, r3
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <USB_DeactivateEndpoint+0x208>)
 800403e:	4323      	orrs	r3, r4
 8004040:	b29b      	uxth	r3, r3
 8004042:	8013      	strh	r3, [r2, #0]
 8004044:	e10d      	b.n	8004262 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	785b      	ldrb	r3, [r3, #1]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f040 8088 	bne.w	8004160 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29c      	uxth	r4, r3
 800405e:	4623      	mov	r3, r4
 8004060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d014      	beq.n	8004092 <USB_DeactivateEndpoint+0x142>
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	b29c      	uxth	r4, r3
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	441a      	add	r2, r3
 800408a:	4b34      	ldr	r3, [pc, #208]	; (800415c <USB_DeactivateEndpoint+0x20c>)
 800408c:	4323      	orrs	r3, r4
 800408e:	b29b      	uxth	r3, r3
 8004090:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29c      	uxth	r4, r3
 80040a0:	4623      	mov	r3, r4
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d014      	beq.n	80040d4 <USB_DeactivateEndpoint+0x184>
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	b29c      	uxth	r4, r3
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	441a      	add	r2, r3
 80040cc:	4b21      	ldr	r3, [pc, #132]	; (8004154 <USB_DeactivateEndpoint+0x204>)
 80040ce:	4323      	orrs	r3, r4
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	b29c      	uxth	r4, r3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	4b17      	ldr	r3, [pc, #92]	; (8004154 <USB_DeactivateEndpoint+0x204>)
 80040f8:	4323      	orrs	r3, r4
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	b29c      	uxth	r4, r3
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <USB_DeactivateEndpoint+0x208>)
 8004122:	4323      	orrs	r3, r4
 8004124:	b29b      	uxth	r3, r3
 8004126:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413e:	b29c      	uxth	r4, r3
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	4b03      	ldr	r3, [pc, #12]	; (8004158 <USB_DeactivateEndpoint+0x208>)
 800414c:	4323      	orrs	r3, r4
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]
 8004152:	e086      	b.n	8004262 <USB_DeactivateEndpoint+0x312>
 8004154:	ffff80c0 	.word	0xffff80c0
 8004158:	ffff8080 	.word	0xffff8080
 800415c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29c      	uxth	r4, r3
 800416e:	4623      	mov	r3, r4
 8004170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d014      	beq.n	80041a2 <USB_DeactivateEndpoint+0x252>
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	b29c      	uxth	r4, r3
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	4b35      	ldr	r3, [pc, #212]	; (8004270 <USB_DeactivateEndpoint+0x320>)
 800419c:	4323      	orrs	r3, r4
 800419e:	b29b      	uxth	r3, r3
 80041a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29c      	uxth	r4, r3
 80041b0:	4623      	mov	r3, r4
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <USB_DeactivateEndpoint+0x294>
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d0:	b29c      	uxth	r4, r3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <USB_DeactivateEndpoint+0x324>)
 80041de:	4323      	orrs	r3, r4
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	b29c      	uxth	r4, r3
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <USB_DeactivateEndpoint+0x320>)
 8004208:	4323      	orrs	r3, r4
 800420a:	b29b      	uxth	r3, r3
 800420c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004224:	b29c      	uxth	r4, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <USB_DeactivateEndpoint+0x328>)
 8004232:	4323      	orrs	r3, r4
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	b29c      	uxth	r4, r3
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <USB_DeactivateEndpoint+0x328>)
 800425c:	4323      	orrs	r3, r4
 800425e:	b29b      	uxth	r3, r3
 8004260:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bc90      	pop	{r4, r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	ffffc080 	.word	0xffffc080
 8004274:	ffff80c0 	.word	0xffff80c0
 8004278:	ffff8080 	.word	0xffff8080

0800427c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b08d      	sub	sp, #52	; 0x34
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	2b01      	cmp	r3, #1
 800428c:	f040 8160 	bne.w	8004550 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	429a      	cmp	r2, r3
 800429a:	d909      	bls.n	80042b0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	1ad2      	subs	r2, r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	619a      	str	r2, [r3, #24]
 80042ae:	e005      	b.n	80042bc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2200      	movs	r2, #0
 80042ba:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	7b1b      	ldrb	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d119      	bne.n	80042f8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6959      	ldr	r1, [r3, #20]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	88da      	ldrh	r2, [r3, #6]
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fba2 	bl	8004a1a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80042d6:	687c      	ldr	r4, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042de:	b29b      	uxth	r3, r3
 80042e0:	441c      	add	r4, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	4423      	add	r3, r4
 80042ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042ee:	461c      	mov	r4, r3
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8023      	strh	r3, [r4, #0]
 80042f6:	e10f      	b.n	8004518 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d065      	beq.n	80043da <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800430e:	687c      	ldr	r4, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d148      	bne.n	80043aa <USB_EPStartXfer+0x12e>
 8004318:	687c      	ldr	r4, [r7, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004320:	b29b      	uxth	r3, r3
 8004322:	441c      	add	r4, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	4423      	add	r3, r4
 800432c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004330:	461c      	mov	r4, r3
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10e      	bne.n	8004356 <USB_EPStartXfer+0xda>
 8004338:	8823      	ldrh	r3, [r4, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004340:	b29b      	uxth	r3, r3
 8004342:	8023      	strh	r3, [r4, #0]
 8004344:	8823      	ldrh	r3, [r4, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004350:	b29b      	uxth	r3, r3
 8004352:	8023      	strh	r3, [r4, #0]
 8004354:	e03d      	b.n	80043d2 <USB_EPStartXfer+0x156>
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	2b3e      	cmp	r3, #62	; 0x3e
 800435a:	d810      	bhi.n	800437e <USB_EPStartXfer+0x102>
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <USB_EPStartXfer+0xf6>
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	3301      	adds	r3, #1
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	b29b      	uxth	r3, r3
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	b29b      	uxth	r3, r3
 800437a:	8023      	strh	r3, [r4, #0]
 800437c:	e029      	b.n	80043d2 <USB_EPStartXfer+0x156>
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <USB_EPStartXfer+0x118>
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	3b01      	subs	r3, #1
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	b29b      	uxth	r3, r3
 8004398:	029b      	lsls	r3, r3, #10
 800439a:	b29b      	uxth	r3, r3
 800439c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	8023      	strh	r3, [r4, #0]
 80043a8:	e013      	b.n	80043d2 <USB_EPStartXfer+0x156>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d10f      	bne.n	80043d2 <USB_EPStartXfer+0x156>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	441c      	add	r4, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	4423      	add	r3, r4
 80043c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	895b      	ldrh	r3, [r3, #10]
 80043d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80043d8:	e063      	b.n	80044a2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d148      	bne.n	8004474 <USB_EPStartXfer+0x1f8>
 80043e2:	687c      	ldr	r4, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	441c      	add	r4, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4423      	add	r3, r4
 80043f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043fa:	461c      	mov	r4, r3
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10e      	bne.n	8004420 <USB_EPStartXfer+0x1a4>
 8004402:	8823      	ldrh	r3, [r4, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800440a:	b29b      	uxth	r3, r3
 800440c:	8023      	strh	r3, [r4, #0]
 800440e:	8823      	ldrh	r3, [r4, #0]
 8004410:	b29b      	uxth	r3, r3
 8004412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441a:	b29b      	uxth	r3, r3
 800441c:	8023      	strh	r3, [r4, #0]
 800441e:	e03d      	b.n	800449c <USB_EPStartXfer+0x220>
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	2b3e      	cmp	r3, #62	; 0x3e
 8004424:	d810      	bhi.n	8004448 <USB_EPStartXfer+0x1cc>
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <USB_EPStartXfer+0x1c0>
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	3301      	adds	r3, #1
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	b29b      	uxth	r3, r3
 8004440:	029b      	lsls	r3, r3, #10
 8004442:	b29b      	uxth	r3, r3
 8004444:	8023      	strh	r3, [r4, #0]
 8004446:	e029      	b.n	800449c <USB_EPStartXfer+0x220>
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	623b      	str	r3, [r7, #32]
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <USB_EPStartXfer+0x1e2>
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	3b01      	subs	r3, #1
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	b29b      	uxth	r3, r3
 8004462:	029b      	lsls	r3, r3, #10
 8004464:	b29b      	uxth	r3, r3
 8004466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446e:	b29b      	uxth	r3, r3
 8004470:	8023      	strh	r3, [r4, #0]
 8004472:	e013      	b.n	800449c <USB_EPStartXfer+0x220>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d10f      	bne.n	800449c <USB_EPStartXfer+0x220>
 800447c:	687c      	ldr	r4, [r7, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004484:	b29b      	uxth	r3, r3
 8004486:	441c      	add	r4, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	4423      	add	r3, r4
 8004490:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004494:	461c      	mov	r4, r3
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	b29b      	uxth	r3, r3
 800449a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	891b      	ldrh	r3, [r3, #8]
 80044a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6959      	ldr	r1, [r3, #20]
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fab4 	bl	8004a1a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d115      	bne.n	80044e6 <USB_EPStartXfer+0x26a>
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d0:	b29c      	uxth	r4, r3
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	4b9a      	ldr	r3, [pc, #616]	; (8004748 <USB_EPStartXfer+0x4cc>)
 80044de:	4323      	orrs	r3, r4
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	8013      	strh	r3, [r2, #0]
 80044e4:	e018      	b.n	8004518 <USB_EPStartXfer+0x29c>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	785b      	ldrb	r3, [r3, #1]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d114      	bne.n	8004518 <USB_EPStartXfer+0x29c>
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004504:	b29c      	uxth	r4, r3
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	441a      	add	r2, r3
 8004510:	4b8e      	ldr	r3, [pc, #568]	; (800474c <USB_EPStartXfer+0x4d0>)
 8004512:	4323      	orrs	r3, r4
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452e:	b29c      	uxth	r4, r3
 8004530:	f084 0310 	eor.w	r3, r4, #16
 8004534:	b29c      	uxth	r4, r3
 8004536:	f084 0320 	eor.w	r3, r4, #32
 800453a:	b29c      	uxth	r4, r3
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	4b82      	ldr	r3, [pc, #520]	; (8004750 <USB_EPStartXfer+0x4d4>)
 8004548:	4323      	orrs	r3, r4
 800454a:	b29b      	uxth	r3, r3
 800454c:	8013      	strh	r3, [r2, #0]
 800454e:	e146      	b.n	80047de <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	429a      	cmp	r2, r3
 800455a:	d909      	bls.n	8004570 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	1ad2      	subs	r2, r2, r3
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	619a      	str	r2, [r3, #24]
 800456e:	e005      	b.n	800457c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	7b1b      	ldrb	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d148      	bne.n	8004616 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004584:	687c      	ldr	r4, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800458c:	b29b      	uxth	r3, r3
 800458e:	441c      	add	r4, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4423      	add	r3, r4
 8004598:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800459c:	461c      	mov	r4, r3
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10e      	bne.n	80045c2 <USB_EPStartXfer+0x346>
 80045a4:	8823      	ldrh	r3, [r4, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8023      	strh	r3, [r4, #0]
 80045b0:	8823      	ldrh	r3, [r4, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045bc:	b29b      	uxth	r3, r3
 80045be:	8023      	strh	r3, [r4, #0]
 80045c0:	e0f2      	b.n	80047a8 <USB_EPStartXfer+0x52c>
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	2b3e      	cmp	r3, #62	; 0x3e
 80045c6:	d810      	bhi.n	80045ea <USB_EPStartXfer+0x36e>
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <USB_EPStartXfer+0x362>
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	3301      	adds	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	029b      	lsls	r3, r3, #10
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8023      	strh	r3, [r4, #0]
 80045e8:	e0de      	b.n	80047a8 <USB_EPStartXfer+0x52c>
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <USB_EPStartXfer+0x384>
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	b29b      	uxth	r3, r3
 8004604:	029b      	lsls	r3, r3, #10
 8004606:	b29b      	uxth	r3, r3
 8004608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800460c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004610:	b29b      	uxth	r3, r3
 8004612:	8023      	strh	r3, [r4, #0]
 8004614:	e0c8      	b.n	80047a8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d148      	bne.n	80046b0 <USB_EPStartXfer+0x434>
 800461e:	687c      	ldr	r4, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004626:	b29b      	uxth	r3, r3
 8004628:	441c      	add	r4, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	4423      	add	r3, r4
 8004632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004636:	461c      	mov	r4, r3
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10e      	bne.n	800465c <USB_EPStartXfer+0x3e0>
 800463e:	8823      	ldrh	r3, [r4, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004646:	b29b      	uxth	r3, r3
 8004648:	8023      	strh	r3, [r4, #0]
 800464a:	8823      	ldrh	r3, [r4, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004656:	b29b      	uxth	r3, r3
 8004658:	8023      	strh	r3, [r4, #0]
 800465a:	e03d      	b.n	80046d8 <USB_EPStartXfer+0x45c>
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	2b3e      	cmp	r3, #62	; 0x3e
 8004660:	d810      	bhi.n	8004684 <USB_EPStartXfer+0x408>
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	085b      	lsrs	r3, r3, #1
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <USB_EPStartXfer+0x3fc>
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3301      	adds	r3, #1
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	b29b      	uxth	r3, r3
 800467c:	029b      	lsls	r3, r3, #10
 800467e:	b29b      	uxth	r3, r3
 8004680:	8023      	strh	r3, [r4, #0]
 8004682:	e029      	b.n	80046d8 <USB_EPStartXfer+0x45c>
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <USB_EPStartXfer+0x41e>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	3b01      	subs	r3, #1
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	b29b      	uxth	r3, r3
 800469e:	029b      	lsls	r3, r3, #10
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	8023      	strh	r3, [r4, #0]
 80046ae:	e013      	b.n	80046d8 <USB_EPStartXfer+0x45c>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d10f      	bne.n	80046d8 <USB_EPStartXfer+0x45c>
 80046b8:	687c      	ldr	r4, [r7, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	441c      	add	r4, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	4423      	add	r3, r4
 80046cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046d0:	461c      	mov	r4, r3
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	8023      	strh	r3, [r4, #0]
 80046d8:	687c      	ldr	r4, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	785b      	ldrb	r3, [r3, #1]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d14e      	bne.n	8004780 <USB_EPStartXfer+0x504>
 80046e2:	687c      	ldr	r4, [r7, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	441c      	add	r4, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	4423      	add	r3, r4
 80046f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046fa:	461c      	mov	r4, r3
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10e      	bne.n	8004720 <USB_EPStartXfer+0x4a4>
 8004702:	8823      	ldrh	r3, [r4, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800470a:	b29b      	uxth	r3, r3
 800470c:	8023      	strh	r3, [r4, #0]
 800470e:	8823      	ldrh	r3, [r4, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471a:	b29b      	uxth	r3, r3
 800471c:	8023      	strh	r3, [r4, #0]
 800471e:	e043      	b.n	80047a8 <USB_EPStartXfer+0x52c>
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	2b3e      	cmp	r3, #62	; 0x3e
 8004724:	d816      	bhi.n	8004754 <USB_EPStartXfer+0x4d8>
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <USB_EPStartXfer+0x4c0>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3301      	adds	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	b29b      	uxth	r3, r3
 8004740:	029b      	lsls	r3, r3, #10
 8004742:	b29b      	uxth	r3, r3
 8004744:	8023      	strh	r3, [r4, #0]
 8004746:	e02f      	b.n	80047a8 <USB_EPStartXfer+0x52c>
 8004748:	ffff80c0 	.word	0xffff80c0
 800474c:	ffffc080 	.word	0xffffc080
 8004750:	ffff8080 	.word	0xffff8080
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <USB_EPStartXfer+0x4ee>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3b01      	subs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	b29b      	uxth	r3, r3
 800476e:	029b      	lsls	r3, r3, #10
 8004770:	b29b      	uxth	r3, r3
 8004772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477a:	b29b      	uxth	r3, r3
 800477c:	8023      	strh	r3, [r4, #0]
 800477e:	e013      	b.n	80047a8 <USB_EPStartXfer+0x52c>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d10f      	bne.n	80047a8 <USB_EPStartXfer+0x52c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800478e:	b29b      	uxth	r3, r3
 8004790:	441c      	add	r4, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	4423      	add	r3, r4
 800479a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	b29c      	uxth	r4, r3
 80047c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80047c4:	b29c      	uxth	r4, r3
 80047c6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80047ca:	b29c      	uxth	r4, r3
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <USB_EPStartXfer+0x56c>)
 80047d8:	4323      	orrs	r3, r4
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3734      	adds	r7, #52	; 0x34
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd90      	pop	{r4, r7, pc}
 80047e8:	ffff8080 	.word	0xffff8080

080047ec <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047ec:	b490      	push	{r4, r7}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004814:	b29c      	uxth	r4, r3
 8004816:	f084 0310 	eor.w	r3, r4, #16
 800481a:	b29c      	uxth	r4, r3
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <USB_EPSetStall+0x80>)
 8004828:	4323      	orrs	r3, r4
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]
 800482e:	e017      	b.n	8004860 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	b29c      	uxth	r4, r3
 8004848:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800484c:	b29c      	uxth	r4, r3
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <USB_EPSetStall+0x80>)
 800485a:	4323      	orrs	r3, r4
 800485c:	b29b      	uxth	r3, r3
 800485e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bc90      	pop	{r4, r7}
 800486a:	4770      	bx	lr
 800486c:	ffff8080 	.word	0xffff8080

08004870 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004870:	b490      	push	{r4, r7}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	7b1b      	ldrb	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d17d      	bne.n	800497e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d03d      	beq.n	8004906 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29c      	uxth	r4, r3
 8004898:	4623      	mov	r3, r4
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d014      	beq.n	80048cc <USB_EPClearStall+0x5c>
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	b29c      	uxth	r4, r3
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	4b31      	ldr	r3, [pc, #196]	; (800498c <USB_EPClearStall+0x11c>)
 80048c6:	4323      	orrs	r3, r4
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	78db      	ldrb	r3, [r3, #3]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d054      	beq.n	800497e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ea:	b29c      	uxth	r4, r3
 80048ec:	f084 0320 	eor.w	r3, r4, #32
 80048f0:	b29c      	uxth	r4, r3
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	4b24      	ldr	r3, [pc, #144]	; (8004990 <USB_EPClearStall+0x120>)
 80048fe:	4323      	orrs	r3, r4
 8004900:	b29b      	uxth	r3, r3
 8004902:	8013      	strh	r3, [r2, #0]
 8004904:	e03b      	b.n	800497e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29c      	uxth	r4, r3
 8004914:	4623      	mov	r3, r4
 8004916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d014      	beq.n	8004948 <USB_EPClearStall+0xd8>
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	b29c      	uxth	r4, r3
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	4b14      	ldr	r3, [pc, #80]	; (8004994 <USB_EPClearStall+0x124>)
 8004942:	4323      	orrs	r3, r4
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	b29c      	uxth	r4, r3
 8004960:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004964:	b29c      	uxth	r4, r3
 8004966:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800496a:	b29c      	uxth	r4, r3
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <USB_EPClearStall+0x120>)
 8004978:	4323      	orrs	r3, r4
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bc90      	pop	{r4, r7}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	ffff80c0 	.word	0xffff80c0
 8004990:	ffff8080 	.word	0xffff8080
 8004994:	ffffc080 	.word	0xffffc080

08004998 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d103      	bne.n	80049b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2280      	movs	r2, #128	; 0x80
 80049ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr

080049be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr

080049d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80049f8:	68fb      	ldr	r3, [r7, #12]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr

08004a04 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr

08004a1a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b08d      	sub	sp, #52	; 0x34
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	4611      	mov	r1, r2
 8004a26:	461a      	mov	r2, r3
 8004a28:	460b      	mov	r3, r1
 8004a2a:	80fb      	strh	r3, [r7, #6]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004a30:	88bb      	ldrh	r3, [r7, #4]
 8004a32:	3301      	adds	r3, #1
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	005a      	lsls	r2, r3, #1
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a52:	e01e      	b.n	8004a92 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	3302      	adds	r3, #2
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	3301      	adds	r3, #1
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1dd      	bne.n	8004a54 <USB_WritePMA+0x3a>
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3734      	adds	r7, #52	; 0x34
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b08b      	sub	sp, #44	; 0x2c
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	4611      	mov	r1, r2
 8004aae:	461a      	mov	r2, r3
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	80fb      	strh	r3, [r7, #6]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004ab8:	88bb      	ldrh	r3, [r7, #4]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	005a      	lsls	r2, r3, #1
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ad4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ada:	e01b      	b.n	8004b14 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3301      	adds	r3, #1
 8004af6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3301      	adds	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	3b01      	subs	r3, #1
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e0      	bne.n	8004adc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004b1a:	88bb      	ldrh	r3, [r7, #4]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	701a      	strb	r2, [r3, #0]
  }
}
 8004b36:	bf00      	nop
 8004b38:	372c      	adds	r7, #44	; 0x2c
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	7c1b      	ldrb	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d115      	bne.n	8004b84 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	2181      	movs	r1, #129	; 0x81
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f001 fe6c 	bl	800683e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b70:	2202      	movs	r2, #2
 8004b72:	2101      	movs	r1, #1
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f001 fe62 	bl	800683e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004b82:	e012      	b.n	8004baa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b84:	2340      	movs	r3, #64	; 0x40
 8004b86:	2202      	movs	r2, #2
 8004b88:	2181      	movs	r1, #129	; 0x81
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f001 fe57 	bl	800683e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b96:	2340      	movs	r3, #64	; 0x40
 8004b98:	2202      	movs	r2, #2
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f001 fe4e 	bl	800683e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004baa:	2308      	movs	r3, #8
 8004bac:	2203      	movs	r2, #3
 8004bae:	2182      	movs	r1, #130	; 0x82
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f001 fe44 	bl	800683e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004bbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004bc0:	f001 ff5e 	bl	8006a80 <USBD_static_malloc>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
 8004bda:	e026      	b.n	8004c2a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004be2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	7c1b      	ldrb	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c10:	2101      	movs	r1, #1
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f001 fefd 	bl	8006a12 <USBD_LL_PrepareReceive>
 8004c18:	e007      	b.n	8004c2a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c20:	2340      	movs	r3, #64	; 0x40
 8004c22:	2101      	movs	r1, #1
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 fef4 	bl	8006a12 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004c44:	2181      	movs	r1, #129	; 0x81
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f001 fe1f 	bl	800688a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004c52:	2101      	movs	r1, #1
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f001 fe18 	bl	800688a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004c62:	2182      	movs	r1, #130	; 0x82
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 fe10 	bl	800688a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00e      	beq.n	8004c98 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 ff04 	bl	8006a98 <USBD_static_free>
    pdev->pClassData = NULL;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b086      	sub	sp, #24
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cb2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d039      	beq.n	8004d40 <USBD_CDC_Setup+0x9e>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d17c      	bne.n	8004dca <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	88db      	ldrh	r3, [r3, #6]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d029      	beq.n	8004d2c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	da11      	bge.n	8004d06 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004cee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	88d2      	ldrh	r2, [r2, #6]
 8004cf4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004cf6:	6939      	ldr	r1, [r7, #16]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	88db      	ldrh	r3, [r3, #6]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 f9f6 	bl	80060f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004d04:	e068      	b.n	8004dd8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	785a      	ldrb	r2, [r3, #1]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	88db      	ldrh	r3, [r3, #6]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004d1c:	6939      	ldr	r1, [r7, #16]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	88db      	ldrh	r3, [r3, #6]
 8004d22:	461a      	mov	r2, r3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f001 fa11 	bl	800614c <USBD_CtlPrepareRx>
      break;
 8004d2a:	e055      	b.n	8004dd8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	7850      	ldrb	r0, [r2, #1]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	4798      	blx	r3
      break;
 8004d3e:	e04b      	b.n	8004dd8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b0a      	cmp	r3, #10
 8004d46:	d017      	beq.n	8004d78 <USBD_CDC_Setup+0xd6>
 8004d48:	2b0b      	cmp	r3, #11
 8004d4a:	d029      	beq.n	8004da0 <USBD_CDC_Setup+0xfe>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d133      	bne.n	8004db8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d107      	bne.n	8004d6a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004d5a:	f107 030c 	add.w	r3, r7, #12
 8004d5e:	2202      	movs	r2, #2
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 f9c4 	bl	80060f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d68:	e02e      	b.n	8004dc8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004d6a:	6839      	ldr	r1, [r7, #0]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 f955 	bl	800601c <USBD_CtlError>
            ret = USBD_FAIL;
 8004d72:	2302      	movs	r3, #2
 8004d74:	75fb      	strb	r3, [r7, #23]
          break;
 8004d76:	e027      	b.n	8004dc8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d107      	bne.n	8004d92 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d82:	f107 030f 	add.w	r3, r7, #15
 8004d86:	2201      	movs	r2, #1
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 f9b0 	bl	80060f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d90:	e01a      	b.n	8004dc8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f001 f941 	bl	800601c <USBD_CtlError>
            ret = USBD_FAIL;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d9e:	e013      	b.n	8004dc8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d00d      	beq.n	8004dc6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004daa:	6839      	ldr	r1, [r7, #0]
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 f935 	bl	800601c <USBD_CtlError>
            ret = USBD_FAIL;
 8004db2:	2302      	movs	r3, #2
 8004db4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004db6:	e006      	b.n	8004dc6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f001 f92e 	bl	800601c <USBD_CtlError>
          ret = USBD_FAIL;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	75fb      	strb	r3, [r7, #23]
          break;
 8004dc4:	e000      	b.n	8004dc8 <USBD_CDC_Setup+0x126>
          break;
 8004dc6:	bf00      	nop
      }
      break;
 8004dc8:	e006      	b.n	8004dd8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f001 f925 	bl	800601c <USBD_CtlError>
      ret = USBD_FAIL;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd6:	bf00      	nop
  }

  return ret;
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	460b      	mov	r3, r1
 8004dec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dfc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d037      	beq.n	8004e78 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	331c      	adds	r3, #28
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d026      	beq.n	8004e6c <USBD_CDC_DataIn+0x8a>
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	331c      	adds	r3, #28
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	78fa      	ldrb	r2, [r7, #3]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	0152      	lsls	r2, r2, #5
 8004e36:	440a      	add	r2, r1
 8004e38:	3238      	adds	r2, #56	; 0x38
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e40:	fb02 f201 	mul.w	r2, r2, r1
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d110      	bne.n	8004e6c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	331c      	adds	r3, #28
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004e5e:	78f9      	ldrb	r1, [r7, #3]
 8004e60:	2300      	movs	r3, #0
 8004e62:	2200      	movs	r2, #0
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f001 fdb1 	bl	80069cc <USBD_LL_Transmit>
 8004e6a:	e003      	b.n	8004e74 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e000      	b.n	8004e7a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 fddc 	bl	8006a58 <USBD_LL_GetRxDataSize>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00d      	beq.n	8004ece <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4798      	blx	r3

    return USBD_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e000      	b.n	8004ed0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004ece:	2302      	movs	r3, #2
  }
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d015      	beq.n	8004f1e <USBD_CDC_EP0_RxReady+0x46>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ef8:	2bff      	cmp	r3, #255	; 0xff
 8004efa:	d010      	beq.n	8004f1e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004f0a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004f12:	b292      	uxth	r2, r2
 8004f14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	22ff      	movs	r2, #255	; 0xff
 8004f1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2243      	movs	r2, #67	; 0x43
 8004f34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004f36:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	2000009c 	.word	0x2000009c

08004f48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2243      	movs	r2, #67	; 0x43
 8004f54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004f56:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000058 	.word	0x20000058

08004f68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2243      	movs	r2, #67	; 0x43
 8004f74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004f76:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	200000e0 	.word	0x200000e0

08004f88 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	220a      	movs	r2, #10
 8004f94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004f96:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000014 	.word	0x20000014

08004fa8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr

08005006 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005016:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800503a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01c      	beq.n	8005080 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800504c:	2b00      	cmp	r3, #0
 800504e:	d115      	bne.n	800507c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800506e:	b29b      	uxth	r3, r3
 8005070:	2181      	movs	r1, #129	; 0x81
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 fcaa 	bl	80069cc <USBD_LL_Transmit>

      return USBD_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e002      	b.n	8005082 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005080:	2302      	movs	r3, #2
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005098:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d017      	beq.n	80050d4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7c1b      	ldrb	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050b6:	2101      	movs	r1, #1
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 fcaa 	bl	8006a12 <USBD_LL_PrepareReceive>
 80050be:	e007      	b.n	80050d0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050c6:	2340      	movs	r3, #64	; 0x40
 80050c8:	2101      	movs	r1, #1
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 fca1 	bl	8006a12 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80050d4:	2302      	movs	r3, #2
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	4613      	mov	r3, r2
 80050ea:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050f2:	2302      	movs	r3, #2
 80050f4:	e01a      	b.n	800512c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	79fa      	ldrb	r2, [r7, #7]
 8005122:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f001 fb15 	bl	8006754 <USBD_LL_Init>

  return USBD_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d006      	beq.n	8005156 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]
 8005154:	e001      	b.n	800515a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005156:	2302      	movs	r3, #2
 8005158:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800515a:	7bfb      	ldrb	r3, [r7, #15]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f001 fb4a 	bl	8006808 <USBD_LL_Start>

  return USBD_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800519e:	2302      	movs	r3, #2
 80051a0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	4611      	mov	r1, r2
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	78fa      	ldrb	r2, [r7, #3]
 80051e6:	4611      	mov	r1, r2
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3

  return USBD_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fecb 	bl	8005fa4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800521c:	461a      	mov	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2b01      	cmp	r3, #1
 8005230:	d00c      	beq.n	800524c <USBD_LL_SetupStage+0x56>
 8005232:	2b01      	cmp	r3, #1
 8005234:	d302      	bcc.n	800523c <USBD_LL_SetupStage+0x46>
 8005236:	2b02      	cmp	r3, #2
 8005238:	d010      	beq.n	800525c <USBD_LL_SetupStage+0x66>
 800523a:	e017      	b.n	800526c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f9cb 	bl	80055e0 <USBD_StdDevReq>
      break;
 800524a:	e01a      	b.n	8005282 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fa2d 	bl	80056b4 <USBD_StdItfReq>
      break;
 800525a:	e012      	b.n	8005282 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fa6b 	bl	8005740 <USBD_StdEPReq>
      break;
 800526a:	e00a      	b.n	8005282 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005272:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005276:	b2db      	uxtb	r3, r3
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 fb24 	bl	80068c8 <USBD_LL_StallEP>
      break;
 8005280:	bf00      	nop
  }

  return USBD_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	460b      	mov	r3, r1
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800529a:	7afb      	ldrb	r3, [r7, #11]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d14b      	bne.n	8005338 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d134      	bne.n	800531c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d919      	bls.n	80052f2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	1ad2      	subs	r2, r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d203      	bcs.n	80052e0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80052dc:	b29b      	uxth	r3, r3
 80052de:	e002      	b.n	80052e6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 ff4c 	bl	8006188 <USBD_CtlContinueRx>
 80052f0:	e038      	b.n	8005364 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005304:	2b03      	cmp	r3, #3
 8005306:	d105      	bne.n	8005314 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 ff49 	bl	80061ac <USBD_CtlSendStatus>
 800531a:	e023      	b.n	8005364 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005322:	2b05      	cmp	r3, #5
 8005324:	d11e      	bne.n	8005364 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800532e:	2100      	movs	r1, #0
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f001 fac9 	bl	80068c8 <USBD_LL_StallEP>
 8005336:	e015      	b.n	8005364 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00d      	beq.n	8005360 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800534a:	2b03      	cmp	r3, #3
 800534c:	d108      	bne.n	8005360 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	7afa      	ldrb	r2, [r7, #11]
 8005358:	4611      	mov	r1, r2
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	4798      	blx	r3
 800535e:	e001      	b.n	8005364 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005360:	2302      	movs	r3, #2
 8005362:	e000      	b.n	8005366 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b086      	sub	sp, #24
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	460b      	mov	r3, r1
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800537c:	7afb      	ldrb	r3, [r7, #11]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d17f      	bne.n	8005482 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3314      	adds	r3, #20
 8005386:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800538e:	2b02      	cmp	r3, #2
 8005390:	d15c      	bne.n	800544c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	429a      	cmp	r2, r3
 800539c:	d915      	bls.n	80053ca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	1ad2      	subs	r2, r2, r3
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 feb6 	bl	8006128 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053bc:	2300      	movs	r3, #0
 80053be:	2200      	movs	r2, #0
 80053c0:	2100      	movs	r1, #0
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f001 fb25 	bl	8006a12 <USBD_LL_PrepareReceive>
 80053c8:	e04e      	b.n	8005468 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	6912      	ldr	r2, [r2, #16]
 80053d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80053d6:	fb02 f201 	mul.w	r2, r2, r1
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11c      	bne.n	800541a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d316      	bcc.n	800541a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d20f      	bcs.n	800541a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053fa:	2200      	movs	r2, #0
 80053fc:	2100      	movs	r1, #0
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fe92 	bl	8006128 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800540c:	2300      	movs	r3, #0
 800540e:	2200      	movs	r2, #0
 8005410:	2100      	movs	r1, #0
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f001 fafd 	bl	8006a12 <USBD_LL_PrepareReceive>
 8005418:	e026      	b.n	8005468 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800542c:	2b03      	cmp	r3, #3
 800542e:	d105      	bne.n	800543c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800543c:	2180      	movs	r1, #128	; 0x80
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f001 fa42 	bl	80068c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fec4 	bl	80061d2 <USBD_CtlReceiveStatus>
 800544a:	e00d      	b.n	8005468 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005452:	2b04      	cmp	r3, #4
 8005454:	d004      	beq.n	8005460 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800545c:	2b00      	cmp	r3, #0
 800545e:	d103      	bne.n	8005468 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005460:	2180      	movs	r1, #128	; 0x80
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f001 fa30 	bl	80068c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800546e:	2b01      	cmp	r3, #1
 8005470:	d11d      	bne.n	80054ae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff fe83 	bl	800517e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005480:	e015      	b.n	80054ae <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005494:	2b03      	cmp	r3, #3
 8005496:	d108      	bne.n	80054aa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	7afa      	ldrb	r2, [r7, #11]
 80054a2:	4611      	mov	r1, r2
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	4798      	blx	r3
 80054a8:	e001      	b.n	80054ae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054aa:	2302      	movs	r3, #2
 80054ac:	e000      	b.n	80054b0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054c0:	2340      	movs	r3, #64	; 0x40
 80054c2:	2200      	movs	r2, #0
 80054c4:	2100      	movs	r1, #0
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f001 f9b9 	bl	800683e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2240      	movs	r2, #64	; 0x40
 80054d8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054dc:	2340      	movs	r3, #64	; 0x40
 80054de:	2200      	movs	r2, #0
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 f9ab 	bl	800683e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2240      	movs	r2, #64	; 0x40
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6852      	ldr	r2, [r2, #4]
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	4611      	mov	r1, r2
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	4798      	blx	r3
  }

  return USBD_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2204      	movs	r2, #4
 8005570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800558e:	2b04      	cmp	r3, #4
 8005590:	d105      	bne.n	800559e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d10b      	bne.n	80055d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d004      	beq.n	8005604 <USBD_StdDevReq+0x24>
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d002      	beq.n	8005604 <USBD_StdDevReq+0x24>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d008      	beq.n	8005614 <USBD_StdDevReq+0x34>
 8005602:	e04c      	b.n	800569e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
      break;
 8005612:	e049      	b.n	80056a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	2b09      	cmp	r3, #9
 800561a:	d83a      	bhi.n	8005692 <USBD_StdDevReq+0xb2>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <USBD_StdDevReq+0x44>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005675 	.word	0x08005675
 8005628:	08005689 	.word	0x08005689
 800562c:	08005693 	.word	0x08005693
 8005630:	0800567f 	.word	0x0800567f
 8005634:	08005693 	.word	0x08005693
 8005638:	08005657 	.word	0x08005657
 800563c:	0800564d 	.word	0x0800564d
 8005640:	08005693 	.word	0x08005693
 8005644:	0800566b 	.word	0x0800566b
 8005648:	08005661 	.word	0x08005661
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9d4 	bl	80059fc <USBD_GetDescriptor>
          break;
 8005654:	e022      	b.n	800569c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb37 	bl	8005ccc <USBD_SetAddress>
          break;
 800565e:	e01d      	b.n	800569c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fb74 	bl	8005d50 <USBD_SetConfig>
          break;
 8005668:	e018      	b.n	800569c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fbfd 	bl	8005e6c <USBD_GetConfig>
          break;
 8005672:	e013      	b.n	800569c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fc2c 	bl	8005ed4 <USBD_GetStatus>
          break;
 800567c:	e00e      	b.n	800569c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fc5a 	bl	8005f3a <USBD_SetFeature>
          break;
 8005686:	e009      	b.n	800569c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fc69 	bl	8005f62 <USBD_ClrFeature>
          break;
 8005690:	e004      	b.n	800569c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fcc1 	bl	800601c <USBD_CtlError>
          break;
 800569a:	bf00      	nop
      }
      break;
 800569c:	e004      	b.n	80056a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fcbb 	bl	800601c <USBD_CtlError>
      break;
 80056a6:	bf00      	nop
  }

  return ret;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop

080056b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d003      	beq.n	80056d6 <USBD_StdItfReq+0x22>
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	d001      	beq.n	80056d6 <USBD_StdItfReq+0x22>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d12a      	bne.n	800572c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056dc:	3b01      	subs	r3, #1
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d81d      	bhi.n	800571e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	889b      	ldrh	r3, [r3, #4]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d813      	bhi.n	8005714 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	4798      	blx	r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	88db      	ldrh	r3, [r3, #6]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d110      	bne.n	8005728 <USBD_StdItfReq+0x74>
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10d      	bne.n	8005728 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fd4d 	bl	80061ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005712:	e009      	b.n	8005728 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fc80 	bl	800601c <USBD_CtlError>
          break;
 800571c:	e004      	b.n	8005728 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fc7b 	bl	800601c <USBD_CtlError>
          break;
 8005726:	e000      	b.n	800572a <USBD_StdItfReq+0x76>
          break;
 8005728:	bf00      	nop
      }
      break;
 800572a:	e004      	b.n	8005736 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fc74 	bl	800601c <USBD_CtlError>
      break;
 8005734:	bf00      	nop
  }

  return USBD_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	889b      	ldrh	r3, [r3, #4]
 8005752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800575c:	2b20      	cmp	r3, #32
 800575e:	d004      	beq.n	800576a <USBD_StdEPReq+0x2a>
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d002      	beq.n	800576a <USBD_StdEPReq+0x2a>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <USBD_StdEPReq+0x3a>
 8005768:	e13d      	b.n	80059e6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
      break;
 8005778:	e13a      	b.n	80059f0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005782:	2b20      	cmp	r3, #32
 8005784:	d10a      	bne.n	800579c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	e12a      	b.n	80059f2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	785b      	ldrb	r3, [r3, #1]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d03e      	beq.n	8005822 <USBD_StdEPReq+0xe2>
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d002      	beq.n	80057ae <USBD_StdEPReq+0x6e>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d070      	beq.n	800588e <USBD_StdEPReq+0x14e>
 80057ac:	e115      	b.n	80059da <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d002      	beq.n	80057be <USBD_StdEPReq+0x7e>
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d015      	beq.n	80057e8 <USBD_StdEPReq+0xa8>
 80057bc:	e02b      	b.n	8005816 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00c      	beq.n	80057de <USBD_StdEPReq+0x9e>
 80057c4:	7bbb      	ldrb	r3, [r7, #14]
 80057c6:	2b80      	cmp	r3, #128	; 0x80
 80057c8:	d009      	beq.n	80057de <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 f87a 	bl	80068c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 f876 	bl	80068c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057dc:	e020      	b.n	8005820 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fc1b 	bl	800601c <USBD_CtlError>
              break;
 80057e6:	e01b      	b.n	8005820 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	885b      	ldrh	r3, [r3, #2]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10e      	bne.n	800580e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <USBD_StdEPReq+0xce>
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	2b80      	cmp	r3, #128	; 0x80
 80057fa:	d008      	beq.n	800580e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	88db      	ldrh	r3, [r3, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 f85d 	bl	80068c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fccc 	bl	80061ac <USBD_CtlSendStatus>

              break;
 8005814:	e004      	b.n	8005820 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fbff 	bl	800601c <USBD_CtlError>
              break;
 800581e:	bf00      	nop
          }
          break;
 8005820:	e0e0      	b.n	80059e4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005828:	2b02      	cmp	r3, #2
 800582a:	d002      	beq.n	8005832 <USBD_StdEPReq+0xf2>
 800582c:	2b03      	cmp	r3, #3
 800582e:	d015      	beq.n	800585c <USBD_StdEPReq+0x11c>
 8005830:	e026      	b.n	8005880 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <USBD_StdEPReq+0x112>
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d009      	beq.n	8005852 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 f840 	bl	80068c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005848:	2180      	movs	r1, #128	; 0x80
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 f83c 	bl	80068c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005850:	e01c      	b.n	800588c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fbe1 	bl	800601c <USBD_CtlError>
              break;
 800585a:	e017      	b.n	800588c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	885b      	ldrh	r3, [r3, #2]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d112      	bne.n	800588a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800586e:	7bbb      	ldrb	r3, [r7, #14]
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 f847 	bl	8006906 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fc97 	bl	80061ac <USBD_CtlSendStatus>
              }
              break;
 800587e:	e004      	b.n	800588a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fbca 	bl	800601c <USBD_CtlError>
              break;
 8005888:	e000      	b.n	800588c <USBD_StdEPReq+0x14c>
              break;
 800588a:	bf00      	nop
          }
          break;
 800588c:	e0aa      	b.n	80059e4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005894:	2b02      	cmp	r3, #2
 8005896:	d002      	beq.n	800589e <USBD_StdEPReq+0x15e>
 8005898:	2b03      	cmp	r3, #3
 800589a:	d032      	beq.n	8005902 <USBD_StdEPReq+0x1c2>
 800589c:	e097      	b.n	80059ce <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800589e:	7bbb      	ldrb	r3, [r7, #14]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <USBD_StdEPReq+0x174>
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	2b80      	cmp	r3, #128	; 0x80
 80058a8:	d004      	beq.n	80058b4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fbb5 	bl	800601c <USBD_CtlError>
                break;
 80058b2:	e091      	b.n	80059d8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da0b      	bge.n	80058d4 <USBD_StdEPReq+0x194>
 80058bc:	7bbb      	ldrb	r3, [r7, #14]
 80058be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	3310      	adds	r3, #16
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4413      	add	r3, r2
 80058d0:	3304      	adds	r3, #4
 80058d2:	e00b      	b.n	80058ec <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4413      	add	r3, r2
 80058ea:	3304      	adds	r3, #4
 80058ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2202      	movs	r2, #2
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fbf8 	bl	80060f0 <USBD_CtlSendData>
              break;
 8005900:	e06a      	b.n	80059d8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da11      	bge.n	800592e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800590a:	7bbb      	ldrb	r3, [r7, #14]
 800590c:	f003 020f 	and.w	r2, r3, #15
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	3318      	adds	r3, #24
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d117      	bne.n	8005954 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fb78 	bl	800601c <USBD_CtlError>
                  break;
 800592c:	e054      	b.n	80059d8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	f003 020f 	and.w	r2, r3, #15
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb65 	bl	800601c <USBD_CtlError>
                  break;
 8005952:	e041      	b.n	80059d8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	da0b      	bge.n	8005974 <USBD_StdEPReq+0x234>
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	3310      	adds	r3, #16
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4413      	add	r3, r2
 8005970:	3304      	adds	r3, #4
 8005972:	e00b      	b.n	800598c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	3304      	adds	r3, #4
 800598c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <USBD_StdEPReq+0x25a>
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b80      	cmp	r3, #128	; 0x80
 8005998:	d103      	bne.n	80059a2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e00e      	b.n	80059c0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80059a2:	7bbb      	ldrb	r3, [r7, #14]
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 ffcc 	bl	8006944 <USBD_LL_IsStallEP>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2201      	movs	r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e002      	b.n	80059c0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2202      	movs	r2, #2
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fb92 	bl	80060f0 <USBD_CtlSendData>
              break;
 80059cc:	e004      	b.n	80059d8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fb23 	bl	800601c <USBD_CtlError>
              break;
 80059d6:	bf00      	nop
          }
          break;
 80059d8:	e004      	b.n	80059e4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fb1d 	bl	800601c <USBD_CtlError>
          break;
 80059e2:	bf00      	nop
      }
      break;
 80059e4:	e004      	b.n	80059f0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fb17 	bl	800601c <USBD_CtlError>
      break;
 80059ee:	bf00      	nop
  }

  return ret;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	885b      	ldrh	r3, [r3, #2]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	2b06      	cmp	r3, #6
 8005a1e:	f200 8128 	bhi.w	8005c72 <USBD_GetDescriptor+0x276>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <USBD_GetDescriptor+0x2c>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a5d 	.word	0x08005a5d
 8005a30:	08005a9d 	.word	0x08005a9d
 8005a34:	08005c73 	.word	0x08005c73
 8005a38:	08005c73 	.word	0x08005c73
 8005a3c:	08005c13 	.word	0x08005c13
 8005a40:	08005c3f 	.word	0x08005c3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	7c12      	ldrb	r2, [r2, #16]
 8005a50:	f107 0108 	add.w	r1, r7, #8
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	60f8      	str	r0, [r7, #12]
      break;
 8005a5a:	e112      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7c1b      	ldrb	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f107 0208 	add.w	r2, r7, #8
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
 8005a74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a7e:	e100      	b.n	8005c82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	f107 0208 	add.w	r2, r7, #8
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4798      	blx	r3
 8005a90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3301      	adds	r3, #1
 8005a96:	2202      	movs	r2, #2
 8005a98:	701a      	strb	r2, [r3, #0]
      break;
 8005a9a:	e0f2      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	885b      	ldrh	r3, [r3, #2]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	f200 80ac 	bhi.w	8005c00 <USBD_GetDescriptor+0x204>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <USBD_GetDescriptor+0xb4>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005ac9 	.word	0x08005ac9
 8005ab4:	08005afd 	.word	0x08005afd
 8005ab8:	08005b31 	.word	0x08005b31
 8005abc:	08005b65 	.word	0x08005b65
 8005ac0:	08005b99 	.word	0x08005b99
 8005ac4:	08005bcd 	.word	0x08005bcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	7c12      	ldrb	r2, [r2, #16]
 8005ae0:	f107 0108 	add.w	r1, r7, #8
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
 8005ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aea:	e091      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa94 	bl	800601c <USBD_CtlError>
            err++;
 8005af4:	7afb      	ldrb	r3, [r7, #11]
 8005af6:	3301      	adds	r3, #1
 8005af8:	72fb      	strb	r3, [r7, #11]
          break;
 8005afa:	e089      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00b      	beq.n	8005b20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	7c12      	ldrb	r2, [r2, #16]
 8005b14:	f107 0108 	add.w	r1, r7, #8
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4798      	blx	r3
 8005b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b1e:	e077      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa7a 	bl	800601c <USBD_CtlError>
            err++;
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b2e:	e06f      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	7c12      	ldrb	r2, [r2, #16]
 8005b48:	f107 0108 	add.w	r1, r7, #8
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4798      	blx	r3
 8005b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b52:	e05d      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa60 	bl	800601c <USBD_CtlError>
            err++;
 8005b5c:	7afb      	ldrb	r3, [r7, #11]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	72fb      	strb	r3, [r7, #11]
          break;
 8005b62:	e055      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	7c12      	ldrb	r2, [r2, #16]
 8005b7c:	f107 0108 	add.w	r1, r7, #8
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
 8005b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b86:	e043      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa46 	bl	800601c <USBD_CtlError>
            err++;
 8005b90:	7afb      	ldrb	r3, [r7, #11]
 8005b92:	3301      	adds	r3, #1
 8005b94:	72fb      	strb	r3, [r7, #11]
          break;
 8005b96:	e03b      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	7c12      	ldrb	r2, [r2, #16]
 8005bb0:	f107 0108 	add.w	r1, r7, #8
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
 8005bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bba:	e029      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa2c 	bl	800601c <USBD_CtlError>
            err++;
 8005bc4:	7afb      	ldrb	r3, [r7, #11]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bca:	e021      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	7c12      	ldrb	r2, [r2, #16]
 8005be4:	f107 0108 	add.w	r1, r7, #8
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
 8005bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bee:	e00f      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa12 	bl	800601c <USBD_CtlError>
            err++;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bfe:	e007      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa0a 	bl	800601c <USBD_CtlError>
          err++;
 8005c08:	7afb      	ldrb	r3, [r7, #11]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005c0e:	e038      	b.n	8005c82 <USBD_GetDescriptor+0x286>
 8005c10:	e037      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	7c1b      	ldrb	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c22:	f107 0208 	add.w	r2, r7, #8
 8005c26:	4610      	mov	r0, r2
 8005c28:	4798      	blx	r3
 8005c2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c2c:	e029      	b.n	8005c82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f9f3 	bl	800601c <USBD_CtlError>
        err++;
 8005c36:	7afb      	ldrb	r3, [r7, #11]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c3c:	e021      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7c1b      	ldrb	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	f107 0208 	add.w	r2, r7, #8
 8005c52:	4610      	mov	r0, r2
 8005c54:	4798      	blx	r3
 8005c56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	2207      	movs	r2, #7
 8005c5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c60:	e00f      	b.n	8005c82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9d9 	bl	800601c <USBD_CtlError>
        err++;
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c70:	e007      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9d1 	bl	800601c <USBD_CtlError>
      err++;
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c80:	bf00      	nop
  }

  if (err != 0U)
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11c      	bne.n	8005cc2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c88:	893b      	ldrh	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d011      	beq.n	8005cb2 <USBD_GetDescriptor+0x2b6>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	88db      	ldrh	r3, [r3, #6]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	88da      	ldrh	r2, [r3, #6]
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	bf28      	it	cs
 8005ca0:	4613      	movcs	r3, r2
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ca6:	893b      	ldrh	r3, [r7, #8]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fa1f 	bl	80060f0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	88db      	ldrh	r3, [r3, #6]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa76 	bl	80061ac <USBD_CtlSendStatus>
 8005cc0:	e000      	b.n	8005cc4 <USBD_GetDescriptor+0x2c8>
    return;
 8005cc2:	bf00      	nop
    }
  }
}
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop

08005ccc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	889b      	ldrh	r3, [r3, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d130      	bne.n	8005d40 <USBD_SetAddress+0x74>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	88db      	ldrh	r3, [r3, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d12c      	bne.n	8005d40 <USBD_SetAddress+0x74>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	885b      	ldrh	r3, [r3, #2]
 8005cea:	2b7f      	cmp	r3, #127	; 0x7f
 8005cec:	d828      	bhi.n	8005d40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	885b      	ldrh	r3, [r3, #2]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d104      	bne.n	8005d0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f988 	bl	800601c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0c:	e01c      	b.n	8005d48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7bfa      	ldrb	r2, [r7, #15]
 8005d12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fe37 	bl	800698e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fa43 	bl	80061ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d34:	e008      	b.n	8005d48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3e:	e003      	b.n	8005d48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f96a 	bl	800601c <USBD_CtlError>
  }
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	885b      	ldrh	r3, [r3, #2]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	4b41      	ldr	r3, [pc, #260]	; (8005e68 <USBD_SetConfig+0x118>)
 8005d62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d64:	4b40      	ldr	r3, [pc, #256]	; (8005e68 <USBD_SetConfig+0x118>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d904      	bls.n	8005d76 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f954 	bl	800601c <USBD_CtlError>
 8005d74:	e075      	b.n	8005e62 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d002      	beq.n	8005d86 <USBD_SetConfig+0x36>
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d023      	beq.n	8005dcc <USBD_SetConfig+0x7c>
 8005d84:	e062      	b.n	8005e4c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d86:	4b38      	ldr	r3, [pc, #224]	; (8005e68 <USBD_SetConfig+0x118>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01a      	beq.n	8005dc4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005d8e:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <USBD_SetConfig+0x118>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005da0:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <USBD_SetConfig+0x118>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff f9f3 	bl	8005192 <USBD_SetClassConfig>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d104      	bne.n	8005dbc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f931 	bl	800601c <USBD_CtlError>
            return;
 8005dba:	e052      	b.n	8005e62 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9f5 	bl	80061ac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005dc2:	e04e      	b.n	8005e62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f9f1 	bl	80061ac <USBD_CtlSendStatus>
        break;
 8005dca:	e04a      	b.n	8005e62 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005dcc:	4b26      	ldr	r3, [pc, #152]	; (8005e68 <USBD_SetConfig+0x118>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d112      	bne.n	8005dfa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005ddc:	4b22      	ldr	r3, [pc, #136]	; (8005e68 <USBD_SetConfig+0x118>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005de6:	4b20      	ldr	r3, [pc, #128]	; (8005e68 <USBD_SetConfig+0x118>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff f9ef 	bl	80051d0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9da 	bl	80061ac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005df8:	e033      	b.n	8005e62 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <USBD_SetConfig+0x118>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d01d      	beq.n	8005e44 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff f9dd 	bl	80051d0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <USBD_SetConfig+0x118>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e20:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <USBD_SetConfig+0x118>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff f9b3 	bl	8005192 <USBD_SetClassConfig>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d104      	bne.n	8005e3c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8f1 	bl	800601c <USBD_CtlError>
            return;
 8005e3a:	e012      	b.n	8005e62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f9b5 	bl	80061ac <USBD_CtlSendStatus>
        break;
 8005e42:	e00e      	b.n	8005e62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f9b1 	bl	80061ac <USBD_CtlSendStatus>
        break;
 8005e4a:	e00a      	b.n	8005e62 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8e4 	bl	800601c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e54:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <USBD_SetConfig+0x118>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff f9b8 	bl	80051d0 <USBD_ClrClassConfig>
        break;
 8005e60:	bf00      	nop
    }
  }
}
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	200001a6 	.word	0x200001a6

08005e6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	88db      	ldrh	r3, [r3, #6]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d004      	beq.n	8005e88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8cb 	bl	800601c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e86:	e021      	b.n	8005ecc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	db17      	blt.n	8005ec2 <USBD_GetConfig+0x56>
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	dd02      	ble.n	8005e9c <USBD_GetConfig+0x30>
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d00b      	beq.n	8005eb2 <USBD_GetConfig+0x46>
 8005e9a:	e012      	b.n	8005ec2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f920 	bl	80060f0 <USBD_CtlSendData>
        break;
 8005eb0:	e00c      	b.n	8005ecc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f918 	bl	80060f0 <USBD_CtlSendData>
        break;
 8005ec0:	e004      	b.n	8005ecc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f8a9 	bl	800601c <USBD_CtlError>
        break;
 8005eca:	bf00      	nop
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d81e      	bhi.n	8005f28 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	88db      	ldrh	r3, [r3, #6]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d004      	beq.n	8005efc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f891 	bl	800601c <USBD_CtlError>
        break;
 8005efa:	e01a      	b.n	8005f32 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f043 0202 	orr.w	r2, r3, #2
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f8e5 	bl	80060f0 <USBD_CtlSendData>
      break;
 8005f26:	e004      	b.n	8005f32 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f876 	bl	800601c <USBD_CtlError>
      break;
 8005f30:	bf00      	nop
  }
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	885b      	ldrh	r3, [r3, #2]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d106      	bne.n	8005f5a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f929 	bl	80061ac <USBD_CtlSendStatus>
  }
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f72:	3b01      	subs	r3, #1
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d80b      	bhi.n	8005f90 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	885b      	ldrh	r3, [r3, #2]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d10c      	bne.n	8005f9a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f90f 	bl	80061ac <USBD_CtlSendStatus>
      }
      break;
 8005f8e:	e004      	b.n	8005f9a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f842 	bl	800601c <USBD_CtlError>
      break;
 8005f98:	e000      	b.n	8005f9c <USBD_ClrFeature+0x3a>
      break;
 8005f9a:	bf00      	nop
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	785a      	ldrb	r2, [r3, #1]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	3303      	adds	r3, #3
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	3305      	adds	r3, #5
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	4413      	add	r3, r2
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	3306      	adds	r3, #6
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	3307      	adds	r3, #7
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	b29b      	uxth	r3, r3
 800600a:	4413      	add	r3, r2
 800600c:	b29a      	uxth	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	80da      	strh	r2, [r3, #6]

}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006026:	2180      	movs	r1, #128	; 0x80
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fc4d 	bl	80068c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800602e:	2100      	movs	r1, #0
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fc49 	bl	80068c8 <USBD_LL_StallEP>
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b086      	sub	sp, #24
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d032      	beq.n	80060ba <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f834 	bl	80060c2 <USBD_GetLen>
 800605a:	4603      	mov	r3, r0
 800605c:	3301      	adds	r3, #1
 800605e:	b29b      	uxth	r3, r3
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006068:	7dfb      	ldrb	r3, [r7, #23]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	75fa      	strb	r2, [r7, #23]
 800606e:	461a      	mov	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4413      	add	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	7812      	ldrb	r2, [r2, #0]
 8006078:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	75fa      	strb	r2, [r7, #23]
 8006080:	461a      	mov	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4413      	add	r3, r2
 8006086:	2203      	movs	r2, #3
 8006088:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800608a:	e012      	b.n	80060b2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	60fa      	str	r2, [r7, #12]
 8006092:	7dfa      	ldrb	r2, [r7, #23]
 8006094:	1c51      	adds	r1, r2, #1
 8006096:	75f9      	strb	r1, [r7, #23]
 8006098:	4611      	mov	r1, r2
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	440a      	add	r2, r1
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	75fa      	strb	r2, [r7, #23]
 80060a8:	461a      	mov	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e8      	bne.n	800608c <USBD_GetString+0x4e>
    }
  }
}
 80060ba:	bf00      	nop
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80060ce:	e005      	b.n	80060dc <USBD_GetLen+0x1a>
  {
    len++;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	3301      	adds	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3301      	adds	r3, #1
 80060da:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f5      	bne.n	80060d0 <USBD_GetLen+0xe>
  }

  return len;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr

080060f0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2202      	movs	r2, #2
 8006102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	2100      	movs	r1, #0
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fc57 	bl	80069cc <USBD_LL_Transmit>

  return USBD_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	2100      	movs	r1, #0
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fc45 	bl	80069cc <USBD_LL_Transmit>

  return USBD_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2203      	movs	r2, #3
 800615e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006162:	88fa      	ldrh	r2, [r7, #6]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800616a:	88fa      	ldrh	r2, [r7, #6]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	2100      	movs	r1, #0
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fc4a 	bl	8006a12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	2100      	movs	r1, #0
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fc38 	bl	8006a12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2204      	movs	r2, #4
 80061b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80061bc:	2300      	movs	r3, #0
 80061be:	2200      	movs	r2, #0
 80061c0:	2100      	movs	r1, #0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fc02 	bl	80069cc <USBD_LL_Transmit>

  return USBD_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2205      	movs	r2, #5
 80061de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061e2:	2300      	movs	r3, #0
 80061e4:	2200      	movs	r2, #0
 80061e6:	2100      	movs	r1, #0
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fc12 	bl	8006a12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061fc:	2200      	movs	r2, #0
 80061fe:	4912      	ldr	r1, [pc, #72]	; (8006248 <MX_USB_DEVICE_Init+0x50>)
 8006200:	4812      	ldr	r0, [pc, #72]	; (800624c <MX_USB_DEVICE_Init+0x54>)
 8006202:	f7fe ff6c 	bl	80050de <USBD_Init>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800620c:	f7fa fa0e 	bl	800062c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006210:	490f      	ldr	r1, [pc, #60]	; (8006250 <MX_USB_DEVICE_Init+0x58>)
 8006212:	480e      	ldr	r0, [pc, #56]	; (800624c <MX_USB_DEVICE_Init+0x54>)
 8006214:	f7fe ff8e 	bl	8005134 <USBD_RegisterClass>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800621e:	f7fa fa05 	bl	800062c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006222:	490c      	ldr	r1, [pc, #48]	; (8006254 <MX_USB_DEVICE_Init+0x5c>)
 8006224:	4809      	ldr	r0, [pc, #36]	; (800624c <MX_USB_DEVICE_Init+0x54>)
 8006226:	f7fe febf 	bl	8004fa8 <USBD_CDC_RegisterInterface>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006230:	f7fa f9fc 	bl	800062c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006234:	4805      	ldr	r0, [pc, #20]	; (800624c <MX_USB_DEVICE_Init+0x54>)
 8006236:	f7fe ff96 	bl	8005166 <USBD_Start>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006240:	f7fa f9f4 	bl	800062c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006244:	bf00      	nop
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000134 	.word	0x20000134
 800624c:	2000049c 	.word	0x2000049c
 8006250:	20000020 	.word	0x20000020
 8006254:	20000124 	.word	0x20000124

08006258 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800625c:	2200      	movs	r2, #0
 800625e:	4905      	ldr	r1, [pc, #20]	; (8006274 <CDC_Init_FS+0x1c>)
 8006260:	4805      	ldr	r0, [pc, #20]	; (8006278 <CDC_Init_FS+0x20>)
 8006262:	f7fe feb7 	bl	8004fd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006266:	4905      	ldr	r1, [pc, #20]	; (800627c <CDC_Init_FS+0x24>)
 8006268:	4803      	ldr	r0, [pc, #12]	; (8006278 <CDC_Init_FS+0x20>)
 800626a:	f7fe fecc 	bl	8005006 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800626e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006270:	4618      	mov	r0, r3
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000b48 	.word	0x20000b48
 8006278:	2000049c 	.word	0x2000049c
 800627c:	20000760 	.word	0x20000760

08006280 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006284:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006286:	4618      	mov	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr
	...

08006290 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	6039      	str	r1, [r7, #0]
 800629a:	71fb      	strb	r3, [r7, #7]
 800629c:	4613      	mov	r3, r2
 800629e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	2b23      	cmp	r3, #35	; 0x23
 80062a4:	d84a      	bhi.n	800633c <CDC_Control_FS+0xac>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <CDC_Control_FS+0x1c>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	0800633d 	.word	0x0800633d
 80062b0:	0800633d 	.word	0x0800633d
 80062b4:	0800633d 	.word	0x0800633d
 80062b8:	0800633d 	.word	0x0800633d
 80062bc:	0800633d 	.word	0x0800633d
 80062c0:	0800633d 	.word	0x0800633d
 80062c4:	0800633d 	.word	0x0800633d
 80062c8:	0800633d 	.word	0x0800633d
 80062cc:	0800633d 	.word	0x0800633d
 80062d0:	0800633d 	.word	0x0800633d
 80062d4:	0800633d 	.word	0x0800633d
 80062d8:	0800633d 	.word	0x0800633d
 80062dc:	0800633d 	.word	0x0800633d
 80062e0:	0800633d 	.word	0x0800633d
 80062e4:	0800633d 	.word	0x0800633d
 80062e8:	0800633d 	.word	0x0800633d
 80062ec:	0800633d 	.word	0x0800633d
 80062f0:	0800633d 	.word	0x0800633d
 80062f4:	0800633d 	.word	0x0800633d
 80062f8:	0800633d 	.word	0x0800633d
 80062fc:	0800633d 	.word	0x0800633d
 8006300:	0800633d 	.word	0x0800633d
 8006304:	0800633d 	.word	0x0800633d
 8006308:	0800633d 	.word	0x0800633d
 800630c:	0800633d 	.word	0x0800633d
 8006310:	0800633d 	.word	0x0800633d
 8006314:	0800633d 	.word	0x0800633d
 8006318:	0800633d 	.word	0x0800633d
 800631c:	0800633d 	.word	0x0800633d
 8006320:	0800633d 	.word	0x0800633d
 8006324:	0800633d 	.word	0x0800633d
 8006328:	0800633d 	.word	0x0800633d
 800632c:	0800633d 	.word	0x0800633d
 8006330:	0800633d 	.word	0x0800633d
 8006334:	0800633d 	.word	0x0800633d
 8006338:	0800633d 	.word	0x0800633d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800633c:	bf00      	nop
  }

  return (USBD_OK);
 800633e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop

0800634c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4805      	ldr	r0, [pc, #20]	; (8006370 <CDC_Receive_FS+0x24>)
 800635a:	f7fe fe54 	bl	8005006 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800635e:	4804      	ldr	r0, [pc, #16]	; (8006370 <CDC_Receive_FS+0x24>)
 8006360:	f7fe fe93 	bl	800508a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006364:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	2000049c 	.word	0x2000049c

08006374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <CDC_Transmit_FS+0x48>)
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006396:	2301      	movs	r3, #1
 8006398:	e00b      	b.n	80063b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800639a:	887b      	ldrh	r3, [r7, #2]
 800639c:	461a      	mov	r2, r3
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4806      	ldr	r0, [pc, #24]	; (80063bc <CDC_Transmit_FS+0x48>)
 80063a2:	f7fe fe17 	bl	8004fd4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80063a6:	4805      	ldr	r0, [pc, #20]	; (80063bc <CDC_Transmit_FS+0x48>)
 80063a8:	f7fe fe40 	bl	800502c <USBD_CDC_TransmitPacket>
 80063ac:	4603      	mov	r3, r0
 80063ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	2000049c 	.word	0x2000049c

080063c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	6039      	str	r1, [r7, #0]
 80063ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2212      	movs	r2, #18
 80063d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80063d2:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000150 	.word	0x20000150

080063e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	6039      	str	r1, [r7, #0]
 80063ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2204      	movs	r2, #4
 80063f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80063f6:	4b03      	ldr	r3, [pc, #12]	; (8006404 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000164 	.word	0x20000164

08006408 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	6039      	str	r1, [r7, #0]
 8006412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d105      	bne.n	8006426 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	4907      	ldr	r1, [pc, #28]	; (800643c <USBD_FS_ProductStrDescriptor+0x34>)
 800641e:	4808      	ldr	r0, [pc, #32]	; (8006440 <USBD_FS_ProductStrDescriptor+0x38>)
 8006420:	f7ff fe0d 	bl	800603e <USBD_GetString>
 8006424:	e004      	b.n	8006430 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	4904      	ldr	r1, [pc, #16]	; (800643c <USBD_FS_ProductStrDescriptor+0x34>)
 800642a:	4805      	ldr	r0, [pc, #20]	; (8006440 <USBD_FS_ProductStrDescriptor+0x38>)
 800642c:	f7ff fe07 	bl	800603e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006430:	4b02      	ldr	r3, [pc, #8]	; (800643c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000f30 	.word	0x20000f30
 8006440:	08006c20 	.word	0x08006c20

08006444 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	4603      	mov	r3, r0
 800644c:	6039      	str	r1, [r7, #0]
 800644e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	4904      	ldr	r1, [pc, #16]	; (8006464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006454:	4804      	ldr	r0, [pc, #16]	; (8006468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006456:	f7ff fdf2 	bl	800603e <USBD_GetString>
  return USBD_StrDesc;
 800645a:	4b02      	ldr	r3, [pc, #8]	; (8006464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000f30 	.word	0x20000f30
 8006468:	08006c28 	.word	0x08006c28

0800646c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	6039      	str	r1, [r7, #0]
 8006476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	221a      	movs	r2, #26
 800647c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800647e:	f000 f843 	bl	8006508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006482:	4b02      	ldr	r3, [pc, #8]	; (800648c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000168 	.word	0x20000168

08006490 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	6039      	str	r1, [r7, #0]
 800649a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d105      	bne.n	80064ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	4907      	ldr	r1, [pc, #28]	; (80064c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80064a6:	4808      	ldr	r0, [pc, #32]	; (80064c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064a8:	f7ff fdc9 	bl	800603e <USBD_GetString>
 80064ac:	e004      	b.n	80064b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	4904      	ldr	r1, [pc, #16]	; (80064c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80064b2:	4805      	ldr	r0, [pc, #20]	; (80064c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064b4:	f7ff fdc3 	bl	800603e <USBD_GetString>
  }
  return USBD_StrDesc;
 80064b8:	4b02      	ldr	r3, [pc, #8]	; (80064c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000f30 	.word	0x20000f30
 80064c8:	08006c3c 	.word	0x08006c3c

080064cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	6039      	str	r1, [r7, #0]
 80064d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d105      	bne.n	80064ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	4907      	ldr	r1, [pc, #28]	; (8006500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064e2:	4808      	ldr	r0, [pc, #32]	; (8006504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064e4:	f7ff fdab 	bl	800603e <USBD_GetString>
 80064e8:	e004      	b.n	80064f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	4904      	ldr	r1, [pc, #16]	; (8006500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064ee:	4805      	ldr	r0, [pc, #20]	; (8006504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064f0:	f7ff fda5 	bl	800603e <USBD_GetString>
  }
  return USBD_StrDesc;
 80064f4:	4b02      	ldr	r3, [pc, #8]	; (8006500 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000f30 	.word	0x20000f30
 8006504:	08006c48 	.word	0x08006c48

08006508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800650e:	4b0f      	ldr	r3, [pc, #60]	; (800654c <Get_SerialNum+0x44>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <Get_SerialNum+0x48>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800651a:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <Get_SerialNum+0x4c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4413      	add	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800652e:	2208      	movs	r2, #8
 8006530:	4909      	ldr	r1, [pc, #36]	; (8006558 <Get_SerialNum+0x50>)
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f814 	bl	8006560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006538:	2204      	movs	r2, #4
 800653a:	4908      	ldr	r1, [pc, #32]	; (800655c <Get_SerialNum+0x54>)
 800653c:	68b8      	ldr	r0, [r7, #8]
 800653e:	f000 f80f 	bl	8006560 <IntToUnicode>
  }
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	1ffff7e8 	.word	0x1ffff7e8
 8006550:	1ffff7ec 	.word	0x1ffff7ec
 8006554:	1ffff7f0 	.word	0x1ffff7f0
 8006558:	2000016a 	.word	0x2000016a
 800655c:	2000017a 	.word	0x2000017a

08006560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	4613      	mov	r3, r2
 800656c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006572:	2300      	movs	r3, #0
 8006574:	75fb      	strb	r3, [r7, #23]
 8006576:	e027      	b.n	80065c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	0f1b      	lsrs	r3, r3, #28
 800657c:	2b09      	cmp	r3, #9
 800657e:	d80b      	bhi.n	8006598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	0f1b      	lsrs	r3, r3, #28
 8006584:	b2da      	uxtb	r2, r3
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	4619      	mov	r1, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	440b      	add	r3, r1
 8006590:	3230      	adds	r2, #48	; 0x30
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e00a      	b.n	80065ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	0f1b      	lsrs	r3, r3, #28
 800659c:	b2da      	uxtb	r2, r3
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	4619      	mov	r1, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	440b      	add	r3, r1
 80065a8:	3237      	adds	r2, #55	; 0x37
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	3301      	adds	r3, #1
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	4413      	add	r3, r2
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	3301      	adds	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
 80065c8:	7dfa      	ldrb	r2, [r7, #23]
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d3d3      	bcc.n	8006578 <IntToUnicode+0x18>
  }
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr
	...

080065dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a0d      	ldr	r2, [pc, #52]	; (8006620 <HAL_PCD_MspInit+0x44>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d113      	bne.n	8006616 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80065ee:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <HAL_PCD_MspInit+0x48>)
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	4a0c      	ldr	r2, [pc, #48]	; (8006624 <HAL_PCD_MspInit+0x48>)
 80065f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065f8:	61d3      	str	r3, [r2, #28]
 80065fa:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <HAL_PCD_MspInit+0x48>)
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006606:	2200      	movs	r2, #0
 8006608:	2100      	movs	r1, #0
 800660a:	2014      	movs	r0, #20
 800660c:	f7fa fd4f 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006610:	2014      	movs	r0, #20
 8006612:	f7fa fd68 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40005c00 	.word	0x40005c00
 8006624:	40021000 	.word	0x40021000

08006628 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f7fe fdd9 	bl	80051f6 <USBD_LL_SetupStage>
}
 8006644:	bf00      	nop
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	015b      	lsls	r3, r3, #5
 8006664:	4413      	add	r3, r2
 8006666:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	4619      	mov	r1, r3
 8006670:	f7fe fe0c 	bl	800528c <USBD_LL_DataOutStage>
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	015b      	lsls	r3, r3, #5
 8006694:	4413      	add	r3, r2
 8006696:	333c      	adds	r3, #60	; 0x3c
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	4619      	mov	r1, r3
 800669e:	f7fe fe66 	bl	800536e <USBD_LL_DataInStage>
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe ff76 	bl	80055aa <USBD_LL_SOF>
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80066ce:	2301      	movs	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d001      	beq.n	80066de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80066da:	f7f9 ffa7 	bl	800062c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066e4:	7bfa      	ldrb	r2, [r7, #15]
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe ff26 	bl	800553a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe fedf 	bl	80054b8 <USBD_LL_Reset>
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe ff20 	bl	8005558 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006720:	4b04      	ldr	r3, [pc, #16]	; (8006734 <HAL_PCD_SuspendCallback+0x30>)
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	4a03      	ldr	r2, [pc, #12]	; (8006734 <HAL_PCD_SuspendCallback+0x30>)
 8006726:	f043 0306 	orr.w	r3, r3, #6
 800672a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	e000ed00 	.word	0xe000ed00

08006738 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe ff1a 	bl	8005580 <USBD_LL_Resume>
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800675c:	4a28      	ldr	r2, [pc, #160]	; (8006800 <USBD_LL_Init+0xac>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a26      	ldr	r2, [pc, #152]	; (8006800 <USBD_LL_Init+0xac>)
 8006768:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800676c:	4b24      	ldr	r3, [pc, #144]	; (8006800 <USBD_LL_Init+0xac>)
 800676e:	4a25      	ldr	r2, [pc, #148]	; (8006804 <USBD_LL_Init+0xb0>)
 8006770:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006772:	4b23      	ldr	r3, [pc, #140]	; (8006800 <USBD_LL_Init+0xac>)
 8006774:	2208      	movs	r2, #8
 8006776:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006778:	4b21      	ldr	r3, [pc, #132]	; (8006800 <USBD_LL_Init+0xac>)
 800677a:	2202      	movs	r2, #2
 800677c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <USBD_LL_Init+0xac>)
 8006780:	2200      	movs	r2, #0
 8006782:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006784:	4b1e      	ldr	r3, [pc, #120]	; (8006800 <USBD_LL_Init+0xac>)
 8006786:	2200      	movs	r2, #0
 8006788:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800678a:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <USBD_LL_Init+0xac>)
 800678c:	2200      	movs	r2, #0
 800678e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006790:	481b      	ldr	r0, [pc, #108]	; (8006800 <USBD_LL_Init+0xac>)
 8006792:	f7fa fedb 	bl	800154c <HAL_PCD_Init>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800679c:	f7f9 ff46 	bl	800062c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067a6:	2318      	movs	r3, #24
 80067a8:	2200      	movs	r2, #0
 80067aa:	2100      	movs	r1, #0
 80067ac:	f7fb fd74 	bl	8002298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067b6:	2358      	movs	r3, #88	; 0x58
 80067b8:	2200      	movs	r2, #0
 80067ba:	2180      	movs	r1, #128	; 0x80
 80067bc:	f7fb fd6c 	bl	8002298 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067c6:	23c0      	movs	r3, #192	; 0xc0
 80067c8:	2200      	movs	r2, #0
 80067ca:	2181      	movs	r1, #129	; 0x81
 80067cc:	f7fb fd64 	bl	8002298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80067da:	2200      	movs	r2, #0
 80067dc:	2101      	movs	r1, #1
 80067de:	f7fb fd5b 	bl	8002298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ec:	2200      	movs	r2, #0
 80067ee:	2182      	movs	r1, #130	; 0x82
 80067f0:	f7fb fd52 	bl	8002298 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20001130 	.word	0x20001130
 8006804:	40005c00 	.word	0x40005c00

08006808 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800681e:	4618      	mov	r0, r3
 8006820:	f7fa ff75 	bl	800170e <HAL_PCD_Start>
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f948 	bl	8006ac0 <USBD_Get_USB_Status>
 8006830:	4603      	mov	r3, r0
 8006832:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006834:	7bbb      	ldrb	r3, [r7, #14]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	461a      	mov	r2, r3
 800684c:	4603      	mov	r3, r0
 800684e:	70fb      	strb	r3, [r7, #3]
 8006850:	460b      	mov	r3, r1
 8006852:	70bb      	strb	r3, [r7, #2]
 8006854:	4613      	mov	r3, r2
 8006856:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006866:	78bb      	ldrb	r3, [r7, #2]
 8006868:	883a      	ldrh	r2, [r7, #0]
 800686a:	78f9      	ldrb	r1, [r7, #3]
 800686c:	f7fb f8a8 	bl	80019c0 <HAL_PCD_EP_Open>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f922 	bl	8006ac0 <USBD_Get_USB_Status>
 800687c:	4603      	mov	r3, r0
 800687e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006880:	7bbb      	ldrb	r3, [r7, #14]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fb f8e9 	bl	8001a80 <HAL_PCD_EP_Close>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 f903 	bl	8006ac0 <USBD_Get_USB_Status>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80068be:	7bbb      	ldrb	r3, [r7, #14]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068e2:	78fa      	ldrb	r2, [r7, #3]
 80068e4:	4611      	mov	r1, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fb f993 	bl	8001c12 <HAL_PCD_EP_SetStall>
 80068ec:	4603      	mov	r3, r0
 80068ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 f8e4 	bl	8006ac0 <USBD_Get_USB_Status>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006920:	78fa      	ldrb	r2, [r7, #3]
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f7fb f9ce 	bl	8001cc6 <HAL_PCD_EP_ClrStall>
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 f8c5 	bl	8006ac0 <USBD_Get_USB_Status>
 8006936:	4603      	mov	r3, r0
 8006938:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800693a:	7bbb      	ldrb	r3, [r7, #14]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006956:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800695c:	2b00      	cmp	r3, #0
 800695e:	da08      	bge.n	8006972 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	015b      	lsls	r3, r3, #5
 800696a:	4413      	add	r3, r2
 800696c:	332a      	adds	r3, #42	; 0x2a
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	e008      	b.n	8006984 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	015b      	lsls	r3, r3, #5
 800697c:	4413      	add	r3, r2
 800697e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006982:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr

0800698e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069a8:	78fa      	ldrb	r2, [r7, #3]
 80069aa:	4611      	mov	r1, r2
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fa ffe2 	bl	8001976 <HAL_PCD_SetAddress>
 80069b2:	4603      	mov	r3, r0
 80069b4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 f881 	bl	8006ac0 <USBD_Get_USB_Status>
 80069be:	4603      	mov	r3, r0
 80069c0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	461a      	mov	r2, r3
 80069d8:	460b      	mov	r3, r1
 80069da:	72fb      	strb	r3, [r7, #11]
 80069dc:	4613      	mov	r3, r2
 80069de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069ee:	893b      	ldrh	r3, [r7, #8]
 80069f0:	7af9      	ldrb	r1, [r7, #11]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	f7fb f8d4 	bl	8001ba0 <HAL_PCD_EP_Transmit>
 80069f8:	4603      	mov	r3, r0
 80069fa:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f85e 	bl	8006ac0 <USBD_Get_USB_Status>
 8006a04:	4603      	mov	r3, r0
 8006a06:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006a08:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b086      	sub	sp, #24
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	460b      	mov	r3, r1
 8006a20:	72fb      	strb	r3, [r7, #11]
 8006a22:	4613      	mov	r3, r2
 8006a24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a34:	893b      	ldrh	r3, [r7, #8]
 8006a36:	7af9      	ldrb	r1, [r7, #11]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	f7fb f863 	bl	8001b04 <HAL_PCD_EP_Receive>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 f83b 	bl	8006ac0 <USBD_Get_USB_Status>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006a4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fb f882 	bl	8001b78 <HAL_PCD_EP_GetRxCount>
 8006a74:	4603      	mov	r3, r0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006a88:	4b02      	ldr	r3, [pc, #8]	; (8006a94 <USBD_static_malloc+0x14>)
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr
 8006a94:	200001a8 	.word	0x200001a8

08006a98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]

}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr

08006ac0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d817      	bhi.n	8006b04 <USBD_Get_USB_Status+0x44>
 8006ad4:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <USBD_Get_USB_Status+0x1c>)
 8006ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ada:	bf00      	nop
 8006adc:	08006aed 	.word	0x08006aed
 8006ae0:	08006af3 	.word	0x08006af3
 8006ae4:	08006af9 	.word	0x08006af9
 8006ae8:	08006aff 	.word	0x08006aff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]
    break;
 8006af0:	e00b      	b.n	8006b0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006af2:	2302      	movs	r3, #2
 8006af4:	73fb      	strb	r3, [r7, #15]
    break;
 8006af6:	e008      	b.n	8006b0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
    break;
 8006afc:	e005      	b.n	8006b0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006afe:	2302      	movs	r3, #2
 8006b00:	73fb      	strb	r3, [r7, #15]
    break;
 8006b02:	e002      	b.n	8006b0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006b04:	2302      	movs	r3, #2
 8006b06:	73fb      	strb	r3, [r7, #15]
    break;
 8006b08:	bf00      	nop
  }
  return usb_status;
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	2500      	movs	r5, #0
 8006b1c:	4e0c      	ldr	r6, [pc, #48]	; (8006b50 <__libc_init_array+0x38>)
 8006b1e:	4c0d      	ldr	r4, [pc, #52]	; (8006b54 <__libc_init_array+0x3c>)
 8006b20:	1ba4      	subs	r4, r4, r6
 8006b22:	10a4      	asrs	r4, r4, #2
 8006b24:	42a5      	cmp	r5, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	f000 f82e 	bl	8006b88 <_init>
 8006b2c:	2500      	movs	r5, #0
 8006b2e:	4e0a      	ldr	r6, [pc, #40]	; (8006b58 <__libc_init_array+0x40>)
 8006b30:	4c0a      	ldr	r4, [pc, #40]	; (8006b5c <__libc_init_array+0x44>)
 8006b32:	1ba4      	subs	r4, r4, r6
 8006b34:	10a4      	asrs	r4, r4, #2
 8006b36:	42a5      	cmp	r5, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b40:	4798      	blx	r3
 8006b42:	3501      	adds	r5, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b4a:	4798      	blx	r3
 8006b4c:	3501      	adds	r5, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08006c68 	.word	0x08006c68
 8006b54:	08006c68 	.word	0x08006c68
 8006b58:	08006c68 	.word	0x08006c68
 8006b5c:	08006c6c 	.word	0x08006c6c

08006b60 <memcpy>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	1e43      	subs	r3, r0, #1
 8006b64:	440a      	add	r2, r1
 8006b66:	4291      	cmp	r1, r2
 8006b68:	d100      	bne.n	8006b6c <memcpy+0xc>
 8006b6a:	bd10      	pop	{r4, pc}
 8006b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b74:	e7f7      	b.n	8006b66 <memcpy+0x6>

08006b76 <memset>:
 8006b76:	4603      	mov	r3, r0
 8006b78:	4402      	add	r2, r0
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d100      	bne.n	8006b80 <memset+0xa>
 8006b7e:	4770      	bx	lr
 8006b80:	f803 1b01 	strb.w	r1, [r3], #1
 8006b84:	e7f9      	b.n	8006b7a <memset+0x4>
	...

08006b88 <_init>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr

08006b94 <_fini>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	bf00      	nop
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr
