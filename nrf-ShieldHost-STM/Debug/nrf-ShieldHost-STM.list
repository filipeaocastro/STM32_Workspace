
nrf-ShieldHost-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000682c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800699c  0800699c  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800699c  0800699c  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800699c  0800699c  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080069a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001340  20000188  08006b2c  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c8  08006b2c  000214c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e0d  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003014  00000000  00000000  00035fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  00038fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  00039ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b38  00000000  00000000  0003a890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d371  00000000  00000000  000513c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f5fd  00000000  00000000  0005e739  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdd36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003398  00000000  00000000  000cddb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08006920 	.word	0x08006920

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08006920 	.word	0x08006920

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b093      	sub	sp, #76	; 0x4c
 8000150:	af12      	add	r7, sp, #72	; 0x48
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe83 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f841 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8d1 	bl	8000300 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f899 	bl	8000294 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f005 ff01 	bl	8005f68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  nRFint_guard = 0;		// Do not execute interruptions until the nRF initalization is complete
 8000166:	4b16      	ldr	r3, [pc, #88]	; (80001c0 <main+0x74>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]
  rf_tx_buffer_count = 0;
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <main+0x78>)
 800016e:	2200      	movs	r2, #0
 8000170:	601a      	str	r2, [r3, #0]
  rf_tx_SendMsg = 0;
 8000172:	4b15      	ldr	r3, [pc, #84]	; (80001c8 <main+0x7c>)
 8000174:	2200      	movs	r2, #0
 8000176:	701a      	strb	r2, [r3, #0]
  rfBridgeON = 0;   	// Don't transfer data via RF until the Handshake HOST <-> STM is complete
 8000178:	4b14      	ldr	r3, [pc, #80]	; (80001cc <main+0x80>)
 800017a:	2200      	movs	r2, #0
 800017c:	701a      	strb	r2, [r3, #0]

  nRF24L01_STM32(hspi1); // Set the SPI parameters for the nRF library
 800017e:	4c14      	ldr	r4, [pc, #80]	; (80001d0 <main+0x84>)
 8000180:	4668      	mov	r0, sp
 8000182:	f104 0310 	add.w	r3, r4, #16
 8000186:	2248      	movs	r2, #72	; 0x48
 8000188:	4619      	mov	r1, r3
 800018a:	f006 fbb5 	bl	80068f8 <memcpy>
 800018e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000192:	f000 fa69 	bl	8000668 <nRF24L01_STM32>

  // Initiate the nRF with the channel, data rate and tx power parameters
  init(nRF_Canal, RF_DATA_RATE_1Mbps, RF_TX_POWER_0dBm, autoAck_enabled);
 8000196:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <main+0x88>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	2203      	movs	r2, #3
 800019c:	2100      	movs	r1, #0
 800019e:	205c      	movs	r0, #92	; 0x5c
 80001a0:	f000 fa7a 	bl	8000698 <init>
  rx_newPayload = 0;
 80001a4:	4b0c      	ldr	r3, [pc, #48]	; (80001d8 <main+0x8c>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	701a      	strb	r2, [r3, #0]
  nRFint_guard = 1; //Liberar execução da interrupção externa
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <main+0x74>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  get_Msg_fromHost();	// Read the messages from the host received via USB
 80001b0:	f000 f96e 	bl	8000490 <get_Msg_fromHost>


	  tx_task();	// If there is message from the Host, read correctly by get_Msg_fromHost(), it's
 80001b4:	f000 f9d6 	bl	8000564 <tx_task>
	  	  	  	  	//  sent to the MIP via RF

	  rx_task();  	// Verifies if package arrived from the MIP (via RF) and send it to the Host via COM port.
 80001b8:	f000 f94a 	bl	8000450 <rx_task>
	  get_Msg_fromHost();	// Read the messages from the host received via USB
 80001bc:	e7f8      	b.n	80001b0 <main+0x64>
 80001be:	bf00      	nop
 80001c0:	200001c4 	.word	0x200001c4
 80001c4:	200002c8 	.word	0x200002c8
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	200002cd 	.word	0x200002cd
 80001d0:	2000056c 	.word	0x2000056c
 80001d4:	20000000 	.word	0x20000000
 80001d8:	200001c6 	.word	0x200001c6

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b094      	sub	sp, #80	; 0x50
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f006 fb8f 	bl	800690e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020c:	2301      	movs	r3, #1
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000214:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021e:	2302      	movs	r3, #2
 8000220:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000228:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800022c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	4618      	mov	r0, r3
 8000234:	f002 f828 	bl	8002288 <HAL_RCC_OscConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800023e:	f000 fa0d 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000242:	230f      	movs	r3, #15
 8000244:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000252:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2101      	movs	r1, #1
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fa92 	bl	8002788 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800026a:	f000 f9f7 	bl	800065c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800026e:	2310      	movs	r3, #16
 8000270:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000276:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fbee 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000286:	f000 f9e9 	bl	800065c <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3750      	adds	r7, #80	; 0x50
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <MX_SPI1_Init+0x64>)
 800029a:	4a18      	ldr	r2, [pc, #96]	; (80002fc <MX_SPI1_Init+0x68>)
 800029c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800029e:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002c8:	2210      	movs	r2, #16
 80002ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002e0:	220a      	movs	r2, #10
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002e6:	f002 fc6f 	bl	8002bc8 <HAL_SPI_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002f0:	f000 f9b4 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	2000056c 	.word	0x2000056c
 80002fc:	40013000 	.word	0x40013000

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b37      	ldr	r3, [pc, #220]	; (80003f4 <MX_GPIO_Init+0xf4>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a36      	ldr	r2, [pc, #216]	; (80003f4 <MX_GPIO_Init+0xf4>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b34      	ldr	r3, [pc, #208]	; (80003f4 <MX_GPIO_Init+0xf4>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032c:	4b31      	ldr	r3, [pc, #196]	; (80003f4 <MX_GPIO_Init+0xf4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a30      	ldr	r2, [pc, #192]	; (80003f4 <MX_GPIO_Init+0xf4>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b2e      	ldr	r3, [pc, #184]	; (80003f4 <MX_GPIO_Init+0xf4>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0320 	and.w	r3, r3, #32
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000344:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <MX_GPIO_Init+0xf4>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a2a      	ldr	r2, [pc, #168]	; (80003f4 <MX_GPIO_Init+0xf4>)
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <MX_GPIO_Init+0xf4>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0304 	and.w	r3, r3, #4
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <MX_GPIO_Init+0xf4>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a24      	ldr	r2, [pc, #144]	; (80003f4 <MX_GPIO_Init+0xf4>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <MX_GPIO_Init+0xf4>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0308 	and.w	r3, r3, #8
 8000370:	603b      	str	r3, [r7, #0]
 8000372:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037a:	481f      	ldr	r0, [pc, #124]	; (80003f8 <MX_GPIO_Init+0xf8>)
 800037c:	f001 f85a 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_CE_Pin|RF_CSN_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2118      	movs	r1, #24
 8000384:	481d      	ldr	r0, [pc, #116]	; (80003fc <MX_GPIO_Init+0xfc>)
 8000386:	f001 f855 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800038a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000390:	2301      	movs	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	2302      	movs	r3, #2
 800039a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4815      	ldr	r0, [pc, #84]	; (80003f8 <MX_GPIO_Init+0xf8>)
 80003a4:	f000 feec 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CE_Pin RF_CSN_Pin */
  GPIO_InitStruct.Pin = RF_CE_Pin|RF_CSN_Pin;
 80003a8:	2318      	movs	r3, #24
 80003aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480f      	ldr	r0, [pc, #60]	; (80003fc <MX_GPIO_Init+0xfc>)
 80003c0:	f000 fede 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 80003c4:	2301      	movs	r3, #1
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <MX_GPIO_Init+0x100>)
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	480b      	ldr	r0, [pc, #44]	; (8000404 <MX_GPIO_Init+0x104>)
 80003d8:	f000 fed2 	bl	8001180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003dc:	2200      	movs	r2, #0
 80003de:	2100      	movs	r1, #0
 80003e0:	2006      	movs	r0, #6
 80003e2:	f000 fe96 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003e6:	2006      	movs	r0, #6
 80003e8:	f000 feaf 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 80003ec:	bf00      	nop
 80003ee:	3720      	adds	r7, #32
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40011000 	.word	0x40011000
 80003fc:	40010800 	.word	0x40010800
 8000400:	10210000 	.word	0x10210000
 8000404:	40010c00 	.word	0x40010c00

08000408 <HAL_GPIO_EXTI_Callback>:
/**
 * Função de callback chamada toda vez que ocorre ocorre uma interrupção externa (FALLING) no pino IRQ do nRF.
 * Caso o nRFint_guard permita, ela salva o conteúdo recebido pelo RF, salva no rx_buf e ativa a flag rx_newPayload.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == RF_IRQ_Pin)
 8000412:	88fb      	ldrh	r3, [r7, #6]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d10d      	bne.n	8000434 <HAL_GPIO_EXTI_Callback+0x2c>
  {
	  // As interrupções já podem ser tratadas?
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041c:	4807      	ldr	r0, [pc, #28]	; (800043c <HAL_GPIO_EXTI_Callback+0x34>)
 800041e:	f001 f821 	bl	8001464 <HAL_GPIO_TogglePin>
	  if(nRFint_guard > 0)
 8000422:	4b07      	ldr	r3, [pc, #28]	; (8000440 <HAL_GPIO_EXTI_Callback+0x38>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d004      	beq.n	8000434 <HAL_GPIO_EXTI_Callback+0x2c>
		  // Salva o conteúdo em rx_buf, a qte de bytes em rx_payloadWidth e ativa a flag rx_newPayload.
		  RF_IRQ(rx_buf, &rx_payloadWidth, &rx_newPayload);
 800042a:	4a06      	ldr	r2, [pc, #24]	; (8000444 <HAL_GPIO_EXTI_Callback+0x3c>)
 800042c:	4906      	ldr	r1, [pc, #24]	; (8000448 <HAL_GPIO_EXTI_Callback+0x40>)
 800042e:	4807      	ldr	r0, [pc, #28]	; (800044c <HAL_GPIO_EXTI_Callback+0x44>)
 8000430:	f000 fb62 	bl	8000af8 <RF_IRQ>
  }
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40011000 	.word	0x40011000
 8000440:	200001c4 	.word	0x200001c4
 8000444:	200001c6 	.word	0x200001c6
 8000448:	200001c5 	.word	0x200001c5
 800044c:	2000054c 	.word	0x2000054c

08000450 <rx_task>:
/**
 * Verifica se algum pacote foi recebido pela interrupção e envia ao Host.
 */
void rx_task()
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    //Verificar se chegou (recebeu) um novo pacote pelo canal RF.
    //(O MIP enviou um pacote para o HOST).
    if (rx_newPayload > 0)  //newPayload setada em IRQ de chegada de novo pacote (RX)
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <rx_task+0x34>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d010      	beq.n	800047e <rx_task+0x2e>
    {

        rx_newPayload = 0; //sdinalizar payload recebida
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <rx_task+0x34>)
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]

        if(rx_payloadWidth > 0) //Se a interrupção foi gerado por algum ruído etc, não teremos dados no payload
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <rx_task+0x38>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d009      	beq.n	800047e <rx_task+0x2e>
        {
          //Enviar pacote recebido para o código do HOST (Visual Studio) via serial COMM (USB)

        	CDC_Transmit_FS(rx_buf, rx_payloadWidth);
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <rx_task+0x38>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	b29b      	uxth	r3, r3
 8000470:	4619      	mov	r1, r3
 8000472:	4806      	ldr	r0, [pc, #24]	; (800048c <rx_task+0x3c>)
 8000474:	f005 fe4a 	bl	800610c <CDC_Transmit_FS>
        	HAL_Delay(10);
 8000478:	200a      	movs	r0, #10
 800047a:	f000 fd51 	bl	8000f20 <HAL_Delay>
        }

    }
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200001c6 	.word	0x200001c6
 8000488:	200001c5 	.word	0x200001c5
 800048c:	2000054c 	.word	0x2000054c

08000490 <get_Msg_fromHost>:
 * it is done in this function and it activates the rx_tx_SendMsg flag that allows redirectioning the messages from
 * the nRF to the Host. If the handshake its already been done, it reads the message from the host (ended with '\0')
 * via COM port and puts it in the RF transmission buffer to the MIP.
 */
void get_Msg_fromHost()
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0

    // The rx_newData variable is modified in the callback function called when new data
	//  comes through the serial port (CDC_Receive_FS)

    //Se não estiver enviando mensagem do Buffer TX para o HOST:
    if ((rx_newData == 1) && (rf_tx_SendMsg == 0))
 8000496:	4b2e      	ldr	r3, [pc, #184]	; (8000550 <get_Msg_fromHost+0xc0>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d154      	bne.n	8000548 <get_Msg_fromHost+0xb8>
 800049e:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <get_Msg_fromHost+0xc4>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d150      	bne.n	8000548 <get_Msg_fromHost+0xb8>
    {
    	int i, rc;
    	rx_newData = 0;
 80004a6:	4b2a      	ldr	r3, [pc, #168]	; (8000550 <get_Msg_fromHost+0xc0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
    	//memcpy(rf_tx_buffer, buf, len); // Salva os dados do vetor buf em rf_tx_buffer
    	//rf_tx_buffer_count = len;		// Salva a qte de bytes de len em rf_tx_buffer_count

    	// Pega o último byte de rf_tx_buffer e salva em rc
        rc = rf_tx_buffer[rf_tx_buffer_count - 1];
 80004ac:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <get_Msg_fromHost+0xc8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	4a2a      	ldr	r2, [pc, #168]	; (800055c <get_Msg_fromHost+0xcc>)
 80004b4:	5cd3      	ldrb	r3, [r2, r3]
 80004b6:	603b      	str	r3, [r7, #0]

        //O último caractere (rc) é o indicador de final de mensagem ('\0')?
        if (rc == endMsgChar)
 80004b8:	2300      	movs	r3, #0
 80004ba:	461a      	mov	r2, r3
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	4293      	cmp	r3, r2
 80004c0:	d142      	bne.n	8000548 <get_Msg_fromHost+0xb8>
        {

            //A mensagem termina com '\0' -- terminador de mensagens enviadas pelo HOST;

            //Estamos em fase de handshake initial Host <-> STM?
            if(rfBridgeON)
 80004c2:	4b27      	ldr	r3, [pc, #156]	; (8000560 <get_Msg_fromHost+0xd0>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d003      	beq.n	80004d2 <get_Msg_fromHost+0x42>
            	//CDC_Transmit_FS(rf_tx_buffer, rf_tx_buffer_count);
				//HAL_Delay(10);
              //NÃO - Arduino é apenas um ponte entre HOST e Transceiver RF.
              //Portanto, o que chega ao uC deve ser retransmitido ao MIP via RF.
              // ==> Sinalizar execução do estado para transmissão desta msg para o MIP via RF.
              rf_tx_SendMsg = 1;
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <get_Msg_fromHost+0xc4>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	701a      	strb	r2, [r3, #0]
              return;
 80004d0:	e03a      	b.n	8000548 <get_Msg_fromHost+0xb8>
                //      2 - Ao receber o primeiro MIPCOM_READY ("RDY") o STM retorna pela COM para o HOST "RDYOK" - O Host irá
                //          ler ou tentar ler esta mensagem (que pode estar corrompida ou nem mesmo chegar ao Host (C#).
                //
                //Neste primeiro momento, a mensagem em rf_tx_buffer pode conter apenas lixo, conter a mensagem com lixo antes de 'RDY'
                //ou conter apenas "RDY".
                if(rf_tx_buffer_count > 4) //Se conter mais que 4 elementos ['R','D','Y','\0'] remover elementos excedentes no inicio.
 80004d2:	4b21      	ldr	r3, [pc, #132]	; (8000558 <get_Msg_fromHost+0xc8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	dd17      	ble.n	800050a <get_Msg_fromHost+0x7a>
                {
                    for(i = 0; i < 4; i++)
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	e00e      	b.n	80004fe <get_Msg_fromHost+0x6e>
                      rf_tx_buffer[i] = rf_tx_buffer[(rf_tx_buffer_count-4) + i];
 80004e0:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <get_Msg_fromHost+0xc8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	1f1a      	subs	r2, r3, #4
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <get_Msg_fromHost+0xcc>)
 80004ec:	5cd1      	ldrb	r1, [r2, r3]
 80004ee:	4a1b      	ldr	r2, [pc, #108]	; (800055c <get_Msg_fromHost+0xcc>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	460a      	mov	r2, r1
 80004f6:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < 4; i++)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3301      	adds	r3, #1
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b03      	cmp	r3, #3
 8000502:	dded      	ble.n	80004e0 <get_Msg_fromHost+0x50>
                    rf_tx_buffer_count = 4;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <get_Msg_fromHost+0xc8>)
 8000506:	2204      	movs	r2, #4
 8000508:	601a      	str	r2, [r3, #0]
                }
                //A mensagem é "RDY\0" ?
                if( (rf_tx_buffer[0] == 'R') && (rf_tx_buffer[1] == 'D') && (rf_tx_buffer[2] == 'Y') )
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <get_Msg_fromHost+0xcc>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b52      	cmp	r3, #82	; 0x52
 8000510:	d114      	bne.n	800053c <get_Msg_fromHost+0xac>
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <get_Msg_fromHost+0xcc>)
 8000514:	785b      	ldrb	r3, [r3, #1]
 8000516:	2b44      	cmp	r3, #68	; 0x44
 8000518:	d110      	bne.n	800053c <get_Msg_fromHost+0xac>
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <get_Msg_fromHost+0xcc>)
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	2b59      	cmp	r3, #89	; 0x59
 8000520:	d10c      	bne.n	800053c <get_Msg_fromHost+0xac>
                {
                  //Ecoar para o Host

                	CDC_Transmit_FS(rf_tx_buffer, rf_tx_buffer_count);
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <get_Msg_fromHost+0xc8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b29b      	uxth	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <get_Msg_fromHost+0xcc>)
 800052c:	f005 fdee 	bl	800610c <CDC_Transmit_FS>
                	HAL_Delay(5);
 8000530:	2005      	movs	r0, #5
 8000532:	f000 fcf5 	bl	8000f20 <HAL_Delay>

                  rfBridgeON = 1; //De agora em diante, todos os bytes recebidos do Host serão enviados ao MIP por RF.
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <get_Msg_fromHost+0xd0>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
                  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
                }
                //Caso a mensagem tenha sido enviada para o Host (acima) ou não (deve ser ignorada):
                rf_tx_buffer_count = 0; //reiniciar leitura de novas mensagens;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <get_Msg_fromHost+0xc8>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
                rf_tx_SendMsg = 0; //a mensagem recebida não deve ser enviada por RF
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <get_Msg_fromHost+0xc4>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200002ce 	.word	0x200002ce
 8000554:	200002cc 	.word	0x200002cc
 8000558:	200002c8 	.word	0x200002c8
 800055c:	200001c8 	.word	0x200001c8
 8000560:	200002cd 	.word	0x200002cd

08000564 <tx_task>:

/**
 * Verifies if there is a message to be transmitted to the MIP via RF and sends it in packages of 32 bytes or less
 */
void tx_task()
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
  uint32_t data_size, index_atual;

  //Transmissão/Recepção de dados via RF liberada? E
  //Existe mensagem para ser enviada para o MIP via RF?
  if ((rfBridgeON == 0) || (rf_tx_SendMsg == 0))
 800056a:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <tx_task+0x8c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d039      	beq.n	80005e6 <tx_task+0x82>
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <tx_task+0x90>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d035      	beq.n	80005e6 <tx_task+0x82>
    return;
  data_size = rf_tx_buffer_count;
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <tx_task+0x94>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	60bb      	str	r3, [r7, #8]
  rf_tx_buffer_count = 0;
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <tx_task+0x94>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]

  index_atual = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  while (index_atual < data_size) // Verifica se todos os dados contidos já foram enviados
 800058a:	e024      	b.n	80005d6 <tx_task+0x72>
  {
	uint32_t actual_length = data_size - index_atual;
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	607b      	str	r3, [r7, #4]

    //Enquanto tiver algum para escrever
	// Caso a mensagem possua menos, de 32 bytes ele envia apenas os bytes necessários
    if (actual_length < 32)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b1f      	cmp	r3, #31
 8000598:	d810      	bhi.n	80005bc <tx_task+0x58>
    {
      //Se existem menos de 32 bytes para serem enviados
      rfSendBuffer(&rf_tx_buffer[index_atual], (uint8_t)actual_length);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <tx_task+0x98>)
 800059e:	4413      	add	r3, r2
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	b2d2      	uxtb	r2, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f82a 	bl	8000600 <rfSendBuffer>
      HAL_Delay(1); //Aguardar transmissão -- max 32 bytes
 80005ac:	2001      	movs	r0, #1
 80005ae:	f000 fcb7 	bl	8000f20 <HAL_Delay>
      index_atual += actual_length;
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	e00c      	b.n	80005d6 <tx_task+0x72>
    }
    else
    {
      //Se existem pelo menos 32 bytes para serem escritos, escreve um pacote
      rfSendBuffer(&rf_tx_buffer[index_atual], 32);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <tx_task+0x98>)
 80005c0:	4413      	add	r3, r2
 80005c2:	2120      	movs	r1, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f81b 	bl	8000600 <rfSendBuffer>
      HAL_Delay(1); //Aguardar transmissão -- max 32 bytes
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 fca8 	bl	8000f20 <HAL_Delay>
      index_atual += 32;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3320      	adds	r3, #32
 80005d4:	60fb      	str	r3, [r7, #12]
  while (index_atual < data_size) // Verifica se todos os dados contidos já foram enviados
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d3d6      	bcc.n	800058c <tx_task+0x28>
    }
  }

  //Sinalizar mensagem transmitida
  rf_tx_SendMsg = 0;
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <tx_task+0x90>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
 80005e4:	e000      	b.n	80005e8 <tx_task+0x84>
    return;
 80005e6:	bf00      	nop
}
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200002cd 	.word	0x200002cd
 80005f4:	200002cc 	.word	0x200002cc
 80005f8:	200002c8 	.word	0x200002c8
 80005fc:	200001c8 	.word	0x200001c8

08000600 <rfSendBuffer>:
 *
 * @param buffer2send	Buffer to be sent to the MIP via RF
 * @param buffer_size	Size of buffer to be sent to the MIP via RF
 */
void rfSendBuffer(uint8_t *buffer2send, uint8_t buffer_size)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
  uint8_t send_index = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
  // Escreve no buffer de saída (tx_buf) os bytes a serem enviados
  for (int i = 0; i < buffer_size; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	e00e      	b.n	8000634 <rfSendBuffer+0x34>
  {
    tx_buf[i] = buffer2send[i];
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	7819      	ldrb	r1, [r3, #0]
 800061e:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <rfSendBuffer+0x54>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4413      	add	r3, r2
 8000624:	460a      	mov	r2, r1
 8000626:	701a      	strb	r2, [r3, #0]
    send_index += 1;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	3301      	adds	r3, #1
 800062c:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < buffer_size; i++)
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	3301      	adds	r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	429a      	cmp	r2, r3
 800063a:	dbec      	blt.n	8000616 <rfSendBuffer+0x16>
  }
  //Enviar via RF
  TX_Mode(tx_buf, send_index, autoAck_enabled);
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <rfSendBuffer+0x58>)
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	4619      	mov	r1, r3
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <rfSendBuffer+0x54>)
 8000646:	f000 faab 	bl	8000ba0 <TX_Mode>
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200001a4 	.word	0x200001a4
 8000658:	20000000 	.word	0x20000000

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <nRF24L01_STM32>:
/**
 * Construtor using the default pins
 * @param spi its an SPI_HandleTypeDef object that contains the SPI informations
 **/
void nRF24L01_STM32(SPI_HandleTypeDef spi)
{
 8000668:	b084      	sub	sp, #16
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
 800066e:	f107 0c08 	add.w	ip, r7, #8
 8000672:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    _spi = spi;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <nRF24L01_STM32+0x2c>)
 8000678:	4618      	mov	r0, r3
 800067a:	f107 0108 	add.w	r1, r7, #8
 800067e:	2358      	movs	r3, #88	; 0x58
 8000680:	461a      	mov	r2, r3
 8000682:	f006 f939 	bl	80068f8 <memcpy>
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068e:	b004      	add	sp, #16
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	200004f4 	.word	0x200004f4

08000698 <init>:
 * @param rf_data_rate	The radio's data rate in Mbps
 * @param rf_pwr		The radio's power in dB
 */

void init(uint8_t rf_channel, rf_data_rate_t rf_data_rate, rf_tx_power_t rf_pwr, uint8_t autoAck_enable)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b087      	sub	sp, #28
 800069c:	af00      	add	r7, sp, #0
 800069e:	4604      	mov	r4, r0
 80006a0:	4608      	mov	r0, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	461a      	mov	r2, r3
 80006a6:	4623      	mov	r3, r4
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	4603      	mov	r3, r0
 80006ac:	71bb      	strb	r3, [r7, #6]
 80006ae:	460b      	mov	r3, r1
 80006b0:	717b      	strb	r3, [r7, #5]
 80006b2:	4613      	mov	r3, r2
 80006b4:	713b      	strb	r3, [r7, #4]
	// Setup values of the registers
	uint8_t rf_setup_byte;
	uint8_t setup_aw_value = 0x03;	//Setup of Address Widths ('11' - 5 bytes)
 80006b6:	2303      	movs	r3, #3
 80006b8:	75bb      	strb	r3, [r7, #22]
	uint8_t en_aa_value;			//Auto Acknowledgment Function on pipe 0
	uint8_t en_rxaddr_value = 0x01;	//Enabled RX Addresses (only pipe 0)
 80006ba:	2301      	movs	r3, #1
 80006bc:	753b      	strb	r3, [r7, #20]
	uint8_t setup_retr_value;		//Setup of Automatic Retransmission
	uint8_t dypnd_value = 0x01;		//Enable dynamic payload length
 80006be:	2301      	movs	r3, #1
 80006c0:	74bb      	strb	r3, [r7, #18]
	uint8_t feature_value = 0x05;	//Feature Register
 80006c2:	2305      	movs	r3, #5
 80006c4:	747b      	strb	r3, [r7, #17]
	uint8_t zero = 0x00;			// 0 (0) (2*5 - 11 + 1)
 80006c6:	2300      	movs	r3, #0
 80006c8:	743b      	strb	r3, [r7, #16]
	uint8_t nrf_status_value = 0x07;// Status
 80006ca:	2307      	movs	r3, #7
 80006cc:	73fb      	strb	r3, [r7, #15]

    //uint8_t addr_host[TX_RX_ADDR_WIDTH] = {0xE7,0xE7,0xE7,0xE7,0xE7};

    //Aguardar sequencia de power-up _ start do CI (~12ms) 
    HAL_Delay(20);
 80006ce:	2014      	movs	r0, #20
 80006d0:	f000 fc26 	bl	8000f20 <HAL_Delay>

    //rx_newPayload = 0;      // Init with no new payload
    //rx_payloadWidth = 0;    // It has no length
    status = 0;             // Stores the STATUS register status
 80006d4:	4b62      	ldr	r3, [pc, #392]	; (8000860 <init+0x1c8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    TX_OK = 0;              // initiates in stand-by
 80006da:	4b62      	ldr	r3, [pc, #392]	; (8000864 <init+0x1cc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
    RX_OK = 0;              // "
 80006e0:	4b61      	ldr	r3, [pc, #388]	; (8000868 <init+0x1d0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]

    // Set CSN high, no SPI transaction yet
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2110      	movs	r1, #16
 80006ea:	4860      	ldr	r0, [pc, #384]	; (800086c <init+0x1d4>)
 80006ec:	f000 fea2 	bl	8001434 <HAL_GPIO_WritePin>
 
    // Disable RX TX
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	485d      	ldr	r0, [pc, #372]	; (800086c <init+0x1d4>)
 80006f6:	f000 fe9d 	bl	8001434 <HAL_GPIO_WritePin>
    //Configuração:

    //W_REGISTER=001A AAAA: Read command and status registers. AAAAA = 5 bit Register Map Address

    // SETUP_AW register: Setup of Address Widths - (common for all data pipes)  
    SPI_Write_Reg(SETUP_AW, &setup_aw_value); //RX/TX Address field width 5 bytes
 80006fa:	f107 0316 	add.w	r3, r7, #22
 80006fe:	4619      	mov	r1, r3
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f8b7 	bl	8000874 <SPI_Write_Reg>
    // Configuration register é definido quando entra no modo RX ou TX (ver funções para cada modo)

    // EN_RXADDR register: Enable Pipe0 (only pipe0)
    SPI_Write_Reg(EN_RXADDR, &en_rxaddr_value);    // Enable Pipe0 (only pipe0)
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	2002      	movs	r0, #2
 800070e:	f000 f8b1 	bl	8000874 <SPI_Write_Reg>

    if(autoAck_enable)
 8000712:	793b      	ldrb	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d010      	beq.n	800073a <init+0xa2>
    {
    	en_aa_value = 0x01;			// Enabled Auto Acknowledgment
 8000718:	2301      	movs	r3, #1
 800071a:	757b      	strb	r3, [r7, #21]
		setup_retr_value = 0x05;	// Enabled retransmission (5 max)
 800071c:	2305      	movs	r3, #5
 800071e:	74fb      	strb	r3, [r7, #19]

    	// EN_AA register: Enable Auto Acknowledgment: Pipe 0
    	SPI_Write_Reg(EN_AA, &en_aa_value);
 8000720:	f107 0315 	add.w	r3, r7, #21
 8000724:	4619      	mov	r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	f000 f8a4 	bl	8000874 <SPI_Write_Reg>

    	// SETUP_RETR register: Time to automatic retransmission selected: 250us, retransmission enabled
		SPI_Write_Reg(SETUP_RETR, &setup_retr_value);
 800072c:	f107 0313 	add.w	r3, r7, #19
 8000730:	4619      	mov	r1, r3
 8000732:	2004      	movs	r0, #4
 8000734:	f000 f89e 	bl	8000874 <SPI_Write_Reg>
 8000738:	e00f      	b.n	800075a <init+0xc2>
    }
    else
    {
    	en_aa_value = 0x00;			// Disabled Auto Acknowledgment
 800073a:	2300      	movs	r3, #0
 800073c:	757b      	strb	r3, [r7, #21]
		setup_retr_value = 0x00;	// Disabled retransmission (5 max)
 800073e:	2300      	movs	r3, #0
 8000740:	74fb      	strb	r3, [r7, #19]

    	// EN_AA register: Disable Auto Acknowledgment
		SPI_Write_Reg(EN_AA, &en_aa_value);        // Disable Auto Acknowledgment: All pipes
 8000742:	f107 0315 	add.w	r3, r7, #21
 8000746:	4619      	mov	r1, r3
 8000748:	2001      	movs	r0, #1
 800074a:	f000 f893 	bl	8000874 <SPI_Write_Reg>

		// SETUP_RETR register: Time to automatic retransmission selected: 250us, retransmission disabled
		SPI_Write_Reg(SETUP_RETR, &setup_retr_value);
 800074e:	f107 0313 	add.w	r3, r7, #19
 8000752:	4619      	mov	r1, r3
 8000754:	2004      	movs	r0, #4
 8000756:	f000 f88d 	bl	8000874 <SPI_Write_Reg>
    }


    // RF_CH register: Select RF channel
    SPI_Write_Reg(RF_CH, &rf_channel);          // Select RF channel: Fo = 2,490 GHz + rf_channel
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	4619      	mov	r1, r3
 800075e:	2005      	movs	r0, #5
 8000760:	f000 f888 	bl	8000874 <SPI_Write_Reg>

    //RF SETUP
    //Ajustar potência de saída em modo TX (bits 2:1)
    //  bit 0 = 1 (setup LNA gain)
    rf_setup_byte = 0x01; //0000 0001
 8000764:	2301      	movs	r3, #1
 8000766:	75fb      	strb	r3, [r7, #23]
    switch (rf_pwr) 
 8000768:	797b      	ldrb	r3, [r7, #5]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d82c      	bhi.n	80007c8 <init+0x130>
 800076e:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <init+0xdc>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	08000785 	.word	0x08000785
 8000778:	08000791 	.word	0x08000791
 800077c:	080007a7 	.word	0x080007a7
 8000780:	080007bd 	.word	0x080007bd
    {     
        case RF_TX_POWER_NEGATIVE_18dBm: //bits 2:1 = 00
            rf_setup_byte &= 0xF9; //1111 1001
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	f023 0306 	bic.w	r3, r3, #6
 800078a:	b2db      	uxtb	r3, r3
 800078c:	75fb      	strb	r3, [r7, #23]
        break;
 800078e:	e01c      	b.n	80007ca <init+0x132>

        case RF_TX_POWER_NEGATIVE_12dBm: //bits 2:1 = 01
            rf_setup_byte |= 0x02;//0000 0010
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	b2db      	uxtb	r3, r3
 8000798:	75fb      	strb	r3, [r7, #23]
            rf_setup_byte &= 0xFB;//1111 1011 
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	f023 0304 	bic.w	r3, r3, #4
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	75fb      	strb	r3, [r7, #23]
        break;
 80007a4:	e011      	b.n	80007ca <init+0x132>

        case RF_TX_POWER_NEGATIVE_6dBm: //bits 2:1 = 10
            rf_setup_byte &= 0xFD;//1111 1101
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	f023 0302 	bic.w	r3, r3, #2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	75fb      	strb	r3, [r7, #23]
            rf_setup_byte |= 0x04;//0000 0100
 80007b0:	7dfb      	ldrb	r3, [r7, #23]
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	75fb      	strb	r3, [r7, #23]
        break;
 80007ba:	e006      	b.n	80007ca <init+0x132>

        case RF_TX_POWER_0dBm: //bits 2:1 = 11
            rf_setup_byte |= 0x06;//0000 0110
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	f043 0306 	orr.w	r3, r3, #6
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	75fb      	strb	r3, [r7, #23]
        break;
 80007c6:	e000      	b.n	80007ca <init+0x132>

        default: 
        break;      
 80007c8:	bf00      	nop
        }
        //Ajustar Air Data Rate (bit 3)
        switch (rf_data_rate) 
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <init+0x13e>
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d006      	beq.n	80007e2 <init+0x14a>
 80007d4:	e00b      	b.n	80007ee <init+0x156>
        {
        case RF_DATA_RATE_1Mbps: //bit 3 = 0
            rf_setup_byte &= 0xF7;//1111 0111
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	f023 0308 	bic.w	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	75fb      	strb	r3, [r7, #23]
        break;
 80007e0:	e005      	b.n	80007ee <init+0x156>
        case RF_DATA_RATE_2Mbps: //bit 3 = 1
            rf_setup_byte |= 0x08;//0000 1000
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	75fb      	strb	r3, [r7, #23]
        break;
 80007ec:	bf00      	nop
        }

    //Bit 4: PLL_LOCK = 0; bits 7:5 = Reserved = 000
    rf_setup_byte &= 0x0F;//0000 1111
 80007ee:	7dfb      	ldrb	r3, [r7, #23]
 80007f0:	f003 030f 	and.w	r3, r3, #15
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	75fb      	strb	r3, [r7, #23]
    SPI_Write_Reg(RF_SETUP, &rf_setup_byte);     // TX_PWR:0dBm, Datarate:1Mbps, LNA:HCURR
 80007f8:	f107 0317 	add.w	r3, r7, #23
 80007fc:	4619      	mov	r1, r3
 80007fe:	2006      	movs	r0, #6
 8000800:	f000 f838 	bl	8000874 <SPI_Write_Reg>

    //Transmiter Address.
    SPI_Write_Buf_Reg(TX_ADDR, ADDR_HOST, TX_RX_ADDR_WIDTH);
 8000804:	2205      	movs	r2, #5
 8000806:	491a      	ldr	r1, [pc, #104]	; (8000870 <init+0x1d8>)
 8000808:	2010      	movs	r0, #16
 800080a:	f000 f85f 	bl	80008cc <SPI_Write_Buf_Reg>
    //Receiver Address - Pipe 0
    SPI_Write_Buf_Reg(RX_ADDR_P0, ADDR_HOST, TX_RX_ADDR_WIDTH);
 800080e:	2205      	movs	r2, #5
 8000810:	4917      	ldr	r1, [pc, #92]	; (8000870 <init+0x1d8>)
 8000812:	200a      	movs	r0, #10
 8000814:	f000 f85a 	bl	80008cc <SPI_Write_Buf_Reg>
    // Ativa Payload dinamico em data pipe 0
    SPI_Write_Reg(DYNPD, &dypnd_value);        // Ativa Payload dinâmico em data pipe 0
 8000818:	f107 0312 	add.w	r3, r7, #18
 800081c:	4619      	mov	r1, r3
 800081e:	201c      	movs	r0, #28
 8000820:	f000 f828 	bl	8000874 <SPI_Write_Reg>
    // Ativa Payload dinamico, com ACK e comando W_TX_PAY
    SPI_Write_Reg(FEATURE, &feature_value);      // Ativa Payload dinâmico, com ACK e comando W_TX_PAY
 8000824:	f107 0311 	add.w	r3, r7, #17
 8000828:	4619      	mov	r1, r3
 800082a:	201d      	movs	r0, #29
 800082c:	f000 f822 	bl	8000874 <SPI_Write_Reg>
    //After the packet is validated, Enhanched ShockBurst™ disassembles the packet and loads the payload into
    //the RX FIFO, and assert the RX_DR IRQ (active low)
    //A interrupção é associada ao handler RF_IRQ (nesta classe), no código principal (rf_shield_Host.cpp).

    // Clears the TX and RX FIFO
    SPI_Write(FLUSH_TX, &zero);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	20e1      	movs	r0, #225	; 0xe1
 8000838:	f000 f89c 	bl	8000974 <SPI_Write>
    SPI_Write(FLUSH_RX, &zero);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	20e2      	movs	r0, #226	; 0xe2
 8000844:	f000 f896 	bl	8000974 <SPI_Write>

    // Writes in the STATUS register
    SPI_Write_Reg(NRF_STATUS, &nrf_status_value);
 8000848:	f107 030f 	add.w	r3, r7, #15
 800084c:	4619      	mov	r1, r3
 800084e:	2007      	movs	r0, #7
 8000850:	f000 f810 	bl	8000874 <SPI_Write_Reg>

    //Default: Stay in RX Mode waiting for data from MIP
    RX_Mode();
 8000854:	f000 f92c 	bl	8000ab0 <RX_Mode>

}
 8000858:	bf00      	nop
 800085a:	371c      	adds	r7, #28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	200002cf 	.word	0x200002cf
 8000864:	200002d0 	.word	0x200002d0
 8000868:	200002d1 	.word	0x200002d1
 800086c:	40010800 	.word	0x40010800
 8000870:	20000004 	.word	0x20000004

08000874 <SPI_Write_Reg>:
 * Writes a value in a register
 * @param reg   Register adress
 * @param value Value to be written
 **/
void SPI_Write_Reg(uint8_t reg, uint8_t * value)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
    uint16_t size = sizeof(*value);
 8000880:	2301      	movs	r3, #1
 8000882:	81fb      	strh	r3, [r7, #14]
    reg = (uint8_t) W_REGISTER + reg;
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	3320      	adds	r3, #32
 8000888:	b2db      	uxtb	r3, r3
 800088a:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <SPI_Write_Reg+0x50>)
 8000892:	f000 fdcf 	bl	8001434 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY);                    // select register
 8000896:	1df9      	adds	r1, r7, #7
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2201      	movs	r2, #1
 800089e:	480a      	ldr	r0, [pc, #40]	; (80008c8 <SPI_Write_Reg+0x54>)
 80008a0:	f002 f9f3 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 80008a4:	89fa      	ldrh	r2, [r7, #14]
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	6839      	ldr	r1, [r7, #0]
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <SPI_Write_Reg+0x54>)
 80008ae:	f002 f9ec 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 80008b2:	2201      	movs	r2, #1
 80008b4:	2110      	movs	r1, #16
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <SPI_Write_Reg+0x50>)
 80008b8:	f000 fdbc 	bl	8001434 <HAL_GPIO_WritePin>
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010800 	.word	0x40010800
 80008c8:	200004f4 	.word	0x200004f4

080008cc <SPI_Write_Buf_Reg>:
 * @param reg   Register adress
 * @param value Value to be written
 * @param size  Buffer size
 **/
void SPI_Write_Buf_Reg(uint8_t reg, uint8_t *value, uint16_t size)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	80bb      	strh	r3, [r7, #4]
    reg = (uint8_t) W_REGISTER + reg;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	3320      	adds	r3, #32
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 80008e4:	2200      	movs	r2, #0
 80008e6:	2110      	movs	r1, #16
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <SPI_Write_Buf_Reg+0x50>)
 80008ea:	f000 fda3 	bl	8001434 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY);                    // select register
 80008ee:	1df9      	adds	r1, r7, #7
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295
 80008f4:	2201      	movs	r2, #1
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <SPI_Write_Buf_Reg+0x54>)
 80008f8:	f002 f9c7 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 80008fc:	88ba      	ldrh	r2, [r7, #4]
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <SPI_Write_Buf_Reg+0x54>)
 8000906:	f002 f9c0 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 800090a:	2201      	movs	r2, #1
 800090c:	2110      	movs	r1, #16
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <SPI_Write_Buf_Reg+0x50>)
 8000910:	f000 fd90 	bl	8001434 <HAL_GPIO_WritePin>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40010800 	.word	0x40010800
 8000920:	200004f4 	.word	0x200004f4

08000924 <SPI_Write_Buf>:
 * @param reg   Register adress
 * @param value Value to be written
 * @param size  Buffer size
 **/
void SPI_Write_Buf(uint8_t command, uint8_t *value, uint16_t size)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	80bb      	strh	r3, [r7, #4]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000934:	2200      	movs	r2, #0
 8000936:	2110      	movs	r1, #16
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <SPI_Write_Buf+0x48>)
 800093a:	f000 fd7b 	bl	8001434 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY);                    // select register
 800093e:	1df9      	adds	r1, r7, #7
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	2201      	movs	r2, #1
 8000946:	480a      	ldr	r0, [pc, #40]	; (8000970 <SPI_Write_Buf+0x4c>)
 8000948:	f002 f99f 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 800094c:	88ba      	ldrh	r2, [r7, #4]
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	4806      	ldr	r0, [pc, #24]	; (8000970 <SPI_Write_Buf+0x4c>)
 8000956:	f002 f998 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 800095a:	2201      	movs	r2, #1
 800095c:	2110      	movs	r1, #16
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <SPI_Write_Buf+0x48>)
 8000960:	f000 fd68 	bl	8001434 <HAL_GPIO_WritePin>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40010800 	.word	0x40010800
 8000970:	200004f4 	.word	0x200004f4

08000974 <SPI_Write>:
 * Send a command that need a value to be written
 * @param command   SPI command
 * @param value     Value to be written
 **/
void SPI_Write(uint8_t command, uint8_t * value)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
    uint16_t size = sizeof(*value);
 8000980:	2301      	movs	r3, #1
 8000982:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000984:	2200      	movs	r2, #0
 8000986:	2110      	movs	r1, #16
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <SPI_Write+0x48>)
 800098a:	f000 fd53 	bl	8001434 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY);                    // select register
 800098e:	1df9      	adds	r1, r7, #7
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	2201      	movs	r2, #1
 8000996:	480a      	ldr	r0, [pc, #40]	; (80009c0 <SPI_Write+0x4c>)
 8000998:	f002 f977 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 800099c:	89fa      	ldrh	r2, [r7, #14]
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	6839      	ldr	r1, [r7, #0]
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <SPI_Write+0x4c>)
 80009a6:	f002 f970 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 80009aa:	2201      	movs	r2, #1
 80009ac:	2110      	movs	r1, #16
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <SPI_Write+0x48>)
 80009b0:	f000 fd40 	bl	8001434 <HAL_GPIO_WritePin>
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40010800 	.word	0x40010800
 80009c0:	200004f4 	.word	0x200004f4

080009c4 <SPI_Read>:
 * Reads a value returned by a command
 * @param command   SPI command
 * @return The byte returned by the command
 **/
uint8_t SPI_Read(uint8_t command)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
    uint8_t reading = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 80009d2:	2200      	movs	r2, #0
 80009d4:	2110      	movs	r1, #16
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <SPI_Read+0x4c>)
 80009d8:	f000 fd2c 	bl	8001434 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY); 	  // Transmits the command
 80009dc:	1df9      	adds	r1, r7, #7
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	2201      	movs	r2, #1
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <SPI_Read+0x50>)
 80009e6:	f002 f950 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, &reading, sizeof(command), HAL_MAX_DELAY);	  // Saves the response in 'reading'
 80009ea:	f107 010f 	add.w	r1, r7, #15
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	2201      	movs	r2, #1
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <SPI_Read+0x50>)
 80009f6:	f002 fa7c 	bl	8002ef2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 80009fa:	2201      	movs	r2, #1
 80009fc:	2110      	movs	r1, #16
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <SPI_Read+0x4c>)
 8000a00:	f000 fd18 	bl	8001434 <HAL_GPIO_WritePin>

    return reading;
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40010800 	.word	0x40010800
 8000a14:	200004f4 	.word	0x200004f4

08000a18 <SPI_Read_Status>:
 * Reads the STATUS register
 * @return the STATUS register content
 */

uint8_t SPI_Read_Status()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af02      	add	r7, sp, #8
    uint8_t reg_read = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
    uint8_t zeros = 0xFF;
 8000a22:	23ff      	movs	r3, #255	; 0xff
 8000a24:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000a26:	2200      	movs	r2, #0
 8000a28:	2110      	movs	r1, #16
 8000a2a:	480b      	ldr	r0, [pc, #44]	; (8000a58 <SPI_Read_Status+0x40>)
 8000a2c:	f000 fd02 	bl	8001434 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive (&_spi, &zeros, &reg_read, 1, HAL_MAX_DELAY);
 8000a30:	1dfa      	adds	r2, r7, #7
 8000a32:	1db9      	adds	r1, r7, #6
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <SPI_Read_Status+0x44>)
 8000a3e:	f002 fb61 	bl	8003104 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000a42:	2201      	movs	r2, #1
 8000a44:	2110      	movs	r1, #16
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <SPI_Read_Status+0x40>)
 8000a48:	f000 fcf4 	bl	8001434 <HAL_GPIO_WritePin>

    return reg_read;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	200004f4 	.word	0x200004f4

08000a60 <SPI_Read_Buf>:
 * Sends a command and reads a buffer of bytes
 * @param command   SPI command
 * @param dataBuf   Buffer to store the data
 **/
void SPI_Read_Buf(uint8_t command, uint8_t *dataBuf, uint16_t size)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	80bb      	strh	r3, [r7, #4]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);  // CSN low, initiate SPI transaction
 8000a70:	2200      	movs	r2, #0
 8000a72:	2110      	movs	r1, #16
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <SPI_Read_Buf+0x48>)
 8000a76:	f000 fcdd 	bl	8001434 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, 1, HAL_MAX_DELAY);           		// select register
 8000a7a:	1df9      	adds	r1, r7, #7
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	2201      	movs	r2, #1
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <SPI_Read_Buf+0x4c>)
 8000a84:	f002 f901 	bl	8002c8a <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, dataBuf, size, HAL_MAX_DELAY);              // read register
 8000a88:	88ba      	ldrh	r2, [r7, #4]
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	6839      	ldr	r1, [r7, #0]
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <SPI_Read_Buf+0x4c>)
 8000a92:	f002 fa2e 	bl	8002ef2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);    // CSN high again, ends SPI transaction
 8000a96:	2201      	movs	r2, #1
 8000a98:	2110      	movs	r1, #16
 8000a9a:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <SPI_Read_Buf+0x48>)
 8000a9c:	f000 fcca 	bl	8001434 <HAL_GPIO_WritePin>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40010800 	.word	0x40010800
 8000aac:	200004f4 	.word	0x200004f4

08000ab0 <RX_Mode>:

/**
 * Changes the nRF state to RX, which it awaits a payload to be received
 **/
void RX_Mode(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
    //rx_newPayload = 0;
    status = 0;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <RX_Mode+0x3c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
    RX_OK = 0;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <RX_Mode+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]

    uint8_t config_value = 0x1F;
 8000ac2:	231f      	movs	r3, #31
 8000ac4:	71fb      	strb	r3, [r7, #7]
    //The RX mode is an active mode where the nRF24L01 radio is a receiver. To enter this mode, the
    //nRF24L01 must have the PWR_UP bit set high, PRIM_RX bit set high and the CE pin set high.

    //Make sure you sett CE = 0 first, so the chip is in Standby mode before you change radio mode. 
    //CE (active high and is used to activate the chip in RX or TX mode) - 0: Desativa o transceiver para programação
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET); 
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2108      	movs	r1, #8
 8000aca:	480a      	ldr	r0, [pc, #40]	; (8000af4 <RX_Mode+0x44>)
 8000acc:	f000 fcb2 	bl	8001434 <HAL_GPIO_WritePin>
    // b4. MASK_MAX_RT  = 1: Disabled - Reflect MAX_RT as active low on RFIRQ
    // b3. EN_CRC       = 1: Enable CRC - Forced high if one of the bits in the EN_AA is high
    // b2. CRCO         = 1: CRC encoding 2 bytes
    // b1. PWR_UP       = 1: POWER UP
    // b0. PRIM_RX      = 1: RX/TX control with RX (sets the nRF24L01 in transmit/receive)
    SPI_Write_Reg(CONFIG, &config_value);
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff fecd 	bl	8000874 <SPI_Write_Reg>

    //CE (active high and is used to activate the chip in RX or TX mode) - a: Ativa o transceiver para RX
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_SET); 
 8000ada:	2201      	movs	r2, #1
 8000adc:	2108      	movs	r1, #8
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <RX_Mode+0x44>)
 8000ae0:	f000 fca8 	bl	8001434 <HAL_GPIO_WritePin>
  
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200002cf 	.word	0x200002cf
 8000af0:	200002d1 	.word	0x200002d1
 8000af4:	40010800 	.word	0x40010800

08000af8 <RF_IRQ>:
/**
 * Function called when an IRQ occurs. After verifying the nRF state it saves the paylod (RX mode) or 
 *  flushes the TX FIFO after a successful transmission
 **/
void RF_IRQ(uint8_t *buf, uint8_t *size, uint8_t *newPayload)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	HAL_Delay(1); // Delay to give NRf time to transmit the ACK packet
 8000b04:	2001      	movs	r0, #1
 8000b06:	f000 fa0b 	bl	8000f20 <HAL_Delay>

    // Read STATUS register
    status = SPI_Read_Status();
 8000b0a:	f7ff ff85 	bl	8000a18 <SPI_Read_Status>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <RF_IRQ+0x9c>)
 8000b14:	701a      	strb	r2, [r3, #0]

    //HAL_GPIO_TogglePin(_RF_LED_GPIO_Port, _RF_LED_Pin);

    if(status & RX_DR)
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <RF_IRQ+0x9c>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d01f      	beq.n	8000b62 <RF_IRQ+0x6a>
    { 
        // if received data ready (RX_DR) interrupt
        RX_OK = 1;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <RF_IRQ+0xa0>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
        *size = SPI_Read(R_RX_PLD_WIDTH);  // Retorna o número de bytes no payload recebido
 8000b28:	2060      	movs	r0, #96	; 0x60
 8000b2a:	f7ff ff4b 	bl	80009c4 <SPI_Read>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	461a      	mov	r2, r3
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	701a      	strb	r2, [r3, #0]
        SPI_Read_Buf(R_RX_PAYLOAD, buf, *size);  // read receive payload from RX_FIFO buffer
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	68f9      	ldr	r1, [r7, #12]
 8000b40:	2061      	movs	r0, #97	; 0x61
 8000b42:	f7ff ff8d 	bl	8000a60 <SPI_Read_Buf>

        if(*size > 32)  //Não pode conter mais que 32 bytes
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b20      	cmp	r3, #32
 8000b4c:	d902      	bls.n	8000b54 <RF_IRQ+0x5c>
        {
            *size = 0;
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
        }
        SPI_Write(FLUSH_RX, 0x00); //Limpar o buffer RX (os dados recebidos estão em rx_buf).
 8000b54:	2100      	movs	r1, #0
 8000b56:	20e2      	movs	r0, #226	; 0xe2
 8000b58:	f7ff ff0c 	bl	8000974 <SPI_Write>

        *newPayload = 1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
    }

    //se o pacote foi reconhecido pelo receptor (funciona com TX-ACK)
    if(status & TX_DS)
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <RF_IRQ+0x9c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <RF_IRQ+0x84>
    {
        //Completou TX ?
        TX_OK = 1;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <RF_IRQ+0xa4>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
        SPI_Write(FLUSH_TX,0); //limpar o buffer TX
 8000b74:	2100      	movs	r1, #0
 8000b76:	20e1      	movs	r0, #225	; 0xe1
 8000b78:	f7ff fefc 	bl	8000974 <SPI_Write>
    {
    	// Do nothing
    }

    //Reset status
    uint8_t sta_val = 0x70;
 8000b7c:	2370      	movs	r3, #112	; 0x70
 8000b7e:	75fb      	strb	r3, [r7, #23]
    SPI_Write_Reg(NRF_STATUS, &sta_val);
 8000b80:	f107 0317 	add.w	r3, r7, #23
 8000b84:	4619      	mov	r1, r3
 8000b86:	2007      	movs	r0, #7
 8000b88:	f7ff fe74 	bl	8000874 <SPI_Write_Reg>
}
 8000b8c:	bf00      	nop
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200002cf 	.word	0x200002cf
 8000b98:	200002d1 	.word	0x200002d1
 8000b9c:	200002d0 	.word	0x200002d0

08000ba0 <TX_Mode>:
 * @param buf The payload to be transmitted
 * @param payloadLength The payload's length
 */

void TX_Mode(uint8_t* buf, uint8_t payloadLength, uint8_t autoAck_enabled)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
 8000bac:	4613      	mov	r3, r2
 8000bae:	70bb      	strb	r3, [r7, #2]
	  TX_OK = 0; //Iniciando transmissão (Na IRQ é setada para 1, indicando fim de transmissão)
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <TX_Mode+0x8c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
	  //To enter this mode, the nRF24L01 must have the PWR_UP bit set high, PRIM_RX bit set low,
	  //a payload in the TX FIFO and, a high pulse on the CE for more than 10μs.

	  //Make sure you sett CE = 0 first, so the chip is in Standby mode before you change radio mode.
	  //CE (active high and is used to activate the chip in RX or TX mode) - 0: Desativa o transceiver para programação
	  HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <TX_Mode+0x90>)
 8000bbc:	f000 fc3a 	bl	8001434 <HAL_GPIO_WritePin>
	  // b4. MASK_MAX_RT 	= 0 or 1: 0 Reflect MAX_RT as active low on RFIRQ or 1 to disable this IRQ
	  // b3. EN_CRC 		= 1: Enable CRC - Forced high if one of the bits in the EN_AA is high
	  // b2. CRCO 			= 1: CRC encoding 2 bytes
	  // b1. PWR_UP 		= 1: POWER UP
	  // b0. PRIM_RX 		= 0: RX/TX control with TX (sets the nRF24L01 in transmit/receive)
	  uint8_t config = 0x0E; // 0000 1110
 8000bc0:	230e      	movs	r3, #14
 8000bc2:	73fb      	strb	r3, [r7, #15]

	  // Disables the MAX_RT IRQ if the Auto Acknowledgment is disabled
	  if(autoAck_enabled == 0)
 8000bc4:	78bb      	ldrb	r3, [r7, #2]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d104      	bne.n	8000bd4 <TX_Mode+0x34>
	  {
		  config |= 0x10; // 0000 1110 | 0001 0000 = 0001 1110
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	73fb      	strb	r3, [r7, #15]
	  }

	  SPI_Write_Reg(CONFIG, &config);
 8000bd4:	f107 030f 	add.w	r3, r7, #15
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fe4a 	bl	8000874 <SPI_Write_Reg>

	  //enviar (transmitir) endereço do receptor para o qual a mensagem será enviada (o outro nRF24L01)
	  SPI_Write_Buf_Reg(RX_ADDR_P0, ADDR_HOST, TX_RX_ADDR_WIDTH);
 8000be0:	2205      	movs	r2, #5
 8000be2:	4914      	ldr	r1, [pc, #80]	; (8000c34 <TX_Mode+0x94>)
 8000be4:	200a      	movs	r0, #10
 8000be6:	f7ff fe71 	bl	80008cc <SPI_Write_Buf_Reg>

	  //Envia o payload para o transceiver.
	  if(autoAck_enabled)
 8000bea:	78bb      	ldrb	r3, [r7, #2]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d007      	beq.n	8000c00 <TX_Mode+0x60>
		  SPI_Write_Buf(W_TX_PAYLOAD, buf, payloadLength); // Writes data to TX payload
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	20a0      	movs	r0, #160	; 0xa0
 8000bfa:	f7ff fe93 	bl	8000924 <SPI_Write_Buf>
 8000bfe:	e006      	b.n	8000c0e <TX_Mode+0x6e>
	  else
		  SPI_Write_Buf(W_TX_PAYLOAD_NOACK, buf, payloadLength); // Writes data to TX payload without Acknowledgment
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	20b0      	movs	r0, #176	; 0xb0
 8000c0a:	f7ff fe8b 	bl	8000924 <SPI_Write_Buf>

	  //Iniciar transmissão - ativar TX-RF
	  // Set CE pin high to enable TX Mode
	  //	CE (active high and is used to activate the chip in RX or TX mode)
	  // 	- a: Ativa o transceiver para RX
	  HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2108      	movs	r1, #8
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <TX_Mode+0x90>)
 8000c14:	f000 fc0e 	bl	8001434 <HAL_GPIO_WritePin>

	  //Aguardar IRQ indicando que concluiu a transmissão..

	  HAL_Delay(2); //delay suficiente para transmitir o payload maximo de 32 bytes.
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 f981 	bl	8000f20 <HAL_Delay>
	            //Com data rate de 1Mbps ==> 1us por bit;
	            //Pacote transmitido: Preambulo (1 byte) + endereço (5bytes) + controle (9bits) + payload (até 32 bytes)
	            //                    + CRC (2 bytes) ==> Total 329 bits (pacote maximo) ==> ou seja 329useg
	            //    adicionando os tempos de wakeup etc, teríamos +- 1mseg... vou usar 2mseg por segurança aqui...

	  RX_Mode();
 8000c1e:	f7ff ff47 	bl	8000ab0 <RX_Mode>
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200002d0 	.word	0x200002d0
 8000c30:	40010800 	.word	0x40010800
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	61d3      	str	r3, [r2, #28]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_MspInit+0x60>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_MspInit+0x60>)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010000 	.word	0x40010000

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d12f      	bne.n	8000d1c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MOSI_Pin;
 8000cec:	23a0      	movs	r3, #160	; 0xa0
 8000cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <HAL_SPI_MspInit+0x90>)
 8000d00:	f000 fa3e 	bl	8001180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_MISO_Pin;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RF_MISO_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_SPI_MspInit+0x90>)
 8000d18:	f000 fa32 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40013000 	.word	0x40013000
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010800 	.word	0x40010800

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <HardFault_Handler+0x4>

08000d42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <MemManage_Handler+0x4>

08000d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <BusFault_Handler+0x4>

08000d4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f8b4 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fb83 	bl	8001494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d9a:	f000 fc9a 	bl	80016d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000125c 	.word	0x2000125c

08000da8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <SystemInit+0x5c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <SystemInit+0x5c>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <SystemInit+0x5c>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4911      	ldr	r1, [pc, #68]	; (8000e04 <SystemInit+0x5c>)
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <SystemInit+0x60>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <SystemInit+0x5c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <SystemInit+0x5c>)
 8000dca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <SystemInit+0x5c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SystemInit+0x5c>)
 8000dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dde:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <SystemInit+0x5c>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <SystemInit+0x5c>)
 8000de6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000dea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SystemInit+0x5c>)
 8000dee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000df2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SystemInit+0x64>)
 8000df6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfa:	609a      	str	r2, [r3, #8]
#endif 
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	40021000 	.word	0x40021000
 8000e08:	f8ff0000 	.word	0xf8ff0000
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e12:	e003      	b.n	8000e1c <LoopCopyDataInit>

08000e14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e1a:	3104      	adds	r1, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e1c:	480a      	ldr	r0, [pc, #40]	; (8000e48 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e24:	d3f6      	bcc.n	8000e14 <CopyDataInit>
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e28:	e002      	b.n	8000e30 <LoopFillZerobss>

08000e2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e2c:	f842 3b04 	str.w	r3, [r2], #4

08000e30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e34:	d3f9      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e36:	f7ff ffb7 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f005 fd39 	bl	80068b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3e:	f7ff f985 	bl	800014c <main>
  bx lr
 8000e42:	4770      	bx	lr
  ldr r3, =_sidata
 8000e44:	080069a4 	.word	0x080069a4
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e4c:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 8000e50:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 8000e54:	200014c8 	.word	0x200014c8

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_Init+0x28>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_Init+0x28>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f945 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fede 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f95d 	bl	8001166 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f925 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	20000014 	.word	0x20000014
 8000ee4:	20000010 	.word	0x20000010

08000ee8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_IncTick+0x1c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_IncTick+0x20>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <HAL_IncTick+0x20>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000014 	.word	0x20000014
 8000f08:	200005c4 	.word	0x200005c4

08000f0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <HAL_GetTick+0x10>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	200005c4 	.word	0x200005c4

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff fff0 	bl	8000f0c <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_Delay+0x40>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffe0 	bl	8000f0c <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000014 	.word	0x20000014

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4906      	ldr	r1, [pc, #24]	; (8000ffc <__NVIC_EnableIRQ+0x34>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff90 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff2d 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff42 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff35 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e127      	b.n	80013e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001194:	2201      	movs	r2, #1
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8116 	bne.w	80013de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b12      	cmp	r3, #18
 80011b8:	d034      	beq.n	8001224 <HAL_GPIO_Init+0xa4>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d80d      	bhi.n	80011da <HAL_GPIO_Init+0x5a>
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d02b      	beq.n	800121a <HAL_GPIO_Init+0x9a>
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d804      	bhi.n	80011d0 <HAL_GPIO_Init+0x50>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d031      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d01c      	beq.n	8001208 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ce:	e048      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d043      	beq.n	800125c <HAL_GPIO_Init+0xdc>
 80011d4:	2b11      	cmp	r3, #17
 80011d6:	d01b      	beq.n	8001210 <HAL_GPIO_Init+0x90>
          break;
 80011d8:	e043      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011da:	4a89      	ldr	r2, [pc, #548]	; (8001400 <HAL_GPIO_Init+0x280>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d026      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011e0:	4a87      	ldr	r2, [pc, #540]	; (8001400 <HAL_GPIO_Init+0x280>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d806      	bhi.n	80011f4 <HAL_GPIO_Init+0x74>
 80011e6:	4a87      	ldr	r2, [pc, #540]	; (8001404 <HAL_GPIO_Init+0x284>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d020      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011ec:	4a86      	ldr	r2, [pc, #536]	; (8001408 <HAL_GPIO_Init+0x288>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01d      	beq.n	800122e <HAL_GPIO_Init+0xae>
          break;
 80011f2:	e036      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011f4:	4a85      	ldr	r2, [pc, #532]	; (800140c <HAL_GPIO_Init+0x28c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011fa:	4a85      	ldr	r2, [pc, #532]	; (8001410 <HAL_GPIO_Init+0x290>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d016      	beq.n	800122e <HAL_GPIO_Init+0xae>
 8001200:	4a84      	ldr	r2, [pc, #528]	; (8001414 <HAL_GPIO_Init+0x294>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0xae>
          break;
 8001206:	e02c      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e028      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e023      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	3308      	adds	r3, #8
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e01e      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	330c      	adds	r3, #12
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e019      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001236:	2304      	movs	r3, #4
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e012      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	611a      	str	r2, [r3, #16]
          break;
 800124e:	e008      	b.n	8001262 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	615a      	str	r2, [r3, #20]
          break;
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	d801      	bhi.n	800126c <HAL_GPIO_Init+0xec>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e001      	b.n	8001270 <HAL_GPIO_Init+0xf0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3304      	adds	r3, #4
 8001270:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d802      	bhi.n	800127e <HAL_GPIO_Init+0xfe>
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x104>
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	3b08      	subs	r3, #8
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	210f      	movs	r1, #15
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	401a      	ands	r2, r3
 8001296:	6a39      	ldr	r1, [r7, #32]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	431a      	orrs	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8096 	beq.w	80013de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b2:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b56      	ldr	r3, [pc, #344]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012ca:	4a54      	ldr	r2, [pc, #336]	; (800141c <HAL_GPIO_Init+0x29c>)
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x19e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x19a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a49      	ldr	r2, [pc, #292]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x196>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_Init+0x2ac>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x192>
 800130e:	2303      	movs	r3, #3
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 8001312:	2304      	movs	r3, #4
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 800131e:	2300      	movs	r3, #0
 8001320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001330:	493a      	ldr	r1, [pc, #232]	; (800141c <HAL_GPIO_Init+0x29c>)
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4938      	ldr	r1, [pc, #224]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
 8001356:	e006      	b.n	8001366 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	43db      	mvns	r3, r3
 8001360:	4933      	ldr	r1, [pc, #204]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001362:	4013      	ands	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	492e      	ldr	r1, [pc, #184]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
 800137e:	e006      	b.n	800138e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	43db      	mvns	r3, r3
 8001388:	4929      	ldr	r1, [pc, #164]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800138a:	4013      	ands	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4924      	ldr	r1, [pc, #144]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
 80013a6:	e006      	b.n	80013b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	491f      	ldr	r1, [pc, #124]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	491a      	ldr	r1, [pc, #104]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
 80013ce:	e006      	b.n	80013de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4915      	ldr	r1, [pc, #84]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013da:	4013      	ands	r3, r2
 80013dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	3301      	adds	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f47f aed0 	bne.w	8001194 <HAL_GPIO_Init+0x14>
  }
}
 80013f4:	bf00      	nop
 80013f6:	372c      	adds	r7, #44	; 0x2c
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	10210000 	.word	0x10210000
 8001404:	10110000 	.word	0x10110000
 8001408:	10120000 	.word	0x10120000
 800140c:	10310000 	.word	0x10310000
 8001410:	10320000 	.word	0x10320000
 8001414:	10220000 	.word	0x10220000
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000
 8001420:	40010800 	.word	0x40010800
 8001424:	40010c00 	.word	0x40010c00
 8001428:	40011000 	.word	0x40011000
 800142c:	40011400 	.word	0x40011400
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	611a      	str	r2, [r3, #16]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147c:	887a      	ldrh	r2, [r7, #2]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001482:	e002      	b.n	800148a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffa8 	bl	8000408 <HAL_GPIO_EXTI_Callback>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	b08b      	sub	sp, #44	; 0x2c
 80014c8:	af06      	add	r7, sp, #24
 80014ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0d3      	b.n	800167e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f004 ff42 	bl	8006374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 f8a4 	bl	800364a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	687e      	ldr	r6, [r7, #4]
 800150a:	466d      	mov	r5, sp
 800150c:	f106 0410 	add.w	r4, r6, #16
 8001510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	602b      	str	r3, [r5, #0]
 8001518:	1d33      	adds	r3, r6, #4
 800151a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	f002 f86d 	bl	80035fc <USB_CoreInit>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0a4      	b.n	800167e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f002 f8a1 	bl	8003682 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e035      	b.n	80015b2 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	015b      	lsls	r3, r3, #5
 800154c:	4413      	add	r3, r2
 800154e:	3329      	adds	r3, #41	; 0x29
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	015b      	lsls	r3, r3, #5
 800155a:	4413      	add	r3, r2
 800155c:	3328      	adds	r3, #40	; 0x28
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	b291      	uxth	r1, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	015b      	lsls	r3, r3, #5
 800156c:	4413      	add	r3, r2
 800156e:	3336      	adds	r3, #54	; 0x36
 8001570:	460a      	mov	r2, r1
 8001572:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	4413      	add	r3, r2
 800157c:	332b      	adds	r3, #43	; 0x2b
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	015b      	lsls	r3, r3, #5
 8001588:	4413      	add	r3, r2
 800158a:	3338      	adds	r3, #56	; 0x38
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	4413      	add	r3, r2
 8001598:	333c      	adds	r3, #60	; 0x3c
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	3302      	adds	r3, #2
 80015a4:	015b      	lsls	r3, r3, #5
 80015a6:	4413      	add	r3, r2
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3c4      	bcc.n	8001546 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e031      	b.n	8001626 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	4413      	add	r3, r2
 80015ca:	f203 1329 	addw	r3, r3, #297	; 0x129
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	4413      	add	r3, r2
 80015da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	4413      	add	r3, r2
 80015ea:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	015b      	lsls	r3, r3, #5
 8001608:	4413      	add	r3, r2
 800160a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	330a      	adds	r3, #10
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	4413      	add	r3, r2
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3301      	adds	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3c8      	bcc.n	80015c2 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	687e      	ldr	r6, [r7, #4]
 8001638:	466d      	mov	r5, sp
 800163a:	f106 0410 	add.w	r4, r6, #16
 800163e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	602b      	str	r3, [r5, #0]
 8001646:	1d33      	adds	r3, r6, #4
 8001648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164a:	6838      	ldr	r0, [r7, #0]
 800164c:	f002 f825 	bl	800369a <USB_DevInit>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00d      	b.n	800167e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f003 f863 	bl	8004742 <USB_DevDisconnect>

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001686 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_PCD_Start+0x16>
 8001698:	2302      	movs	r3, #2
 800169a:	e016      	b.n	80016ca <HAL_PCD_Start+0x44>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016a4:	2101      	movs	r1, #1
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f005 f8cb 	bl	8006842 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 f83c 	bl	800472e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 ffae 	bl	800361c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 f839 	bl	8004756 <USB_ReadInterrupts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ee:	d102      	bne.n	80016f6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 faf3 	bl	8001cdc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 f82b 	bl	8004756 <USB_ReadInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170a:	d112      	bne.n	8001732 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001714:	b29a      	uxth	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800171e:	b292      	uxth	r2, r2
 8001720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f004 fe9a 	bl	800645e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800172a:	2100      	movs	r1, #0
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f8de 	bl	80018ee <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f003 f80d 	bl	8004756 <USB_ReadInterrupts>
 800173c:	4603      	mov	r3, r0
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001746:	d10b      	bne.n	8001760 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001750:	b29a      	uxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800175a:	b292      	uxth	r2, r2
 800175c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fff6 	bl	8004756 <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001774:	d10b      	bne.n	800178e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001788:	b292      	uxth	r2, r2
 800178a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 ffdf 	bl	8004756 <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a2:	d126      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	b292      	uxth	r2, r2
 80017b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0208 	bic.w	r2, r2, #8
 80017ce:	b292      	uxth	r2, r2
 80017d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f004 fe7b 	bl	80064d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017ec:	b292      	uxth	r2, r2
 80017ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 ffad 	bl	8004756 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001806:	d13d      	bne.n	8001884 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0208 	orr.w	r2, r2, #8
 800181a:	b292      	uxth	r2, r2
 800181c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001828:	b29a      	uxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001832:	b292      	uxth	r2, r2
 8001834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001840:	b29a      	uxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0204 	orr.w	r2, r2, #4
 800184a:	b292      	uxth	r2, r2
 800184c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f002 ff7e 	bl	8004756 <USB_ReadInterrupts>
 800185a:	4603      	mov	r3, r0
 800185c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001864:	d10b      	bne.n	800187e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800186e:	b29a      	uxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001878:	b292      	uxth	r2, r2
 800187a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f004 fe0c 	bl	800649c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f002 ff64 	bl	8004756 <USB_ReadInterrupts>
 800188e:	4603      	mov	r3, r0
 8001890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001898:	d10e      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018ac:	b292      	uxth	r2, r2
 80018ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f004 fdc5 	bl	8006442 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 ff4a 	bl	8004756 <USB_ReadInterrupts>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018cc:	d10b      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e0:	b292      	uxth	r2, r2
 80018e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_PCD_SetAddress+0x1a>
 8001904:	2302      	movs	r3, #2
 8001906:	e013      	b.n	8001930 <HAL_PCD_SetAddress+0x42>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fef1 	bl	8004708 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4603      	mov	r3, r0
 8001948:	70fb      	strb	r3, [r7, #3]
 800194a:	460b      	mov	r3, r1
 800194c:	803b      	strh	r3, [r7, #0]
 800194e:	4613      	mov	r3, r2
 8001950:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195a:	2b00      	cmp	r3, #0
 800195c:	da0b      	bge.n	8001976 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	015b      	lsls	r3, r3, #5
 8001966:	3328      	adds	r3, #40	; 0x28
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	705a      	strb	r2, [r3, #1]
 8001974:	e00b      	b.n	800198e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	015b      	lsls	r3, r3, #5
 800197e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800199a:	883a      	ldrh	r2, [r7, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	78ba      	ldrb	r2, [r7, #2]
 80019a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d102      	bne.n	80019c4 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_EP_Open+0x9a>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e00e      	b.n	80019f0 <HAL_PCD_EP_Open+0xb8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fe7f 	bl	80036e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80019ee:	7afb      	ldrb	r3, [r7, #11]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da0b      	bge.n	8001a24 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	015b      	lsls	r3, r3, #5
 8001a14:	3328      	adds	r3, #40	; 0x28
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	705a      	strb	r2, [r3, #1]
 8001a22:	e00b      	b.n	8001a3c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	015b      	lsls	r3, r3, #5
 8001a2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_PCD_EP_Close+0x5e>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e00e      	b.n	8001a74 <HAL_PCD_EP_Close+0x7c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68f9      	ldr	r1, [r7, #12]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 f92b 	bl	8003cc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a8c:	7afb      	ldrb	r3, [r7, #11]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	015b      	lsls	r3, r3, #5
 8001a94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d106      	bne.n	8001ada <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6979      	ldr	r1, [r7, #20]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 fa8a 	bl	8003fec <USB_EPStartXfer>
 8001ad8:	e005      	b.n	8001ae6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6979      	ldr	r1, [r7, #20]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 fa83 	bl	8003fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	330a      	adds	r3, #10
 8001b06:	015b      	lsls	r3, r3, #5
 8001b08:	4413      	add	r3, r2
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	460b      	mov	r3, r1
 8001b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	015b      	lsls	r3, r3, #5
 8001b30:	3328      	adds	r3, #40	; 0x28
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6979      	ldr	r1, [r7, #20]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fa3d 	bl	8003fec <USB_EPStartXfer>
 8001b72:	e005      	b.n	8001b80 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6979      	ldr	r1, [r7, #20]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fa36 	bl	8003fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	f003 0207 	and.w	r2, r3, #7
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d901      	bls.n	8001ba8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e046      	b.n	8001c36 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	da0b      	bge.n	8001bc8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	015b      	lsls	r3, r3, #5
 8001bb8:	3328      	adds	r3, #40	; 0x28
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	705a      	strb	r2, [r3, #1]
 8001bc6:	e009      	b.n	8001bdc <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	015b      	lsls	r3, r3, #5
 8001bcc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_PCD_EP_SetStall+0x72>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e01c      	b.n	8001c36 <HAL_PCD_EP_SetStall+0xac>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fca6 	bl	800455c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d108      	bne.n	8001c2c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f002 fda4 	bl	8004774 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 020f 	and.w	r2, r3, #15
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d901      	bls.n	8001c5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e03a      	b.n	8001cd2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da0b      	bge.n	8001c7c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	015b      	lsls	r3, r3, #5
 8001c6c:	3328      	adds	r3, #40	; 0x28
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	705a      	strb	r2, [r3, #1]
 8001c7a:	e00b      	b.n	8001c94 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	015b      	lsls	r3, r3, #5
 8001c84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_PCD_EP_ClrStall+0x76>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e00e      	b.n	8001cd2 <HAL_PCD_EP_ClrStall+0x94>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fc8c 	bl	80045e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ce4:	e282      	b.n	80021ec <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cee:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cf0:	8afb      	ldrh	r3, [r7, #22]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001cfa:	7d7b      	ldrb	r3, [r7, #21]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 8142 	bne.w	8001f86 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d02:	8afb      	ldrh	r3, [r7, #22]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d151      	bne.n	8001db0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1c:	b29c      	uxth	r4, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3328      	adds	r3, #40	; 0x28
 8001d32:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	441a      	add	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f004 fb4f 	bl	8006414 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8234 	beq.w	80021ec <PCD_EP_ISR_Handler+0x510>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 822f 	bne.w	80021ec <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	b292      	uxth	r2, r2
 8001da2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dae:	e21d      	b.n	80021ec <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001db6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001dc0:	8a7b      	ldrh	r3, [r7, #18]
 8001dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d033      	beq.n	8001e32 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	3306      	adds	r3, #6
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f002 fd02 	bl	8004812 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	b29c      	uxth	r4, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001e26:	b292      	uxth	r2, r2
 8001e28:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f004 fac8 	bl	80063c0 <HAL_PCD_SetupStageCallback>
 8001e30:	e1dc      	b.n	80021ec <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f280 81d8 	bge.w	80021ec <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e48:	4013      	ands	r3, r2
 8001e4a:	b29c      	uxth	r4, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001e54:	b292      	uxth	r2, r2
 8001e56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3306      	adds	r3, #6
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d019      	beq.n	8001ec0 <PCD_EP_ISR_Handler+0x1e4>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d015      	beq.n	8001ec0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6959      	ldr	r1, [r3, #20]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f002 fcb4 	bl	8004812 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	441a      	add	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001eb8:	2100      	movs	r1, #0
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f004 fa92 	bl	80063e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461c      	mov	r4, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	441c      	add	r4, r3
 8001ed2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001ed6:	461c      	mov	r4, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10e      	bne.n	8001efe <PCD_EP_ISR_Handler+0x222>
 8001ee0:	8823      	ldrh	r3, [r4, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	8023      	strh	r3, [r4, #0]
 8001eec:	8823      	ldrh	r3, [r4, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	8023      	strh	r3, [r4, #0]
 8001efc:	e02d      	b.n	8001f5a <PCD_EP_ISR_Handler+0x27e>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b3e      	cmp	r3, #62	; 0x3e
 8001f04:	d812      	bhi.n	8001f2c <PCD_EP_ISR_Handler+0x250>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <PCD_EP_ISR_Handler+0x244>
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	029b      	lsls	r3, r3, #10
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	8023      	strh	r3, [r4, #0]
 8001f2a:	e016      	b.n	8001f5a <PCD_EP_ISR_Handler+0x27e>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <PCD_EP_ISR_Handler+0x26a>
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	b29c      	uxth	r4, r3
 8001f6c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001f70:	b29c      	uxth	r4, r3
 8001f72:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001f76:	b29c      	uxth	r4, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4ba2      	ldr	r3, [pc, #648]	; (8002208 <PCD_EP_ISR_Handler+0x52c>)
 8001f7e:	4323      	orrs	r3, r4
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	8013      	strh	r3, [r2, #0]
 8001f84:	e132      	b.n	80021ec <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	7d7b      	ldrb	r3, [r7, #21]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f280 80d1 	bge.w	8002142 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	7d7b      	ldrb	r3, [r7, #21]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	b29c      	uxth	r4, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	7d7b      	ldrb	r3, [r7, #21]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fcc:	7d7b      	ldrb	r3, [r7, #21]
 8001fce:	015b      	lsls	r3, r3, #5
 8001fd0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d121      	bne.n	8002026 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800200c:	8bfb      	ldrh	r3, [r7, #30]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d072      	beq.n	80020f8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6959      	ldr	r1, [r3, #20]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	88da      	ldrh	r2, [r3, #6]
 800201e:	8bfb      	ldrh	r3, [r7, #30]
 8002020:	f002 fbf7 	bl	8004812 <USB_ReadPMA>
 8002024:	e068      	b.n	80020f8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d021      	beq.n	8002084 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	3302      	adds	r3, #2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002068:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800206a:	8bfb      	ldrh	r3, [r7, #30]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d02a      	beq.n	80020c6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6959      	ldr	r1, [r3, #20]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	891a      	ldrh	r2, [r3, #8]
 800207c:	8bfb      	ldrh	r3, [r7, #30]
 800207e:	f002 fbc8 	bl	8004812 <USB_ReadPMA>
 8002082:	e020      	b.n	80020c6 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208c:	b29b      	uxth	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	3306      	adds	r3, #6
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ac:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80020ae:	8bfb      	ldrh	r3, [r7, #30]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6959      	ldr	r1, [r3, #20]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	895a      	ldrh	r2, [r3, #10]
 80020c0:	8bfb      	ldrh	r3, [r7, #30]
 80020c2:	f002 fba6 	bl	8004812 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e0:	b29c      	uxth	r4, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	441a      	add	r2, r3
 80020f0:	4b46      	ldr	r3, [pc, #280]	; (800220c <PCD_EP_ISR_Handler+0x530>)
 80020f2:	4323      	orrs	r3, r4
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	8bfb      	ldrh	r3, [r7, #30]
 80020fe:	441a      	add	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	441a      	add	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <PCD_EP_ISR_Handler+0x446>
 8002118:	8bfa      	ldrh	r2, [r7, #30]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	429a      	cmp	r2, r3
 8002120:	d206      	bcs.n	8002130 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f004 f95b 	bl	80063e4 <HAL_PCD_DataOutStageCallback>
 800212e:	e008      	b.n	8002142 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	7819      	ldrb	r1, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fc9d 	bl	8001a7c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002142:	8a7b      	ldrh	r3, [r7, #18]
 8002144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002148:	2b00      	cmp	r3, #0
 800214a:	d04f      	beq.n	80021ec <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800214c:	7d7b      	ldrb	r3, [r7, #21]
 800214e:	015b      	lsls	r3, r3, #5
 8002150:	3328      	adds	r3, #40	; 0x28
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	7d7b      	ldrb	r3, [r7, #21]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800216c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002170:	b29c      	uxth	r4, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	7d7b      	ldrb	r3, [r7, #21]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002186:	b29b      	uxth	r3, r3
 8002188:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002192:	b29b      	uxth	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	3302      	adds	r3, #2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	441a      	add	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f004 f91e 	bl	8006414 <HAL_PCD_DataInStageCallback>
 80021d8:	e008      	b.n	80021ec <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	7819      	ldrb	r1, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fc96 	bl	8001b18 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f6ff ad74 	blt.w	8001ce6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3724      	adds	r7, #36	; 0x24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	ffff8080 	.word	0xffff8080
 800220c:	ffff80c0 	.word	0xffff80c0

08002210 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	817b      	strh	r3, [r7, #10]
 800221e:	4613      	mov	r3, r2
 8002220:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222e:	897b      	ldrh	r3, [r7, #10]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	015b      	lsls	r3, r3, #5
 8002236:	3328      	adds	r3, #40	; 0x28
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e006      	b.n	800224e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002240:	897b      	ldrh	r3, [r7, #10]
 8002242:	015b      	lsls	r3, r3, #5
 8002244:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800224e:	893b      	ldrh	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2200      	movs	r2, #0
 8002258:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	b29a      	uxth	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	80da      	strh	r2, [r3, #6]
 8002262:	e00b      	b.n	800227c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2201      	movs	r2, #1
 8002268:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	b29a      	uxth	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	b29a      	uxth	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e26c      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8087 	beq.w	80023b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a8:	4b92      	ldr	r3, [pc, #584]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d00c      	beq.n	80022ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b4:	4b8f      	ldr	r3, [pc, #572]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d112      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5e>
 80022c0:	4b8c      	ldr	r3, [pc, #560]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d10b      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d06c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x12c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d168      	bne.n	80023b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e246      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x76>
 80022f0:	4b80      	ldr	r3, [pc, #512]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a7f      	ldr	r2, [pc, #508]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	e02e      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x98>
 8002306:	4b7b      	ldr	r3, [pc, #492]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7a      	ldr	r2, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b78      	ldr	r3, [pc, #480]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a77      	ldr	r2, [pc, #476]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0xbc>
 800232a:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a71      	ldr	r2, [pc, #452]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6e      	ldr	r2, [pc, #440]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 8002344:	4b6b      	ldr	r3, [pc, #428]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a6a      	ldr	r2, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a67      	ldr	r2, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fdd2 	bl	8000f0c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe fdce 	bl	8000f0c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1fa      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b5d      	ldr	r3, [pc, #372]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xe4>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fdbe 	bl	8000f0c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fdba 	bl	8000f0c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1e6      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x10c>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d063      	beq.n	800248a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023c2:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ce:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d11c      	bne.n	8002414 <HAL_RCC_OscConfig+0x18c>
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x176>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1ba      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4939      	ldr	r1, [pc, #228]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	e03a      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_RCC_OscConfig+0x270>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe fd73 	bl	8000f0c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242a:	f7fe fd6f 	bl	8000f0c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e19b      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4927      	ldr	r1, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_RCC_OscConfig+0x270>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fd52 	bl	8000f0c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fd4e 	bl	8000f0c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e17a      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d03a      	beq.n	800250c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d019      	beq.n	80024d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_RCC_OscConfig+0x274>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a4:	f7fe fd32 	bl	8000f0c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7fe fd2e 	bl	8000f0c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e15a      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f000 faa8 	bl	8002a20 <RCC_Delay>
 80024d0:	e01c      	b.n	800250c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_OscConfig+0x274>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7fe fd18 	bl	8000f0c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024de:	e00f      	b.n	8002500 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe fd14 	bl	8000f0c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d908      	bls.n	8002500 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e140      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	42420000 	.word	0x42420000
 80024fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	4b9e      	ldr	r3, [pc, #632]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e9      	bne.n	80024e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a6 	beq.w	8002666 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251e:	4b97      	ldr	r3, [pc, #604]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a93      	ldr	r2, [pc, #588]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002552:	4b8b      	ldr	r3, [pc, #556]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a8a      	ldr	r2, [pc, #552]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7fe fcd5 	bl	8000f0c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7fe fcd1 	bl	8000f0c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b64      	cmp	r3, #100	; 0x64
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0fd      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b81      	ldr	r3, [pc, #516]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x312>
 800258c:	4b7b      	ldr	r3, [pc, #492]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a7a      	ldr	r2, [pc, #488]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	e02d      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x334>
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a72      	ldr	r2, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	e01c      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0x356>
 80025c4:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a6c      	ldr	r2, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6213      	str	r3, [r2, #32]
 80025dc:	e00b      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a66      	ldr	r2, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a63      	ldr	r2, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7fe fc85 	bl	8000f0c <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7fe fc81 	bl	8000f0c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0ab      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ee      	beq.n	8002606 <HAL_RCC_OscConfig+0x37e>
 8002628:	e014      	b.n	8002654 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7fe fc6f 	bl	8000f0c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe fc6b 	bl	8000f0c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e095      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	4b4c      	ldr	r3, [pc, #304]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ee      	bne.n	8002632 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4b48      	ldr	r3, [pc, #288]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a47      	ldr	r2, [pc, #284]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8081 	beq.w	8002772 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002670:	4b42      	ldr	r3, [pc, #264]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d061      	beq.n	8002740 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d146      	bne.n	8002712 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_OscConfig+0x4fc>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe fc3f 	bl	8000f0c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe fc3b 	bl	8000f0c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e067      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a4:	4b35      	ldr	r3, [pc, #212]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d108      	bne.n	80026cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	492d      	ldr	r1, [pc, #180]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a19      	ldr	r1, [r3, #32]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	430b      	orrs	r3, r1
 80026de:	4927      	ldr	r1, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <HAL_RCC_OscConfig+0x4fc>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe fc0f 	bl	8000f0c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe fc0b 	bl	8000f0c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e037      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x46a>
 8002710:	e02f      	b.n	8002772 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_RCC_OscConfig+0x4fc>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fbf8 	bl	8000f0c <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fbf4 	bl	8000f0c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e020      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x498>
 800273e:	e018      	b.n	8002772 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
 8002784:	42420060 	.word	0x42420060

08002788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0d0      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d910      	bls.n	80027cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4965      	ldr	r1, [pc, #404]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b63      	ldr	r3, [pc, #396]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0b8      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e4:	4b59      	ldr	r3, [pc, #356]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a52      	ldr	r2, [pc, #328]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	494d      	ldr	r1, [pc, #308]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d040      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d115      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07f      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e073      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e06b      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b39      	ldr	r3, [pc, #228]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4936      	ldr	r1, [pc, #216]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7fe fb48 	bl	8000f0c <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7fe fb44 	bl	8000f0c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e053      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d210      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	4922      	ldr	r1, [pc, #136]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e032      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4916      	ldr	r1, [pc, #88]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002916:	f000 f821 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800291a:	4601      	mov	r1, r0
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	fa21 f303 	lsr.w	r3, r1, r3
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1cc>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1d0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe faa6 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40022000 	.word	0x40022000
 800294c:	40021000 	.word	0x40021000
 8002950:	0800698c 	.word	0x0800698c
 8002954:	2000000c 	.word	0x2000000c
 8002958:	20000010 	.word	0x20000010

0800295c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b490      	push	{r4, r7}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002964:	1d3c      	adds	r4, r7, #4
 8002966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b04      	cmp	r3, #4
 8002994:	d002      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x40>
 8002996:	2b08      	cmp	r3, #8
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x46>
 800299a:	e02d      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 800299e:	623b      	str	r3, [r7, #32]
      break;
 80029a0:	e02d      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	0c9b      	lsrs	r3, r3, #18
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ae:	4413      	add	r3, r2
 80029b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0c5b      	lsrs	r3, r3, #17
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ce:	4413      	add	r3, r2
 80029d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029da:	fb02 f203 	mul.w	r2, r2, r3
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	e004      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	4a0c      	ldr	r2, [pc, #48]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	623b      	str	r3, [r7, #32]
      break;
 80029f6:	e002      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029fa:	623b      	str	r3, [r7, #32]
      break;
 80029fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc90      	pop	{r4, r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	08006938 	.word	0x08006938
 8002a10:	08006948 	.word	0x08006948
 8002a14:	40021000 	.word	0x40021000
 8002a18:	007a1200 	.word	0x007a1200
 8002a1c:	003d0900 	.word	0x003d0900

08002a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <RCC_Delay+0x34>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <RCC_Delay+0x38>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a5b      	lsrs	r3, r3, #9
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a3c:	bf00      	nop
  }
  while (Delay --);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	60fa      	str	r2, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f9      	bne.n	8002a3c <RCC_Delay+0x1c>
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	2000000c 	.word	0x2000000c
 8002a58:	10624dd3 	.word	0x10624dd3

08002a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d07d      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b4c      	ldr	r3, [pc, #304]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a92:	61d3      	str	r3, [r2, #28]
 8002a94:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d118      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab0:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a42      	ldr	r2, [pc, #264]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fa26 	bl	8000f0c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe fa22 	bl	8000f0c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e06d      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02e      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d027      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b10:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b16:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe f9f1 	bl	8000f0c <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe f9ed 	bl	8000f0c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e036      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b50:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4917      	ldr	r1, [pc, #92]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	490b      	ldr	r1, [pc, #44]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	4904      	ldr	r1, [pc, #16]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42420440 	.word	0x42420440

08002bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e053      	b.n	8002c82 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fe f851 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	ea42 0103 	orr.w	r1, r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	0c1a      	lsrs	r2, r3, #16
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f002 0204 	and.w	r2, r2, #4
 8002c60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b088      	sub	sp, #32
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_SPI_Transmit+0x22>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e11e      	b.n	8002eea <HAL_SPI_Transmit+0x260>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cb4:	f7fe f92a 	bl	8000f0c <HAL_GetTick>
 8002cb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d002      	beq.n	8002cd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cce:	e103      	b.n	8002ed8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x52>
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ce0:	e0fa      	b.n	8002ed8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	88fa      	ldrh	r2, [r7, #6]
 8002d00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d28:	d107      	bne.n	8002d3a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d007      	beq.n	8002d58 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d60:	d14b      	bne.n	8002dfa <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_Transmit+0xe6>
 8002d6a:	8afb      	ldrh	r3, [r7, #22]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d13e      	bne.n	8002dee <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	881a      	ldrh	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	1c9a      	adds	r2, r3, #2
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d94:	e02b      	b.n	8002dee <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d112      	bne.n	8002dca <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	881a      	ldrh	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	1c9a      	adds	r2, r3, #2
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dc8:	e011      	b.n	8002dee <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dca:	f7fe f89f 	bl	8000f0c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d803      	bhi.n	8002de2 <HAL_SPI_Transmit+0x158>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d102      	bne.n	8002de8 <HAL_SPI_Transmit+0x15e>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dec:	e074      	b.n	8002ed8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ce      	bne.n	8002d96 <HAL_SPI_Transmit+0x10c>
 8002df8:	e04c      	b.n	8002e94 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_SPI_Transmit+0x17e>
 8002e02:	8afb      	ldrh	r3, [r7, #22]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d140      	bne.n	8002e8a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e2e:	e02c      	b.n	8002e8a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d113      	bne.n	8002e66 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	330c      	adds	r3, #12
 8002e48:	7812      	ldrb	r2, [r2, #0]
 8002e4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e64:	e011      	b.n	8002e8a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e66:	f7fe f851 	bl	8000f0c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d803      	bhi.n	8002e7e <HAL_SPI_Transmit+0x1f4>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d102      	bne.n	8002e84 <HAL_SPI_Transmit+0x1fa>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e88:	e026      	b.n	8002ed8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1cd      	bne.n	8002e30 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	6839      	ldr	r1, [r7, #0]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fb91 	bl	80035c0 <SPI_EndRxTxTransaction>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e000      	b.n	8002ed8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002ed6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ee8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b088      	sub	sp, #32
 8002ef6:	af02      	add	r7, sp, #8
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f0e:	d112      	bne.n	8002f36 <HAL_SPI_Receive+0x44>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10e      	bne.n	8002f36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f8e9 	bl	8003104 <HAL_SPI_TransmitReceive>
 8002f32:	4603      	mov	r3, r0
 8002f34:	e0e2      	b.n	80030fc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_SPI_Receive+0x52>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e0db      	b.n	80030fc <HAL_SPI_Receive+0x20a>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f4c:	f7fd ffde 	bl	8000f0c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d002      	beq.n	8002f64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f62:	e0c2      	b.n	80030ea <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_SPI_Receive+0x7e>
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f74:	e0b9      	b.n	80030ea <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	88fa      	ldrh	r2, [r7, #6]
 8002f8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fbc:	d107      	bne.n	8002fce <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d007      	beq.n	8002fec <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d162      	bne.n	80030ba <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ff4:	e02e      	b.n	8003054 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d115      	bne.n	8003030 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f103 020c 	add.w	r2, r3, #12
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800302e:	e011      	b.n	8003054 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003030:	f7fd ff6c 	bl	8000f0c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d803      	bhi.n	8003048 <HAL_SPI_Receive+0x156>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d102      	bne.n	800304e <HAL_SPI_Receive+0x15c>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003052:	e04a      	b.n	80030ea <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1cb      	bne.n	8002ff6 <HAL_SPI_Receive+0x104>
 800305e:	e031      	b.n	80030c4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d113      	bne.n	8003096 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	b292      	uxth	r2, r2
 800307a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	1c9a      	adds	r2, r3, #2
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003094:	e011      	b.n	80030ba <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003096:	f7fd ff39 	bl	8000f0c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d803      	bhi.n	80030ae <HAL_SPI_Receive+0x1bc>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d102      	bne.n	80030b4 <HAL_SPI_Receive+0x1c2>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030b8:	e017      	b.n	80030ea <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1cd      	bne.n	8003060 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fa27 	bl	800351c <SPI_EndRxTransaction>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
 80030e6:	e000      	b.n	80030ea <HAL_SPI_Receive+0x1f8>
  }

error :
 80030e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003112:	2301      	movs	r3, #1
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_SPI_TransmitReceive+0x26>
 8003126:	2302      	movs	r3, #2
 8003128:	e18a      	b.n	8003440 <HAL_SPI_TransmitReceive+0x33c>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003132:	f7fd feeb 	bl	8000f0c <HAL_GetTick>
 8003136:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800314c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003150:	2b01      	cmp	r3, #1
 8003152:	d00f      	beq.n	8003174 <HAL_SPI_TransmitReceive+0x70>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800315a:	d107      	bne.n	800316c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <HAL_SPI_TransmitReceive+0x68>
 8003164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003168:	2b04      	cmp	r3, #4
 800316a:	d003      	beq.n	8003174 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800316c:	2302      	movs	r3, #2
 800316e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003172:	e15b      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_SPI_TransmitReceive+0x82>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_SPI_TransmitReceive+0x82>
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d103      	bne.n	800318e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800318c:	e14e      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b04      	cmp	r3, #4
 8003198:	d003      	beq.n	80031a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2205      	movs	r2, #5
 800319e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	887a      	ldrh	r2, [r7, #2]
 80031b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d007      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fe:	d178      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_TransmitReceive+0x10a>
 8003208:	8b7b      	ldrh	r3, [r7, #26]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d166      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003232:	e053      	b.n	80032dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d11b      	bne.n	800327a <HAL_SPI_TransmitReceive+0x176>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d016      	beq.n	800327a <HAL_SPI_TransmitReceive+0x176>
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d113      	bne.n	800327a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d119      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x1b8>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	b292      	uxth	r2, r2
 800329e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	1c9a      	adds	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032b8:	2301      	movs	r3, #1
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032bc:	f7fd fe26 	bl	8000f0c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d807      	bhi.n	80032dc <HAL_SPI_TransmitReceive+0x1d8>
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d003      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032da:	e0a7      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1a6      	bne.n	8003234 <HAL_SPI_TransmitReceive+0x130>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1a1      	bne.n	8003234 <HAL_SPI_TransmitReceive+0x130>
 80032f0:	e07c      	b.n	80033ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x1fc>
 80032fa:	8b7b      	ldrh	r3, [r7, #26]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d16b      	bne.n	80033d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	7812      	ldrb	r2, [r2, #0]
 800330c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003326:	e057      	b.n	80033d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d11c      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x26c>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d017      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x26c>
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d114      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d119      	bne.n	80033b2 <HAL_SPI_TransmitReceive+0x2ae>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d014      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ae:	2301      	movs	r3, #1
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033b2:	f7fd fdab 	bl	8000f0c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033be:	429a      	cmp	r2, r3
 80033c0:	d803      	bhi.n	80033ca <HAL_SPI_TransmitReceive+0x2c6>
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d102      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x2cc>
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033d6:	e029      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1a2      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x224>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d19d      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f8e5 	bl	80035c0 <SPI_EndRxTxTransaction>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d006      	beq.n	800340a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003408:	e010      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	e000      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800342a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800343c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003440:	4618      	mov	r0, r3
 8003442:	3730      	adds	r7, #48	; 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003458:	e04c      	b.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d048      	beq.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003462:	f7fd fd53 	bl	8000f0c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d902      	bls.n	8003478 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d13d      	bne.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003486:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003490:	d111      	bne.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349a:	d004      	beq.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a4:	d107      	bne.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034be:	d10f      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e00f      	b.n	8003514 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	429a      	cmp	r2, r3
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	429a      	cmp	r2, r3
 8003510:	d1a3      	bne.n	800345a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003530:	d111      	bne.n	8003556 <SPI_EndRxTransaction+0x3a>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353a:	d004      	beq.n	8003546 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003544:	d107      	bne.n	8003556 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003554:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355e:	d117      	bne.n	8003590 <SPI_EndRxTransaction+0x74>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	d112      	bne.n	8003590 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2200      	movs	r2, #0
 8003572:	2101      	movs	r1, #1
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f7ff ff67 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01a      	beq.n	80035b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e013      	b.n	80035b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2200      	movs	r2, #0
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff ff54 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e000      	b.n	80035b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff ff36 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e000      	b.n	80035f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035fc:	b084      	sub	sp, #16
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	f107 0014 	add.w	r0, r7, #20
 800360a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	b004      	add	sp, #16
 800361a:	4770      	bx	lr

0800361c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003624:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003628:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003630:	b29a      	uxth	r2, r3
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	4313      	orrs	r3, r2
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003652:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003656:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800365e:	b29b      	uxth	r3, r3
 8003660:	b21a      	sxth	r2, r3
 8003662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003666:	43db      	mvns	r3, r3
 8003668:	b21b      	sxth	r3, r3
 800366a:	4013      	ands	r3, r2
 800366c:	b21b      	sxth	r3, r3
 800366e:	b29a      	uxth	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800369a:	b084      	sub	sp, #16
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	f107 0014 	add.w	r0, r7, #20
 80036a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffa5 	bl	800361c <USB_EnableGlobalInt>

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036de:	b004      	add	sp, #16
 80036e0:	4770      	bx	lr
	...

080036e4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036e4:	b490      	push	{r4, r7}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	78db      	ldrb	r3, [r3, #3]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d819      	bhi.n	8003746 <USB_ActivateEndpoint+0x62>
 8003712:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <USB_ActivateEndpoint+0x34>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	08003729 	.word	0x08003729
 800371c:	0800373d 	.word	0x0800373d
 8003720:	0800374d 	.word	0x0800374d
 8003724:	08003733 	.word	0x08003733
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003728:	89bb      	ldrh	r3, [r7, #12]
 800372a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800372e:	81bb      	strh	r3, [r7, #12]
      break;
 8003730:	e00d      	b.n	800374e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003732:	89bb      	ldrh	r3, [r7, #12]
 8003734:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003738:	81bb      	strh	r3, [r7, #12]
      break;
 800373a:	e008      	b.n	800374e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800373c:	89bb      	ldrh	r3, [r7, #12]
 800373e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003742:	81bb      	strh	r3, [r7, #12]
      break;
 8003744:	e003      	b.n	800374e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      break;
 800374a:	e000      	b.n	800374e <USB_ActivateEndpoint+0x6a>
      break;
 800374c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	441a      	add	r2, r3
 8003758:	89bb      	ldrh	r3, [r7, #12]
 800375a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800375e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003784:	b29a      	uxth	r2, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	4313      	orrs	r3, r2
 800378e:	b29c      	uxth	r4, r3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	4b8a      	ldr	r3, [pc, #552]	; (80039c4 <USB_ActivateEndpoint+0x2e0>)
 800379c:	4323      	orrs	r3, r4
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	7b1b      	ldrb	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 8112 	bne.w	80039d0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d067      	beq.n	8003884 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037b4:	687c      	ldr	r4, [r7, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037bc:	b29b      	uxth	r3, r3
 80037be:	441c      	add	r4, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	4423      	add	r3, r4
 80037c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037cc:	461c      	mov	r4, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	88db      	ldrh	r3, [r3, #6]
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	b29b      	uxth	r3, r3
 80037da:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29c      	uxth	r4, r3
 80037ea:	4623      	mov	r3, r4
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d014      	beq.n	800381e <USB_ActivateEndpoint+0x13a>
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	b29c      	uxth	r4, r3
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	4b6c      	ldr	r3, [pc, #432]	; (80039c8 <USB_ActivateEndpoint+0x2e4>)
 8003818:	4323      	orrs	r3, r4
 800381a:	b29b      	uxth	r3, r3
 800381c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	78db      	ldrb	r3, [r3, #3]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d018      	beq.n	8003858 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800383c:	b29c      	uxth	r4, r3
 800383e:	f084 0320 	eor.w	r3, r4, #32
 8003842:	b29c      	uxth	r4, r3
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	441a      	add	r2, r3
 800384e:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <USB_ActivateEndpoint+0x2e0>)
 8003850:	4323      	orrs	r3, r4
 8003852:	b29b      	uxth	r3, r3
 8003854:	8013      	strh	r3, [r2, #0]
 8003856:	e22b      	b.n	8003cb0 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386e:	b29c      	uxth	r4, r3
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	441a      	add	r2, r3
 800387a:	4b52      	ldr	r3, [pc, #328]	; (80039c4 <USB_ActivateEndpoint+0x2e0>)
 800387c:	4323      	orrs	r3, r4
 800387e:	b29b      	uxth	r3, r3
 8003880:	8013      	strh	r3, [r2, #0]
 8003882:	e215      	b.n	8003cb0 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003884:	687c      	ldr	r4, [r7, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800388c:	b29b      	uxth	r3, r3
 800388e:	441c      	add	r4, r3
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	4423      	add	r3, r4
 8003898:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800389c:	461c      	mov	r4, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	88db      	ldrh	r3, [r3, #6]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80038ac:	687c      	ldr	r4, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	441c      	add	r4, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	4423      	add	r3, r4
 80038c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038c4:	461c      	mov	r4, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10e      	bne.n	80038ec <USB_ActivateEndpoint+0x208>
 80038ce:	8823      	ldrh	r3, [r4, #0]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	8023      	strh	r3, [r4, #0]
 80038da:	8823      	ldrh	r3, [r4, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	8023      	strh	r3, [r4, #0]
 80038ea:	e02d      	b.n	8003948 <USB_ActivateEndpoint+0x264>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b3e      	cmp	r3, #62	; 0x3e
 80038f2:	d812      	bhi.n	800391a <USB_ActivateEndpoint+0x236>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	085b      	lsrs	r3, r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <USB_ActivateEndpoint+0x22a>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	b29b      	uxth	r3, r3
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	b29b      	uxth	r3, r3
 8003916:	8023      	strh	r3, [r4, #0]
 8003918:	e016      	b.n	8003948 <USB_ActivateEndpoint+0x264>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <USB_ActivateEndpoint+0x250>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3b01      	subs	r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	b29b      	uxth	r3, r3
 8003938:	029b      	lsls	r3, r3, #10
 800393a:	b29b      	uxth	r3, r3
 800393c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003944:	b29b      	uxth	r3, r3
 8003946:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29c      	uxth	r4, r3
 8003956:	4623      	mov	r3, r4
 8003958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d014      	beq.n	800398a <USB_ActivateEndpoint+0x2a6>
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003976:	b29c      	uxth	r4, r3
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	441a      	add	r2, r3
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <USB_ActivateEndpoint+0x2e8>)
 8003984:	4323      	orrs	r3, r4
 8003986:	b29b      	uxth	r3, r3
 8003988:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800399c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a0:	b29c      	uxth	r4, r3
 80039a2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80039a6:	b29c      	uxth	r4, r3
 80039a8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80039ac:	b29c      	uxth	r4, r3
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	441a      	add	r2, r3
 80039b8:	4b02      	ldr	r3, [pc, #8]	; (80039c4 <USB_ActivateEndpoint+0x2e0>)
 80039ba:	4323      	orrs	r3, r4
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8013      	strh	r3, [r2, #0]
 80039c0:	e176      	b.n	8003cb0 <USB_ActivateEndpoint+0x5cc>
 80039c2:	bf00      	nop
 80039c4:	ffff8080 	.word	0xffff8080
 80039c8:	ffff80c0 	.word	0xffff80c0
 80039cc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	b29c      	uxth	r4, r3
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	4b96      	ldr	r3, [pc, #600]	; (8003c4c <USB_ActivateEndpoint+0x568>)
 80039f4:	4323      	orrs	r3, r4
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039fa:	687c      	ldr	r4, [r7, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	441c      	add	r4, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	4423      	add	r3, r4
 8003a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a12:	461c      	mov	r4, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	891b      	ldrh	r3, [r3, #8]
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	8023      	strh	r3, [r4, #0]
 8003a22:	687c      	ldr	r4, [r7, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	441c      	add	r4, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4423      	add	r3, r4
 8003a36:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a3a:	461c      	mov	r4, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	895b      	ldrh	r3, [r3, #10]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 8088 	bne.w	8003b64 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29c      	uxth	r4, r3
 8003a62:	4623      	mov	r3, r4
 8003a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d014      	beq.n	8003a96 <USB_ActivateEndpoint+0x3b2>
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	b29c      	uxth	r4, r3
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	441a      	add	r2, r3
 8003a8e:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <USB_ActivateEndpoint+0x56c>)
 8003a90:	4323      	orrs	r3, r4
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29c      	uxth	r4, r3
 8003aa4:	4623      	mov	r3, r4
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d014      	beq.n	8003ad8 <USB_ActivateEndpoint+0x3f4>
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac4:	b29c      	uxth	r4, r3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	4b60      	ldr	r3, [pc, #384]	; (8003c54 <USB_ActivateEndpoint+0x570>)
 8003ad2:	4323      	orrs	r3, r4
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	b29c      	uxth	r4, r3
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <USB_ActivateEndpoint+0x570>)
 8003afc:	4323      	orrs	r3, r4
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b18:	b29c      	uxth	r4, r3
 8003b1a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003b1e:	b29c      	uxth	r4, r3
 8003b20:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003b24:	b29c      	uxth	r4, r3
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	441a      	add	r2, r3
 8003b30:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <USB_ActivateEndpoint+0x574>)
 8003b32:	4323      	orrs	r3, r4
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4e:	b29c      	uxth	r4, r3
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	441a      	add	r2, r3
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <USB_ActivateEndpoint+0x574>)
 8003b5c:	4323      	orrs	r3, r4
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	8013      	strh	r3, [r2, #0]
 8003b62:	e0a5      	b.n	8003cb0 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29c      	uxth	r4, r3
 8003b72:	4623      	mov	r3, r4
 8003b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d014      	beq.n	8003ba6 <USB_ActivateEndpoint+0x4c2>
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	b29c      	uxth	r4, r3
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	441a      	add	r2, r3
 8003b9e:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <USB_ActivateEndpoint+0x56c>)
 8003ba0:	4323      	orrs	r3, r4
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29c      	uxth	r4, r3
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d014      	beq.n	8003be8 <USB_ActivateEndpoint+0x504>
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd4:	b29c      	uxth	r4, r3
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	441a      	add	r2, r3
 8003be0:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <USB_ActivateEndpoint+0x570>)
 8003be2:	4323      	orrs	r3, r4
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	b29c      	uxth	r4, r3
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <USB_ActivateEndpoint+0x56c>)
 8003c0c:	4323      	orrs	r3, r4
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	78db      	ldrb	r3, [r3, #3]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d020      	beq.n	8003c5c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c30:	b29c      	uxth	r4, r3
 8003c32:	f084 0320 	eor.w	r3, r4, #32
 8003c36:	b29c      	uxth	r4, r3
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <USB_ActivateEndpoint+0x574>)
 8003c44:	4323      	orrs	r3, r4
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	8013      	strh	r3, [r2, #0]
 8003c4a:	e01c      	b.n	8003c86 <USB_ActivateEndpoint+0x5a2>
 8003c4c:	ffff8180 	.word	0xffff8180
 8003c50:	ffffc080 	.word	0xffffc080
 8003c54:	ffff80c0 	.word	0xffff80c0
 8003c58:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c72:	b29c      	uxth	r4, r3
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	441a      	add	r2, r3
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <USB_ActivateEndpoint+0x5d8>)
 8003c80:	4323      	orrs	r3, r4
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9c:	b29c      	uxth	r4, r3
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	441a      	add	r2, r3
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <USB_ActivateEndpoint+0x5d8>)
 8003caa:	4323      	orrs	r3, r4
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc90      	pop	{r4, r7}
 8003cba:	4770      	bx	lr
 8003cbc:	ffff8080 	.word	0xffff8080

08003cc0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cc0:	b490      	push	{r4, r7}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	7b1b      	ldrb	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d171      	bne.n	8003db6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d036      	beq.n	8003d48 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29c      	uxth	r4, r3
 8003ce8:	4623      	mov	r3, r4
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d014      	beq.n	8003d1c <USB_DeactivateEndpoint+0x5c>
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d08:	b29c      	uxth	r4, r3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	441a      	add	r2, r3
 8003d14:	4b6b      	ldr	r3, [pc, #428]	; (8003ec4 <USB_DeactivateEndpoint+0x204>)
 8003d16:	4323      	orrs	r3, r4
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d32:	b29c      	uxth	r4, r3
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	441a      	add	r2, r3
 8003d3e:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <USB_DeactivateEndpoint+0x208>)
 8003d40:	4323      	orrs	r3, r4
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	8013      	strh	r3, [r2, #0]
 8003d46:	e144      	b.n	8003fd2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29c      	uxth	r4, r3
 8003d56:	4623      	mov	r3, r4
 8003d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d014      	beq.n	8003d8a <USB_DeactivateEndpoint+0xca>
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	b29c      	uxth	r4, r3
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	441a      	add	r2, r3
 8003d82:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <USB_DeactivateEndpoint+0x20c>)
 8003d84:	4323      	orrs	r3, r4
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da0:	b29c      	uxth	r4, r3
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	441a      	add	r2, r3
 8003dac:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <USB_DeactivateEndpoint+0x208>)
 8003dae:	4323      	orrs	r3, r4
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	8013      	strh	r3, [r2, #0]
 8003db4:	e10d      	b.n	8003fd2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	785b      	ldrb	r3, [r3, #1]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 8088 	bne.w	8003ed0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29c      	uxth	r4, r3
 8003dce:	4623      	mov	r3, r4
 8003dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d014      	beq.n	8003e02 <USB_DeactivateEndpoint+0x142>
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	b29c      	uxth	r4, r3
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <USB_DeactivateEndpoint+0x20c>)
 8003dfc:	4323      	orrs	r3, r4
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29c      	uxth	r4, r3
 8003e10:	4623      	mov	r3, r4
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d014      	beq.n	8003e44 <USB_DeactivateEndpoint+0x184>
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e30:	b29c      	uxth	r4, r3
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	441a      	add	r2, r3
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <USB_DeactivateEndpoint+0x204>)
 8003e3e:	4323      	orrs	r3, r4
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	b29c      	uxth	r4, r3
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <USB_DeactivateEndpoint+0x204>)
 8003e68:	4323      	orrs	r3, r4
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e84:	b29c      	uxth	r4, r3
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	441a      	add	r2, r3
 8003e90:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <USB_DeactivateEndpoint+0x208>)
 8003e92:	4323      	orrs	r3, r4
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eae:	b29c      	uxth	r4, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	441a      	add	r2, r3
 8003eba:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <USB_DeactivateEndpoint+0x208>)
 8003ebc:	4323      	orrs	r3, r4
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	8013      	strh	r3, [r2, #0]
 8003ec2:	e086      	b.n	8003fd2 <USB_DeactivateEndpoint+0x312>
 8003ec4:	ffff80c0 	.word	0xffff80c0
 8003ec8:	ffff8080 	.word	0xffff8080
 8003ecc:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29c      	uxth	r4, r3
 8003ede:	4623      	mov	r3, r4
 8003ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d014      	beq.n	8003f12 <USB_DeactivateEndpoint+0x252>
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	b29c      	uxth	r4, r3
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	441a      	add	r2, r3
 8003f0a:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <USB_DeactivateEndpoint+0x320>)
 8003f0c:	4323      	orrs	r3, r4
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29c      	uxth	r4, r3
 8003f20:	4623      	mov	r3, r4
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d014      	beq.n	8003f54 <USB_DeactivateEndpoint+0x294>
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f40:	b29c      	uxth	r4, r3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	441a      	add	r2, r3
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <USB_DeactivateEndpoint+0x324>)
 8003f4e:	4323      	orrs	r3, r4
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	b29c      	uxth	r4, r3
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <USB_DeactivateEndpoint+0x320>)
 8003f78:	4323      	orrs	r3, r4
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f94:	b29c      	uxth	r4, r3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	441a      	add	r2, r3
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <USB_DeactivateEndpoint+0x328>)
 8003fa2:	4323      	orrs	r3, r4
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	b29c      	uxth	r4, r3
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <USB_DeactivateEndpoint+0x328>)
 8003fcc:	4323      	orrs	r3, r4
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc90      	pop	{r4, r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	ffffc080 	.word	0xffffc080
 8003fe4:	ffff80c0 	.word	0xffff80c0
 8003fe8:	ffff8080 	.word	0xffff8080

08003fec <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b08d      	sub	sp, #52	; 0x34
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	f040 8160 	bne.w	80042c0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	429a      	cmp	r2, r3
 800400a:	d909      	bls.n	8004020 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	1ad2      	subs	r2, r2, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	619a      	str	r2, [r3, #24]
 800401e:	e005      	b.n	800402c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	7b1b      	ldrb	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d119      	bne.n	8004068 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6959      	ldr	r1, [r3, #20]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	88da      	ldrh	r2, [r3, #6]
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	b29b      	uxth	r3, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fba2 	bl	800478a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004046:	687c      	ldr	r4, [r7, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404e:	b29b      	uxth	r3, r3
 8004050:	441c      	add	r4, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	4423      	add	r3, r4
 800405a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800405e:	461c      	mov	r4, r3
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	b29b      	uxth	r3, r3
 8004064:	8023      	strh	r3, [r4, #0]
 8004066:	e10f      	b.n	8004288 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d065      	beq.n	800414a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800407e:	687c      	ldr	r4, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d148      	bne.n	800411a <USB_EPStartXfer+0x12e>
 8004088:	687c      	ldr	r4, [r7, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004090:	b29b      	uxth	r3, r3
 8004092:	441c      	add	r4, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	4423      	add	r3, r4
 800409c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040a0:	461c      	mov	r4, r3
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10e      	bne.n	80040c6 <USB_EPStartXfer+0xda>
 80040a8:	8823      	ldrh	r3, [r4, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	8023      	strh	r3, [r4, #0]
 80040b4:	8823      	ldrh	r3, [r4, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	8023      	strh	r3, [r4, #0]
 80040c4:	e03d      	b.n	8004142 <USB_EPStartXfer+0x156>
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	2b3e      	cmp	r3, #62	; 0x3e
 80040ca:	d810      	bhi.n	80040ee <USB_EPStartXfer+0x102>
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <USB_EPStartXfer+0xf6>
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	3301      	adds	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	029b      	lsls	r3, r3, #10
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	8023      	strh	r3, [r4, #0]
 80040ec:	e029      	b.n	8004142 <USB_EPStartXfer+0x156>
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <USB_EPStartXfer+0x118>
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	3b01      	subs	r3, #1
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	b29b      	uxth	r3, r3
 8004108:	029b      	lsls	r3, r3, #10
 800410a:	b29b      	uxth	r3, r3
 800410c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004114:	b29b      	uxth	r3, r3
 8004116:	8023      	strh	r3, [r4, #0]
 8004118:	e013      	b.n	8004142 <USB_EPStartXfer+0x156>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d10f      	bne.n	8004142 <USB_EPStartXfer+0x156>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	441c      	add	r4, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	4423      	add	r3, r4
 8004134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	895b      	ldrh	r3, [r3, #10]
 8004146:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004148:	e063      	b.n	8004212 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d148      	bne.n	80041e4 <USB_EPStartXfer+0x1f8>
 8004152:	687c      	ldr	r4, [r7, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	441c      	add	r4, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	4423      	add	r3, r4
 8004166:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800416a:	461c      	mov	r4, r3
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10e      	bne.n	8004190 <USB_EPStartXfer+0x1a4>
 8004172:	8823      	ldrh	r3, [r4, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800417a:	b29b      	uxth	r3, r3
 800417c:	8023      	strh	r3, [r4, #0]
 800417e:	8823      	ldrh	r3, [r4, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418a:	b29b      	uxth	r3, r3
 800418c:	8023      	strh	r3, [r4, #0]
 800418e:	e03d      	b.n	800420c <USB_EPStartXfer+0x220>
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	2b3e      	cmp	r3, #62	; 0x3e
 8004194:	d810      	bhi.n	80041b8 <USB_EPStartXfer+0x1cc>
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <USB_EPStartXfer+0x1c0>
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	3301      	adds	r3, #1
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8023      	strh	r3, [r4, #0]
 80041b6:	e029      	b.n	800420c <USB_EPStartXfer+0x220>
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	623b      	str	r3, [r7, #32]
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <USB_EPStartXfer+0x1e2>
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	623b      	str	r3, [r7, #32]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	029b      	lsls	r3, r3, #10
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8023      	strh	r3, [r4, #0]
 80041e2:	e013      	b.n	800420c <USB_EPStartXfer+0x220>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d10f      	bne.n	800420c <USB_EPStartXfer+0x220>
 80041ec:	687c      	ldr	r4, [r7, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	441c      	add	r4, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	4423      	add	r3, r4
 8004200:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004204:	461c      	mov	r4, r3
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	b29b      	uxth	r3, r3
 800420a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	891b      	ldrh	r3, [r3, #8]
 8004210:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6959      	ldr	r1, [r3, #20]
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	b29b      	uxth	r3, r3
 800421a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fab4 	bl	800478a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d115      	bne.n	8004256 <USB_EPStartXfer+0x26a>
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004240:	b29c      	uxth	r4, r3
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	441a      	add	r2, r3
 800424c:	4b9a      	ldr	r3, [pc, #616]	; (80044b8 <USB_EPStartXfer+0x4cc>)
 800424e:	4323      	orrs	r3, r4
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
 8004254:	e018      	b.n	8004288 <USB_EPStartXfer+0x29c>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	785b      	ldrb	r3, [r3, #1]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d114      	bne.n	8004288 <USB_EPStartXfer+0x29c>
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004274:	b29c      	uxth	r4, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	4b8e      	ldr	r3, [pc, #568]	; (80044bc <USB_EPStartXfer+0x4d0>)
 8004282:	4323      	orrs	r3, r4
 8004284:	b29b      	uxth	r3, r3
 8004286:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429e:	b29c      	uxth	r4, r3
 80042a0:	f084 0310 	eor.w	r3, r4, #16
 80042a4:	b29c      	uxth	r4, r3
 80042a6:	f084 0320 	eor.w	r3, r4, #32
 80042aa:	b29c      	uxth	r4, r3
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <USB_EPStartXfer+0x4d4>)
 80042b8:	4323      	orrs	r3, r4
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	8013      	strh	r3, [r2, #0]
 80042be:	e146      	b.n	800454e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d909      	bls.n	80042e0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	1ad2      	subs	r2, r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	619a      	str	r2, [r3, #24]
 80042de:	e005      	b.n	80042ec <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	7b1b      	ldrb	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d148      	bne.n	8004386 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80042f4:	687c      	ldr	r4, [r7, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	441c      	add	r4, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	4423      	add	r3, r4
 8004308:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800430c:	461c      	mov	r4, r3
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10e      	bne.n	8004332 <USB_EPStartXfer+0x346>
 8004314:	8823      	ldrh	r3, [r4, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800431c:	b29b      	uxth	r3, r3
 800431e:	8023      	strh	r3, [r4, #0]
 8004320:	8823      	ldrh	r3, [r4, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432c:	b29b      	uxth	r3, r3
 800432e:	8023      	strh	r3, [r4, #0]
 8004330:	e0f2      	b.n	8004518 <USB_EPStartXfer+0x52c>
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	2b3e      	cmp	r3, #62	; 0x3e
 8004336:	d810      	bhi.n	800435a <USB_EPStartXfer+0x36e>
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <USB_EPStartXfer+0x362>
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	3301      	adds	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	b29b      	uxth	r3, r3
 8004352:	029b      	lsls	r3, r3, #10
 8004354:	b29b      	uxth	r3, r3
 8004356:	8023      	strh	r3, [r4, #0]
 8004358:	e0de      	b.n	8004518 <USB_EPStartXfer+0x52c>
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <USB_EPStartXfer+0x384>
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3b01      	subs	r3, #1
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	b29b      	uxth	r3, r3
 8004374:	029b      	lsls	r3, r3, #10
 8004376:	b29b      	uxth	r3, r3
 8004378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004380:	b29b      	uxth	r3, r3
 8004382:	8023      	strh	r3, [r4, #0]
 8004384:	e0c8      	b.n	8004518 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	785b      	ldrb	r3, [r3, #1]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d148      	bne.n	8004420 <USB_EPStartXfer+0x434>
 800438e:	687c      	ldr	r4, [r7, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004396:	b29b      	uxth	r3, r3
 8004398:	441c      	add	r4, r3
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	4423      	add	r3, r4
 80043a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043a6:	461c      	mov	r4, r3
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10e      	bne.n	80043cc <USB_EPStartXfer+0x3e0>
 80043ae:	8823      	ldrh	r3, [r4, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	8023      	strh	r3, [r4, #0]
 80043ba:	8823      	ldrh	r3, [r4, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8023      	strh	r3, [r4, #0]
 80043ca:	e03d      	b.n	8004448 <USB_EPStartXfer+0x45c>
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	2b3e      	cmp	r3, #62	; 0x3e
 80043d0:	d810      	bhi.n	80043f4 <USB_EPStartXfer+0x408>
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <USB_EPStartXfer+0x3fc>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	3301      	adds	r3, #1
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	029b      	lsls	r3, r3, #10
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	8023      	strh	r3, [r4, #0]
 80043f2:	e029      	b.n	8004448 <USB_EPStartXfer+0x45c>
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <USB_EPStartXfer+0x41e>
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	3b01      	subs	r3, #1
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	b29b      	uxth	r3, r3
 800440e:	029b      	lsls	r3, r3, #10
 8004410:	b29b      	uxth	r3, r3
 8004412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441a:	b29b      	uxth	r3, r3
 800441c:	8023      	strh	r3, [r4, #0]
 800441e:	e013      	b.n	8004448 <USB_EPStartXfer+0x45c>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	785b      	ldrb	r3, [r3, #1]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d10f      	bne.n	8004448 <USB_EPStartXfer+0x45c>
 8004428:	687c      	ldr	r4, [r7, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004430:	b29b      	uxth	r3, r3
 8004432:	441c      	add	r4, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	4423      	add	r3, r4
 800443c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004440:	461c      	mov	r4, r3
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	b29b      	uxth	r3, r3
 8004446:	8023      	strh	r3, [r4, #0]
 8004448:	687c      	ldr	r4, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d14e      	bne.n	80044f0 <USB_EPStartXfer+0x504>
 8004452:	687c      	ldr	r4, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	441c      	add	r4, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4423      	add	r3, r4
 8004466:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800446a:	461c      	mov	r4, r3
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10e      	bne.n	8004490 <USB_EPStartXfer+0x4a4>
 8004472:	8823      	ldrh	r3, [r4, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800447a:	b29b      	uxth	r3, r3
 800447c:	8023      	strh	r3, [r4, #0]
 800447e:	8823      	ldrh	r3, [r4, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448a:	b29b      	uxth	r3, r3
 800448c:	8023      	strh	r3, [r4, #0]
 800448e:	e043      	b.n	8004518 <USB_EPStartXfer+0x52c>
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	2b3e      	cmp	r3, #62	; 0x3e
 8004494:	d816      	bhi.n	80044c4 <USB_EPStartXfer+0x4d8>
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <USB_EPStartXfer+0x4c0>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	3301      	adds	r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	8023      	strh	r3, [r4, #0]
 80044b6:	e02f      	b.n	8004518 <USB_EPStartXfer+0x52c>
 80044b8:	ffff80c0 	.word	0xffff80c0
 80044bc:	ffffc080 	.word	0xffffc080
 80044c0:	ffff8080 	.word	0xffff8080
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <USB_EPStartXfer+0x4ee>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	029b      	lsls	r3, r3, #10
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	8023      	strh	r3, [r4, #0]
 80044ee:	e013      	b.n	8004518 <USB_EPStartXfer+0x52c>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d10f      	bne.n	8004518 <USB_EPStartXfer+0x52c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fe:	b29b      	uxth	r3, r3
 8004500:	441c      	add	r4, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	4423      	add	r3, r4
 800450a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	b29a      	uxth	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	b29c      	uxth	r4, r3
 8004530:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004534:	b29c      	uxth	r4, r3
 8004536:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800453a:	b29c      	uxth	r4, r3
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	4b04      	ldr	r3, [pc, #16]	; (8004558 <USB_EPStartXfer+0x56c>)
 8004548:	4323      	orrs	r3, r4
 800454a:	b29b      	uxth	r3, r3
 800454c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3734      	adds	r7, #52	; 0x34
 8004554:	46bd      	mov	sp, r7
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	ffff8080 	.word	0xffff8080

0800455c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800455c:	b490      	push	{r4, r7}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	785b      	ldrb	r3, [r3, #1]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d018      	beq.n	80045a0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004584:	b29c      	uxth	r4, r3
 8004586:	f084 0310 	eor.w	r3, r4, #16
 800458a:	b29c      	uxth	r4, r3
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <USB_EPSetStall+0x80>)
 8004598:	4323      	orrs	r3, r4
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
 800459e:	e017      	b.n	80045d0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	b29c      	uxth	r4, r3
 80045b8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80045bc:	b29c      	uxth	r4, r3
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	4b04      	ldr	r3, [pc, #16]	; (80045dc <USB_EPSetStall+0x80>)
 80045ca:	4323      	orrs	r3, r4
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc90      	pop	{r4, r7}
 80045da:	4770      	bx	lr
 80045dc:	ffff8080 	.word	0xffff8080

080045e0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045e0:	b490      	push	{r4, r7}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	7b1b      	ldrb	r3, [r3, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d17d      	bne.n	80046ee <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d03d      	beq.n	8004676 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29c      	uxth	r4, r3
 8004608:	4623      	mov	r3, r4
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d014      	beq.n	800463c <USB_EPClearStall+0x5c>
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	b29c      	uxth	r4, r3
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	4b31      	ldr	r3, [pc, #196]	; (80046fc <USB_EPClearStall+0x11c>)
 8004636:	4323      	orrs	r3, r4
 8004638:	b29b      	uxth	r3, r3
 800463a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	78db      	ldrb	r3, [r3, #3]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d054      	beq.n	80046ee <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465a:	b29c      	uxth	r4, r3
 800465c:	f084 0320 	eor.w	r3, r4, #32
 8004660:	b29c      	uxth	r4, r3
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	441a      	add	r2, r3
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <USB_EPClearStall+0x120>)
 800466e:	4323      	orrs	r3, r4
 8004670:	b29b      	uxth	r3, r3
 8004672:	8013      	strh	r3, [r2, #0]
 8004674:	e03b      	b.n	80046ee <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29c      	uxth	r4, r3
 8004684:	4623      	mov	r3, r4
 8004686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d014      	beq.n	80046b8 <USB_EPClearStall+0xd8>
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a4:	b29c      	uxth	r4, r3
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	4b14      	ldr	r3, [pc, #80]	; (8004704 <USB_EPClearStall+0x124>)
 80046b2:	4323      	orrs	r3, r4
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	b29c      	uxth	r4, r3
 80046d0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80046d4:	b29c      	uxth	r4, r3
 80046d6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80046da:	b29c      	uxth	r4, r3
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <USB_EPClearStall+0x120>)
 80046e8:	4323      	orrs	r3, r4
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc90      	pop	{r4, r7}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	ffff80c0 	.word	0xffff80c0
 8004700:	ffff8080 	.word	0xffff8080
 8004704:	ffffc080 	.word	0xffffc080

08004708 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2280      	movs	r2, #128	; 0x80
 800471e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr

0800472e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004764:	b29b      	uxth	r3, r3
 8004766:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004768:	68fb      	ldr	r3, [r7, #12]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr

0800478a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800478a:	b480      	push	{r7}
 800478c:	b08d      	sub	sp, #52	; 0x34
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	4611      	mov	r1, r2
 8004796:	461a      	mov	r2, r3
 8004798:	460b      	mov	r3, r1
 800479a:	80fb      	strh	r3, [r7, #6]
 800479c:	4613      	mov	r3, r2
 800479e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80047a0:	88bb      	ldrh	r3, [r7, #4]
 80047a2:	3301      	adds	r3, #1
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	005a      	lsls	r2, r3, #1
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c2:	e01e      	b.n	8004802 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	3301      	adds	r3, #1
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	b29b      	uxth	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	3302      	adds	r3, #2
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	3302      	adds	r3, #2
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	3301      	adds	r3, #1
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	3b01      	subs	r3, #1
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1dd      	bne.n	80047c4 <USB_WritePMA+0x3a>
  }
}
 8004808:	bf00      	nop
 800480a:	3734      	adds	r7, #52	; 0x34
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004812:	b480      	push	{r7}
 8004814:	b08b      	sub	sp, #44	; 0x2c
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	4611      	mov	r1, r2
 800481e:	461a      	mov	r2, r3
 8004820:	460b      	mov	r3, r1
 8004822:	80fb      	strh	r3, [r7, #6]
 8004824:	4613      	mov	r3, r2
 8004826:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004828:	88bb      	ldrh	r3, [r7, #4]
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	b29b      	uxth	r3, r3
 800482e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	005a      	lsls	r2, r3, #1
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004844:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
 800484a:	e01b      	b.n	8004884 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	3302      	adds	r3, #2
 8004858:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3301      	adds	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	0a1b      	lsrs	r3, r3, #8
 800486c:	b2da      	uxtb	r2, r3
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3301      	adds	r3, #1
 8004876:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	3302      	adds	r3, #2
 800487c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	3b01      	subs	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e0      	bne.n	800484c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800488a:	88bb      	ldrh	r3, [r7, #4]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	701a      	strb	r2, [r3, #0]
  }
}
 80048a6:	bf00      	nop
 80048a8:	372c      	adds	r7, #44	; 0x2c
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	7c1b      	ldrb	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d115      	bne.n	80048f4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80048c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048cc:	2202      	movs	r2, #2
 80048ce:	2181      	movs	r1, #129	; 0x81
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 fe80 	bl	80065d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80048dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048e0:	2202      	movs	r2, #2
 80048e2:	2101      	movs	r1, #1
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f001 fe76 	bl	80065d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80048f2:	e012      	b.n	800491a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80048f4:	2340      	movs	r3, #64	; 0x40
 80048f6:	2202      	movs	r2, #2
 80048f8:	2181      	movs	r1, #129	; 0x81
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f001 fe6b 	bl	80065d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004906:	2340      	movs	r3, #64	; 0x40
 8004908:	2202      	movs	r2, #2
 800490a:	2101      	movs	r1, #1
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f001 fe62 	bl	80065d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800491a:	2308      	movs	r3, #8
 800491c:	2203      	movs	r2, #3
 800491e:	2182      	movs	r1, #130	; 0x82
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 fe58 	bl	80065d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800492c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004930:	f001 ff72 	bl	8006818 <USBD_static_malloc>
 8004934:	4602      	mov	r2, r0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e026      	b.n	800499a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004952:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2200      	movs	r2, #0
 8004962:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2200      	movs	r2, #0
 800496a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7c1b      	ldrb	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800497c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004980:	2101      	movs	r1, #1
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 ff11 	bl	80067aa <USBD_LL_PrepareReceive>
 8004988:	e007      	b.n	800499a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004990:	2340      	movs	r3, #64	; 0x40
 8004992:	2101      	movs	r1, #1
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 ff08 	bl	80067aa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80049b4:	2181      	movs	r1, #129	; 0x81
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 fe33 	bl	8006622 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80049c2:	2101      	movs	r1, #1
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fe2c 	bl	8006622 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80049d2:	2182      	movs	r1, #130	; 0x82
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f001 fe24 	bl	8006622 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00e      	beq.n	8004a08 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 ff18 	bl	8006830 <USBD_static_free>
    pdev->pClassData = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a22:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d039      	beq.n	8004ab0 <USBD_CDC_Setup+0x9e>
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d17c      	bne.n	8004b3a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	88db      	ldrh	r3, [r3, #6]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d029      	beq.n	8004a9c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	b25b      	sxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	da11      	bge.n	8004a76 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004a5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	88d2      	ldrh	r2, [r2, #6]
 8004a64:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004a66:	6939      	ldr	r1, [r7, #16]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	88db      	ldrh	r3, [r3, #6]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f001 f9f6 	bl	8005e60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004a74:	e068      	b.n	8004b48 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	785a      	ldrb	r2, [r3, #1]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	88db      	ldrh	r3, [r3, #6]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004a8c:	6939      	ldr	r1, [r7, #16]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	88db      	ldrh	r3, [r3, #6]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f001 fa11 	bl	8005ebc <USBD_CtlPrepareRx>
      break;
 8004a9a:	e055      	b.n	8004b48 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	7850      	ldrb	r0, [r2, #1]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	6839      	ldr	r1, [r7, #0]
 8004aac:	4798      	blx	r3
      break;
 8004aae:	e04b      	b.n	8004b48 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	2b0a      	cmp	r3, #10
 8004ab6:	d017      	beq.n	8004ae8 <USBD_CDC_Setup+0xd6>
 8004ab8:	2b0b      	cmp	r3, #11
 8004aba:	d029      	beq.n	8004b10 <USBD_CDC_Setup+0xfe>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d133      	bne.n	8004b28 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d107      	bne.n	8004ada <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004aca:	f107 030c 	add.w	r3, r7, #12
 8004ace:	2202      	movs	r2, #2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f001 f9c4 	bl	8005e60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ad8:	e02e      	b.n	8004b38 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004ada:	6839      	ldr	r1, [r7, #0]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f001 f955 	bl	8005d8c <USBD_CtlError>
            ret = USBD_FAIL;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ae6:	e027      	b.n	8004b38 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d107      	bne.n	8004b02 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004af2:	f107 030f 	add.w	r3, r7, #15
 8004af6:	2201      	movs	r2, #1
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f001 f9b0 	bl	8005e60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b00:	e01a      	b.n	8004b38 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004b02:	6839      	ldr	r1, [r7, #0]
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f001 f941 	bl	8005d8c <USBD_CtlError>
            ret = USBD_FAIL;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8004b0e:	e013      	b.n	8004b38 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d00d      	beq.n	8004b36 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004b1a:	6839      	ldr	r1, [r7, #0]
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f001 f935 	bl	8005d8c <USBD_CtlError>
            ret = USBD_FAIL;
 8004b22:	2302      	movs	r3, #2
 8004b24:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004b26:	e006      	b.n	8004b36 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f001 f92e 	bl	8005d8c <USBD_CtlError>
          ret = USBD_FAIL;
 8004b30:	2302      	movs	r3, #2
 8004b32:	75fb      	strb	r3, [r7, #23]
          break;
 8004b34:	e000      	b.n	8004b38 <USBD_CDC_Setup+0x126>
          break;
 8004b36:	bf00      	nop
      }
      break;
 8004b38:	e006      	b.n	8004b48 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f001 f925 	bl	8005d8c <USBD_CtlError>
      ret = USBD_FAIL;
 8004b42:	2302      	movs	r3, #2
 8004b44:	75fb      	strb	r3, [r7, #23]
      break;
 8004b46:	bf00      	nop
  }

  return ret;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b64:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b6c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d037      	beq.n	8004be8 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	331c      	adds	r3, #28
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d026      	beq.n	8004bdc <USBD_CDC_DataIn+0x8a>
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	331c      	adds	r3, #28
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	0152      	lsls	r2, r2, #5
 8004ba6:	440a      	add	r2, r1
 8004ba8:	3238      	adds	r2, #56	; 0x38
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bb0:	fb02 f201 	mul.w	r2, r2, r1
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d110      	bne.n	8004bdc <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	331c      	adds	r3, #28
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004bce:	78f9      	ldrb	r1, [r7, #3]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f001 fdc5 	bl	8006764 <USBD_LL_Transmit>
 8004bda:	e003      	b.n	8004be4 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	e000      	b.n	8004bea <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004be8:	2302      	movs	r3, #2
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f001 fdf0 	bl	80067f0 <USBD_LL_GetRxDataSize>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004c36:	4611      	mov	r1, r2
 8004c38:	4798      	blx	r3

    return USBD_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c56:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d015      	beq.n	8004c8e <USBD_CDC_EP0_RxReady+0x46>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c68:	2bff      	cmp	r3, #255	; 0xff
 8004c6a:	d010      	beq.n	8004c8e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004c7a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c82:	b292      	uxth	r2, r2
 8004c84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	22ff      	movs	r2, #255	; 0xff
 8004c8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2243      	movs	r2, #67	; 0x43
 8004ca4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004ca6:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	200000a0 	.word	0x200000a0

08004cb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2243      	movs	r2, #67	; 0x43
 8004cc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004cc6:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	2000005c 	.word	0x2000005c

08004cd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2243      	movs	r2, #67	; 0x43
 8004ce4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004ce6:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	200000e4 	.word	0x200000e4

08004cf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	220a      	movs	r2, #10
 8004d04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004d06:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000018 	.word	0x20000018

08004d18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004d22:	2302      	movs	r3, #2
 8004d24:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr

08004d44 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d58:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d86:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004daa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01c      	beq.n	8004df0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d115      	bne.n	8004dec <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2181      	movs	r1, #129	; 0x81
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 fcbe 	bl	8006764 <USBD_LL_Transmit>

      return USBD_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e002      	b.n	8004df2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004df0:	2302      	movs	r3, #2
  }
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d017      	beq.n	8004e44 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7c1b      	ldrb	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e26:	2101      	movs	r1, #1
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 fcbe 	bl	80067aa <USBD_LL_PrepareReceive>
 8004e2e:	e007      	b.n	8004e40 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e36:	2340      	movs	r3, #64	; 0x40
 8004e38:	2101      	movs	r1, #1
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fcb5 	bl	80067aa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004e62:	2302      	movs	r3, #2
 8004e64:	e01a      	b.n	8004e9c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	79fa      	ldrb	r2, [r7, #7]
 8004e92:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f001 fb29 	bl	80064ec <USBD_LL_Init>

  return USBD_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d006      	beq.n	8004ec6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e001      	b.n	8004eca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f001 fb5e 	bl	80065a0 <USBD_LL_Start>

  return USBD_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00c      	beq.n	8004f36 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	4611      	mov	r1, r2
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4798      	blx	r3
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	4611      	mov	r1, r2
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4798      	blx	r3

  return USBD_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004f76:	6839      	ldr	r1, [r7, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fecb 	bl	8005d14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d00c      	beq.n	8004fbc <USBD_LL_SetupStage+0x56>
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d302      	bcc.n	8004fac <USBD_LL_SetupStage+0x46>
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d010      	beq.n	8004fcc <USBD_LL_SetupStage+0x66>
 8004faa:	e017      	b.n	8004fdc <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f9cb 	bl	8005350 <USBD_StdDevReq>
      break;
 8004fba:	e01a      	b.n	8004ff2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fa2d 	bl	8005424 <USBD_StdItfReq>
      break;
 8004fca:	e012      	b.n	8004ff2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fa6b 	bl	80054b0 <USBD_StdEPReq>
      break;
 8004fda:	e00a      	b.n	8004ff2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fe2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f001 fb38 	bl	8006660 <USBD_LL_StallEP>
      break;
 8004ff0:	bf00      	nop
  }

  return USBD_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	460b      	mov	r3, r1
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800500a:	7afb      	ldrb	r3, [r7, #11]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d14b      	bne.n	80050a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005016:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800501e:	2b03      	cmp	r3, #3
 8005020:	d134      	bne.n	800508c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	429a      	cmp	r2, r3
 800502c:	d919      	bls.n	8005062 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005044:	429a      	cmp	r2, r3
 8005046:	d203      	bcs.n	8005050 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800504c:	b29b      	uxth	r3, r3
 800504e:	e002      	b.n	8005056 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005054:	b29b      	uxth	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 ff4c 	bl	8005ef8 <USBD_CtlContinueRx>
 8005060:	e038      	b.n	80050d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005074:	2b03      	cmp	r3, #3
 8005076:	d105      	bne.n	8005084 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 ff49 	bl	8005f1c <USBD_CtlSendStatus>
 800508a:	e023      	b.n	80050d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005092:	2b05      	cmp	r3, #5
 8005094:	d11e      	bne.n	80050d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800509e:	2100      	movs	r1, #0
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f001 fadd 	bl	8006660 <USBD_LL_StallEP>
 80050a6:	e015      	b.n	80050d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00d      	beq.n	80050d0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d108      	bne.n	80050d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	7afa      	ldrb	r2, [r7, #11]
 80050c8:	4611      	mov	r1, r2
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	4798      	blx	r3
 80050ce:	e001      	b.n	80050d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80050d0:	2302      	movs	r3, #2
 80050d2:	e000      	b.n	80050d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	460b      	mov	r3, r1
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80050ec:	7afb      	ldrb	r3, [r7, #11]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d17f      	bne.n	80051f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3314      	adds	r3, #20
 80050f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d15c      	bne.n	80051bc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	429a      	cmp	r2, r3
 800510c:	d915      	bls.n	800513a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	b29b      	uxth	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 feb6 	bl	8005e98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800512c:	2300      	movs	r3, #0
 800512e:	2200      	movs	r2, #0
 8005130:	2100      	movs	r1, #0
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f001 fb39 	bl	80067aa <USBD_LL_PrepareReceive>
 8005138:	e04e      	b.n	80051d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	6912      	ldr	r2, [r2, #16]
 8005142:	fbb3 f1f2 	udiv	r1, r3, r2
 8005146:	fb02 f201 	mul.w	r2, r2, r1
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11c      	bne.n	800518a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005158:	429a      	cmp	r2, r3
 800515a:	d316      	bcc.n	800518a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005166:	429a      	cmp	r2, r3
 8005168:	d20f      	bcs.n	800518a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800516a:	2200      	movs	r2, #0
 800516c:	2100      	movs	r1, #0
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fe92 	bl	8005e98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800517c:	2300      	movs	r3, #0
 800517e:	2200      	movs	r2, #0
 8005180:	2100      	movs	r1, #0
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f001 fb11 	bl	80067aa <USBD_LL_PrepareReceive>
 8005188:	e026      	b.n	80051d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800519c:	2b03      	cmp	r3, #3
 800519e:	d105      	bne.n	80051ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80051ac:	2180      	movs	r1, #128	; 0x80
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f001 fa56 	bl	8006660 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 fec4 	bl	8005f42 <USBD_CtlReceiveStatus>
 80051ba:	e00d      	b.n	80051d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d004      	beq.n	80051d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d103      	bne.n	80051d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80051d0:	2180      	movs	r1, #128	; 0x80
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f001 fa44 	bl	8006660 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d11d      	bne.n	800521e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff fe83 	bl	8004eee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051f0:	e015      	b.n	800521e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00d      	beq.n	800521a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005204:	2b03      	cmp	r3, #3
 8005206:	d108      	bne.n	800521a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	7afa      	ldrb	r2, [r7, #11]
 8005212:	4611      	mov	r1, r2
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	4798      	blx	r3
 8005218:	e001      	b.n	800521e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800521a:	2302      	movs	r3, #2
 800521c:	e000      	b.n	8005220 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005230:	2340      	movs	r3, #64	; 0x40
 8005232:	2200      	movs	r2, #0
 8005234:	2100      	movs	r1, #0
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 f9cd 	bl	80065d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2240      	movs	r2, #64	; 0x40
 8005248:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800524c:	2340      	movs	r3, #64	; 0x40
 800524e:	2200      	movs	r2, #0
 8005250:	2180      	movs	r1, #128	; 0x80
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f001 f9bf 	bl	80065d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2240      	movs	r2, #64	; 0x40
 8005262:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6852      	ldr	r2, [r2, #4]
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	4611      	mov	r1, r2
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
  }

  return USBD_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	78fa      	ldrb	r2, [r7, #3]
 80052ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2204      	movs	r2, #4
 80052e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d105      	bne.n	800530e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005328:	2b03      	cmp	r3, #3
 800532a:	d10b      	bne.n	8005344 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005366:	2b20      	cmp	r3, #32
 8005368:	d004      	beq.n	8005374 <USBD_StdDevReq+0x24>
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d002      	beq.n	8005374 <USBD_StdDevReq+0x24>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <USBD_StdDevReq+0x34>
 8005372:	e04c      	b.n	800540e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
      break;
 8005382:	e049      	b.n	8005418 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b09      	cmp	r3, #9
 800538a:	d83a      	bhi.n	8005402 <USBD_StdDevReq+0xb2>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <USBD_StdDevReq+0x44>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053e5 	.word	0x080053e5
 8005398:	080053f9 	.word	0x080053f9
 800539c:	08005403 	.word	0x08005403
 80053a0:	080053ef 	.word	0x080053ef
 80053a4:	08005403 	.word	0x08005403
 80053a8:	080053c7 	.word	0x080053c7
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	08005403 	.word	0x08005403
 80053b4:	080053db 	.word	0x080053db
 80053b8:	080053d1 	.word	0x080053d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9d4 	bl	800576c <USBD_GetDescriptor>
          break;
 80053c4:	e022      	b.n	800540c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fb37 	bl	8005a3c <USBD_SetAddress>
          break;
 80053ce:	e01d      	b.n	800540c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fb74 	bl	8005ac0 <USBD_SetConfig>
          break;
 80053d8:	e018      	b.n	800540c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fbfd 	bl	8005bdc <USBD_GetConfig>
          break;
 80053e2:	e013      	b.n	800540c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fc2c 	bl	8005c44 <USBD_GetStatus>
          break;
 80053ec:	e00e      	b.n	800540c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fc5a 	bl	8005caa <USBD_SetFeature>
          break;
 80053f6:	e009      	b.n	800540c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fc69 	bl	8005cd2 <USBD_ClrFeature>
          break;
 8005400:	e004      	b.n	800540c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fcc1 	bl	8005d8c <USBD_CtlError>
          break;
 800540a:	bf00      	nop
      }
      break;
 800540c:	e004      	b.n	8005418 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fcbb 	bl	8005d8c <USBD_CtlError>
      break;
 8005416:	bf00      	nop
  }

  return ret;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop

08005424 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800543a:	2b20      	cmp	r3, #32
 800543c:	d003      	beq.n	8005446 <USBD_StdItfReq+0x22>
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d001      	beq.n	8005446 <USBD_StdItfReq+0x22>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d12a      	bne.n	800549c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800544c:	3b01      	subs	r3, #1
 800544e:	2b02      	cmp	r3, #2
 8005450:	d81d      	bhi.n	800548e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	889b      	ldrh	r3, [r3, #4]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d813      	bhi.n	8005484 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
 800546a:	4603      	mov	r3, r0
 800546c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	88db      	ldrh	r3, [r3, #6]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d110      	bne.n	8005498 <USBD_StdItfReq+0x74>
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10d      	bne.n	8005498 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fd4d 	bl	8005f1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005482:	e009      	b.n	8005498 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fc80 	bl	8005d8c <USBD_CtlError>
          break;
 800548c:	e004      	b.n	8005498 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800548e:	6839      	ldr	r1, [r7, #0]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fc7b 	bl	8005d8c <USBD_CtlError>
          break;
 8005496:	e000      	b.n	800549a <USBD_StdItfReq+0x76>
          break;
 8005498:	bf00      	nop
      }
      break;
 800549a:	e004      	b.n	80054a6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fc74 	bl	8005d8c <USBD_CtlError>
      break;
 80054a4:	bf00      	nop
  }

  return USBD_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	889b      	ldrh	r3, [r3, #4]
 80054c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d004      	beq.n	80054da <USBD_StdEPReq+0x2a>
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d002      	beq.n	80054da <USBD_StdEPReq+0x2a>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <USBD_StdEPReq+0x3a>
 80054d8:	e13d      	b.n	8005756 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	4798      	blx	r3
      break;
 80054e8:	e13a      	b.n	8005760 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d10a      	bne.n	800550c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	e12a      	b.n	8005762 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d03e      	beq.n	8005592 <USBD_StdEPReq+0xe2>
 8005514:	2b03      	cmp	r3, #3
 8005516:	d002      	beq.n	800551e <USBD_StdEPReq+0x6e>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d070      	beq.n	80055fe <USBD_StdEPReq+0x14e>
 800551c:	e115      	b.n	800574a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005524:	2b02      	cmp	r3, #2
 8005526:	d002      	beq.n	800552e <USBD_StdEPReq+0x7e>
 8005528:	2b03      	cmp	r3, #3
 800552a:	d015      	beq.n	8005558 <USBD_StdEPReq+0xa8>
 800552c:	e02b      	b.n	8005586 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800552e:	7bbb      	ldrb	r3, [r7, #14]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00c      	beq.n	800554e <USBD_StdEPReq+0x9e>
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d009      	beq.n	800554e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800553a:	7bbb      	ldrb	r3, [r7, #14]
 800553c:	4619      	mov	r1, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 f88e 	bl	8006660 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005544:	2180      	movs	r1, #128	; 0x80
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 f88a 	bl	8006660 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800554c:	e020      	b.n	8005590 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fc1b 	bl	8005d8c <USBD_CtlError>
              break;
 8005556:	e01b      	b.n	8005590 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	885b      	ldrh	r3, [r3, #2]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10e      	bne.n	800557e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005560:	7bbb      	ldrb	r3, [r7, #14]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00b      	beq.n	800557e <USBD_StdEPReq+0xce>
 8005566:	7bbb      	ldrb	r3, [r7, #14]
 8005568:	2b80      	cmp	r3, #128	; 0x80
 800556a:	d008      	beq.n	800557e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	88db      	ldrh	r3, [r3, #6]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005574:	7bbb      	ldrb	r3, [r7, #14]
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f001 f871 	bl	8006660 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fccc 	bl	8005f1c <USBD_CtlSendStatus>

              break;
 8005584:	e004      	b.n	8005590 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fbff 	bl	8005d8c <USBD_CtlError>
              break;
 800558e:	bf00      	nop
          }
          break;
 8005590:	e0e0      	b.n	8005754 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005598:	2b02      	cmp	r3, #2
 800559a:	d002      	beq.n	80055a2 <USBD_StdEPReq+0xf2>
 800559c:	2b03      	cmp	r3, #3
 800559e:	d015      	beq.n	80055cc <USBD_StdEPReq+0x11c>
 80055a0:	e026      	b.n	80055f0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <USBD_StdEPReq+0x112>
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	2b80      	cmp	r3, #128	; 0x80
 80055ac:	d009      	beq.n	80055c2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 f854 	bl	8006660 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80055b8:	2180      	movs	r1, #128	; 0x80
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 f850 	bl	8006660 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80055c0:	e01c      	b.n	80055fc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fbe1 	bl	8005d8c <USBD_CtlError>
              break;
 80055ca:	e017      	b.n	80055fc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	885b      	ldrh	r3, [r3, #2]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d112      	bne.n	80055fa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80055de:	7bbb      	ldrb	r3, [r7, #14]
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f001 f85b 	bl	800669e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fc97 	bl	8005f1c <USBD_CtlSendStatus>
              }
              break;
 80055ee:	e004      	b.n	80055fa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fbca 	bl	8005d8c <USBD_CtlError>
              break;
 80055f8:	e000      	b.n	80055fc <USBD_StdEPReq+0x14c>
              break;
 80055fa:	bf00      	nop
          }
          break;
 80055fc:	e0aa      	b.n	8005754 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005604:	2b02      	cmp	r3, #2
 8005606:	d002      	beq.n	800560e <USBD_StdEPReq+0x15e>
 8005608:	2b03      	cmp	r3, #3
 800560a:	d032      	beq.n	8005672 <USBD_StdEPReq+0x1c2>
 800560c:	e097      	b.n	800573e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800560e:	7bbb      	ldrb	r3, [r7, #14]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <USBD_StdEPReq+0x174>
 8005614:	7bbb      	ldrb	r3, [r7, #14]
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	d004      	beq.n	8005624 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fbb5 	bl	8005d8c <USBD_CtlError>
                break;
 8005622:	e091      	b.n	8005748 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005628:	2b00      	cmp	r3, #0
 800562a:	da0b      	bge.n	8005644 <USBD_StdEPReq+0x194>
 800562c:	7bbb      	ldrb	r3, [r7, #14]
 800562e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	3310      	adds	r3, #16
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	4413      	add	r3, r2
 8005640:	3304      	adds	r3, #4
 8005642:	e00b      	b.n	800565c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005644:	7bbb      	ldrb	r3, [r7, #14]
 8005646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	3304      	adds	r3, #4
 800565c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2202      	movs	r2, #2
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fbf8 	bl	8005e60 <USBD_CtlSendData>
              break;
 8005670:	e06a      	b.n	8005748 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da11      	bge.n	800569e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800567a:	7bbb      	ldrb	r3, [r7, #14]
 800567c:	f003 020f 	and.w	r2, r3, #15
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	3318      	adds	r3, #24
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d117      	bne.n	80056c4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb78 	bl	8005d8c <USBD_CtlError>
                  break;
 800569c:	e054      	b.n	8005748 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	f003 020f 	and.w	r2, r3, #15
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb65 	bl	8005d8c <USBD_CtlError>
                  break;
 80056c2:	e041      	b.n	8005748 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	da0b      	bge.n	80056e4 <USBD_StdEPReq+0x234>
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	3310      	adds	r3, #16
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	4413      	add	r3, r2
 80056e0:	3304      	adds	r3, #4
 80056e2:	e00b      	b.n	80056fc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	3304      	adds	r3, #4
 80056fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80056fe:	7bbb      	ldrb	r3, [r7, #14]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <USBD_StdEPReq+0x25a>
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	2b80      	cmp	r3, #128	; 0x80
 8005708:	d103      	bne.n	8005712 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e00e      	b.n	8005730 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 ffe0 	bl	80066dc <USBD_LL_IsStallEP>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	e002      	b.n	8005730 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2202      	movs	r2, #2
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fb92 	bl	8005e60 <USBD_CtlSendData>
              break;
 800573c:	e004      	b.n	8005748 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fb23 	bl	8005d8c <USBD_CtlError>
              break;
 8005746:	bf00      	nop
          }
          break;
 8005748:	e004      	b.n	8005754 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fb1d 	bl	8005d8c <USBD_CtlError>
          break;
 8005752:	bf00      	nop
      }
      break;
 8005754:	e004      	b.n	8005760 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fb17 	bl	8005d8c <USBD_CtlError>
      break;
 800575e:	bf00      	nop
  }

  return ret;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	885b      	ldrh	r3, [r3, #2]
 8005786:	0a1b      	lsrs	r3, r3, #8
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	2b06      	cmp	r3, #6
 800578e:	f200 8128 	bhi.w	80059e2 <USBD_GetDescriptor+0x276>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <USBD_GetDescriptor+0x2c>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057b5 	.word	0x080057b5
 800579c:	080057cd 	.word	0x080057cd
 80057a0:	0800580d 	.word	0x0800580d
 80057a4:	080059e3 	.word	0x080059e3
 80057a8:	080059e3 	.word	0x080059e3
 80057ac:	08005983 	.word	0x08005983
 80057b0:	080059af 	.word	0x080059af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	7c12      	ldrb	r2, [r2, #16]
 80057c0:	f107 0108 	add.w	r1, r7, #8
 80057c4:	4610      	mov	r0, r2
 80057c6:	4798      	blx	r3
 80057c8:	60f8      	str	r0, [r7, #12]
      break;
 80057ca:	e112      	b.n	80059f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	7c1b      	ldrb	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10d      	bne.n	80057f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	f107 0208 	add.w	r2, r7, #8
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
 80057e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3301      	adds	r3, #1
 80057ea:	2202      	movs	r2, #2
 80057ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80057ee:	e100      	b.n	80059f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	f107 0208 	add.w	r2, r7, #8
 80057fc:	4610      	mov	r0, r2
 80057fe:	4798      	blx	r3
 8005800:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3301      	adds	r3, #1
 8005806:	2202      	movs	r2, #2
 8005808:	701a      	strb	r2, [r3, #0]
      break;
 800580a:	e0f2      	b.n	80059f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	885b      	ldrh	r3, [r3, #2]
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b05      	cmp	r3, #5
 8005814:	f200 80ac 	bhi.w	8005970 <USBD_GetDescriptor+0x204>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <USBD_GetDescriptor+0xb4>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005839 	.word	0x08005839
 8005824:	0800586d 	.word	0x0800586d
 8005828:	080058a1 	.word	0x080058a1
 800582c:	080058d5 	.word	0x080058d5
 8005830:	08005909 	.word	0x08005909
 8005834:	0800593d 	.word	0x0800593d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	7c12      	ldrb	r2, [r2, #16]
 8005850:	f107 0108 	add.w	r1, r7, #8
 8005854:	4610      	mov	r0, r2
 8005856:	4798      	blx	r3
 8005858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800585a:	e091      	b.n	8005980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fa94 	bl	8005d8c <USBD_CtlError>
            err++;
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	3301      	adds	r3, #1
 8005868:	72fb      	strb	r3, [r7, #11]
          break;
 800586a:	e089      	b.n	8005980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00b      	beq.n	8005890 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	7c12      	ldrb	r2, [r2, #16]
 8005884:	f107 0108 	add.w	r1, r7, #8
 8005888:	4610      	mov	r0, r2
 800588a:	4798      	blx	r3
 800588c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800588e:	e077      	b.n	8005980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa7a 	bl	8005d8c <USBD_CtlError>
            err++;
 8005898:	7afb      	ldrb	r3, [r7, #11]
 800589a:	3301      	adds	r3, #1
 800589c:	72fb      	strb	r3, [r7, #11]
          break;
 800589e:	e06f      	b.n	8005980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	7c12      	ldrb	r2, [r2, #16]
 80058b8:	f107 0108 	add.w	r1, r7, #8
 80058bc:	4610      	mov	r0, r2
 80058be:	4798      	blx	r3
 80058c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058c2:	e05d      	b.n	8005980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa60 	bl	8005d8c <USBD_CtlError>
            err++;
 80058cc:	7afb      	ldrb	r3, [r7, #11]
 80058ce:	3301      	adds	r3, #1
 80058d0:	72fb      	strb	r3, [r7, #11]
          break;
 80058d2:	e055      	b.n	8005980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00b      	beq.n	80058f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	7c12      	ldrb	r2, [r2, #16]
 80058ec:	f107 0108 	add.w	r1, r7, #8
 80058f0:	4610      	mov	r0, r2
 80058f2:	4798      	blx	r3
 80058f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058f6:	e043      	b.n	8005980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa46 	bl	8005d8c <USBD_CtlError>
            err++;
 8005900:	7afb      	ldrb	r3, [r7, #11]
 8005902:	3301      	adds	r3, #1
 8005904:	72fb      	strb	r3, [r7, #11]
          break;
 8005906:	e03b      	b.n	8005980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	7c12      	ldrb	r2, [r2, #16]
 8005920:	f107 0108 	add.w	r1, r7, #8
 8005924:	4610      	mov	r0, r2
 8005926:	4798      	blx	r3
 8005928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800592a:	e029      	b.n	8005980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa2c 	bl	8005d8c <USBD_CtlError>
            err++;
 8005934:	7afb      	ldrb	r3, [r7, #11]
 8005936:	3301      	adds	r3, #1
 8005938:	72fb      	strb	r3, [r7, #11]
          break;
 800593a:	e021      	b.n	8005980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	7c12      	ldrb	r2, [r2, #16]
 8005954:	f107 0108 	add.w	r1, r7, #8
 8005958:	4610      	mov	r0, r2
 800595a:	4798      	blx	r3
 800595c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800595e:	e00f      	b.n	8005980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fa12 	bl	8005d8c <USBD_CtlError>
            err++;
 8005968:	7afb      	ldrb	r3, [r7, #11]
 800596a:	3301      	adds	r3, #1
 800596c:	72fb      	strb	r3, [r7, #11]
          break;
 800596e:	e007      	b.n	8005980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fa0a 	bl	8005d8c <USBD_CtlError>
          err++;
 8005978:	7afb      	ldrb	r3, [r7, #11]
 800597a:	3301      	adds	r3, #1
 800597c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800597e:	e038      	b.n	80059f2 <USBD_GetDescriptor+0x286>
 8005980:	e037      	b.n	80059f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	7c1b      	ldrb	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005992:	f107 0208 	add.w	r2, r7, #8
 8005996:	4610      	mov	r0, r2
 8005998:	4798      	blx	r3
 800599a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800599c:	e029      	b.n	80059f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f9f3 	bl	8005d8c <USBD_CtlError>
        err++;
 80059a6:	7afb      	ldrb	r3, [r7, #11]
 80059a8:	3301      	adds	r3, #1
 80059aa:	72fb      	strb	r3, [r7, #11]
      break;
 80059ac:	e021      	b.n	80059f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	7c1b      	ldrb	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f107 0208 	add.w	r2, r7, #8
 80059c2:	4610      	mov	r0, r2
 80059c4:	4798      	blx	r3
 80059c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	2207      	movs	r2, #7
 80059ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059d0:	e00f      	b.n	80059f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f9d9 	bl	8005d8c <USBD_CtlError>
        err++;
 80059da:	7afb      	ldrb	r3, [r7, #11]
 80059dc:	3301      	adds	r3, #1
 80059de:	72fb      	strb	r3, [r7, #11]
      break;
 80059e0:	e007      	b.n	80059f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f9d1 	bl	8005d8c <USBD_CtlError>
      err++;
 80059ea:	7afb      	ldrb	r3, [r7, #11]
 80059ec:	3301      	adds	r3, #1
 80059ee:	72fb      	strb	r3, [r7, #11]
      break;
 80059f0:	bf00      	nop
  }

  if (err != 0U)
 80059f2:	7afb      	ldrb	r3, [r7, #11]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d11c      	bne.n	8005a32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80059f8:	893b      	ldrh	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d011      	beq.n	8005a22 <USBD_GetDescriptor+0x2b6>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	88db      	ldrh	r3, [r3, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00d      	beq.n	8005a22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	88da      	ldrh	r2, [r3, #6]
 8005a0a:	893b      	ldrh	r3, [r7, #8]
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	bf28      	it	cs
 8005a10:	4613      	movcs	r3, r2
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a16:	893b      	ldrh	r3, [r7, #8]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fa1f 	bl	8005e60 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	88db      	ldrh	r3, [r3, #6]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d104      	bne.n	8005a34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa76 	bl	8005f1c <USBD_CtlSendStatus>
 8005a30:	e000      	b.n	8005a34 <USBD_GetDescriptor+0x2c8>
    return;
 8005a32:	bf00      	nop
    }
  }
}
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop

08005a3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	889b      	ldrh	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d130      	bne.n	8005ab0 <USBD_SetAddress+0x74>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	88db      	ldrh	r3, [r3, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d12c      	bne.n	8005ab0 <USBD_SetAddress+0x74>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	885b      	ldrh	r3, [r3, #2]
 8005a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5c:	d828      	bhi.n	8005ab0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	885b      	ldrh	r3, [r3, #2]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d104      	bne.n	8005a7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f988 	bl	8005d8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7c:	e01c      	b.n	8005ab8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7bfa      	ldrb	r2, [r7, #15]
 8005a82:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fe4b 	bl	8006726 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fa43 	bl	8005f1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa4:	e008      	b.n	8005ab8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aae:	e003      	b.n	8005ab8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f96a 	bl	8005d8c <USBD_CtlError>
  }
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	885b      	ldrh	r3, [r3, #2]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	4b41      	ldr	r3, [pc, #260]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005ad2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ad4:	4b40      	ldr	r3, [pc, #256]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d904      	bls.n	8005ae6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f954 	bl	8005d8c <USBD_CtlError>
 8005ae4:	e075      	b.n	8005bd2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d002      	beq.n	8005af6 <USBD_SetConfig+0x36>
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d023      	beq.n	8005b3c <USBD_SetConfig+0x7c>
 8005af4:	e062      	b.n	8005bbc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005af6:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01a      	beq.n	8005b34 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005afe:	4b36      	ldr	r3, [pc, #216]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005b10:	4b31      	ldr	r3, [pc, #196]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff f9f3 	bl	8004f02 <USBD_SetClassConfig>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d104      	bne.n	8005b2c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f931 	bl	8005d8c <USBD_CtlError>
            return;
 8005b2a:	e052      	b.n	8005bd2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f9f5 	bl	8005f1c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005b32:	e04e      	b.n	8005bd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f9f1 	bl	8005f1c <USBD_CtlSendStatus>
        break;
 8005b3a:	e04a      	b.n	8005bd2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005b3c:	4b26      	ldr	r3, [pc, #152]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d112      	bne.n	8005b6a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005b4c:	4b22      	ldr	r3, [pc, #136]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	461a      	mov	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005b56:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff f9ef 	bl	8004f40 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f9da 	bl	8005f1c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005b68:	e033      	b.n	8005bd2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d01d      	beq.n	8005bb4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff f9dd 	bl	8004f40 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff f9b3 	bl	8004f02 <USBD_SetClassConfig>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d104      	bne.n	8005bac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f8f1 	bl	8005d8c <USBD_CtlError>
            return;
 8005baa:	e012      	b.n	8005bd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f9b5 	bl	8005f1c <USBD_CtlSendStatus>
        break;
 8005bb2:	e00e      	b.n	8005bd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f9b1 	bl	8005f1c <USBD_CtlSendStatus>
        break;
 8005bba:	e00a      	b.n	8005bd2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8e4 	bl	8005d8c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005bc4:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <USBD_SetConfig+0x118>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff f9b8 	bl	8004f40 <USBD_ClrClassConfig>
        break;
 8005bd0:	bf00      	nop
    }
  }
}
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	200002d2 	.word	0x200002d2

08005bdc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	88db      	ldrh	r3, [r3, #6]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d004      	beq.n	8005bf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f8cb 	bl	8005d8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005bf6:	e021      	b.n	8005c3c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	db17      	blt.n	8005c32 <USBD_GetConfig+0x56>
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	dd02      	ble.n	8005c0c <USBD_GetConfig+0x30>
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d00b      	beq.n	8005c22 <USBD_GetConfig+0x46>
 8005c0a:	e012      	b.n	8005c32 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3308      	adds	r3, #8
 8005c16:	2201      	movs	r2, #1
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f920 	bl	8005e60 <USBD_CtlSendData>
        break;
 8005c20:	e00c      	b.n	8005c3c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3304      	adds	r3, #4
 8005c26:	2201      	movs	r2, #1
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f918 	bl	8005e60 <USBD_CtlSendData>
        break;
 8005c30:	e004      	b.n	8005c3c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f8a9 	bl	8005d8c <USBD_CtlError>
        break;
 8005c3a:	bf00      	nop
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c54:	3b01      	subs	r3, #1
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d81e      	bhi.n	8005c98 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	88db      	ldrh	r3, [r3, #6]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d004      	beq.n	8005c6c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f891 	bl	8005d8c <USBD_CtlError>
        break;
 8005c6a:	e01a      	b.n	8005ca2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f043 0202 	orr.w	r2, r3, #2
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f8e5 	bl	8005e60 <USBD_CtlSendData>
      break;
 8005c96:	e004      	b.n	8005ca2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f876 	bl	8005d8c <USBD_CtlError>
      break;
 8005ca0:	bf00      	nop
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	885b      	ldrh	r3, [r3, #2]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d106      	bne.n	8005cca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f929 	bl	8005f1c <USBD_CtlSendStatus>
  }
}
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d80b      	bhi.n	8005d00 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	885b      	ldrh	r3, [r3, #2]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10c      	bne.n	8005d0a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f90f 	bl	8005f1c <USBD_CtlSendStatus>
      }
      break;
 8005cfe:	e004      	b.n	8005d0a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f842 	bl	8005d8c <USBD_CtlError>
      break;
 8005d08:	e000      	b.n	8005d0c <USBD_ClrFeature+0x3a>
      break;
 8005d0a:	bf00      	nop
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781a      	ldrb	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	785a      	ldrb	r2, [r3, #1]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	3302      	adds	r3, #2
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	3303      	adds	r3, #3
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	3305      	adds	r3, #5
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	4413      	add	r3, r2
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	3306      	adds	r3, #6
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	3307      	adds	r3, #7
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	80da      	strh	r2, [r3, #6]

}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005d96:	2180      	movs	r1, #128	; 0x80
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fc61 	bl	8006660 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005d9e:	2100      	movs	r1, #0
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fc5d 	bl	8006660 <USBD_LL_StallEP>
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d032      	beq.n	8005e2a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f834 	bl	8005e32 <USBD_GetLen>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	3301      	adds	r3, #1
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	75fa      	strb	r2, [r7, #23]
 8005dde:	461a      	mov	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4413      	add	r3, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	7812      	ldrb	r2, [r2, #0]
 8005de8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	75fa      	strb	r2, [r7, #23]
 8005df0:	461a      	mov	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4413      	add	r3, r2
 8005df6:	2203      	movs	r2, #3
 8005df8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005dfa:	e012      	b.n	8005e22 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	60fa      	str	r2, [r7, #12]
 8005e02:	7dfa      	ldrb	r2, [r7, #23]
 8005e04:	1c51      	adds	r1, r2, #1
 8005e06:	75f9      	strb	r1, [r7, #23]
 8005e08:	4611      	mov	r1, r2
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	75fa      	strb	r2, [r7, #23]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e8      	bne.n	8005dfc <USBD_GetString+0x4e>
    }
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005e3e:	e005      	b.n	8005e4c <USBD_GetLen+0x1a>
  {
    len++;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	3301      	adds	r3, #1
 8005e44:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1f5      	bne.n	8005e40 <USBD_GetLen+0xe>
  }

  return len;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2202      	movs	r2, #2
 8005e72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005e7c:	88fa      	ldrh	r2, [r7, #6]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	2100      	movs	r1, #0
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fc6b 	bl	8006764 <USBD_LL_Transmit>

  return USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	2100      	movs	r1, #0
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fc59 	bl	8006764 <USBD_LL_Transmit>

  return USBD_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2203      	movs	r2, #3
 8005ece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005eda:	88fa      	ldrh	r2, [r7, #6]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fc5e 	bl	80067aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 fc4c 	bl	80067aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2204      	movs	r2, #4
 8005f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2100      	movs	r1, #0
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fc16 	bl	8006764 <USBD_LL_Transmit>

  return USBD_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2205      	movs	r2, #5
 8005f4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f52:	2300      	movs	r3, #0
 8005f54:	2200      	movs	r2, #0
 8005f56:	2100      	movs	r1, #0
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fc26 	bl	80067aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4912      	ldr	r1, [pc, #72]	; (8005fb8 <MX_USB_DEVICE_Init+0x50>)
 8005f70:	4812      	ldr	r0, [pc, #72]	; (8005fbc <MX_USB_DEVICE_Init+0x54>)
 8005f72:	f7fe ff6c 	bl	8004e4e <USBD_Init>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f7c:	f7fa fb6e 	bl	800065c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005f80:	490f      	ldr	r1, [pc, #60]	; (8005fc0 <MX_USB_DEVICE_Init+0x58>)
 8005f82:	480e      	ldr	r0, [pc, #56]	; (8005fbc <MX_USB_DEVICE_Init+0x54>)
 8005f84:	f7fe ff8e 	bl	8004ea4 <USBD_RegisterClass>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005f8e:	f7fa fb65 	bl	800065c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005f92:	490c      	ldr	r1, [pc, #48]	; (8005fc4 <MX_USB_DEVICE_Init+0x5c>)
 8005f94:	4809      	ldr	r0, [pc, #36]	; (8005fbc <MX_USB_DEVICE_Init+0x54>)
 8005f96:	f7fe febf 	bl	8004d18 <USBD_CDC_RegisterInterface>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005fa0:	f7fa fb5c 	bl	800065c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005fa4:	4805      	ldr	r0, [pc, #20]	; (8005fbc <MX_USB_DEVICE_Init+0x54>)
 8005fa6:	f7fe ff96 	bl	8004ed6 <USBD_Start>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005fb0:	f7fa fb54 	bl	800065c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005fb4:	bf00      	nop
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20000138 	.word	0x20000138
 8005fbc:	200005c8 	.word	0x200005c8
 8005fc0:	20000024 	.word	0x20000024
 8005fc4:	20000128 	.word	0x20000128

08005fc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4905      	ldr	r1, [pc, #20]	; (8005fe4 <CDC_Init_FS+0x1c>)
 8005fd0:	4805      	ldr	r0, [pc, #20]	; (8005fe8 <CDC_Init_FS+0x20>)
 8005fd2:	f7fe feb7 	bl	8004d44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005fd6:	4905      	ldr	r1, [pc, #20]	; (8005fec <CDC_Init_FS+0x24>)
 8005fd8:	4803      	ldr	r0, [pc, #12]	; (8005fe8 <CDC_Init_FS+0x20>)
 8005fda:	f7fe fecc 	bl	8004d76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005fde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20000c74 	.word	0x20000c74
 8005fe8:	200005c8 	.word	0x200005c8
 8005fec:	2000088c 	.word	0x2000088c

08005ff0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005ff4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr
	...

08006000 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	6039      	str	r1, [r7, #0]
 800600a:	71fb      	strb	r3, [r7, #7]
 800600c:	4613      	mov	r3, r2
 800600e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	2b23      	cmp	r3, #35	; 0x23
 8006014:	d84a      	bhi.n	80060ac <CDC_Control_FS+0xac>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <CDC_Control_FS+0x1c>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	080060ad 	.word	0x080060ad
 8006020:	080060ad 	.word	0x080060ad
 8006024:	080060ad 	.word	0x080060ad
 8006028:	080060ad 	.word	0x080060ad
 800602c:	080060ad 	.word	0x080060ad
 8006030:	080060ad 	.word	0x080060ad
 8006034:	080060ad 	.word	0x080060ad
 8006038:	080060ad 	.word	0x080060ad
 800603c:	080060ad 	.word	0x080060ad
 8006040:	080060ad 	.word	0x080060ad
 8006044:	080060ad 	.word	0x080060ad
 8006048:	080060ad 	.word	0x080060ad
 800604c:	080060ad 	.word	0x080060ad
 8006050:	080060ad 	.word	0x080060ad
 8006054:	080060ad 	.word	0x080060ad
 8006058:	080060ad 	.word	0x080060ad
 800605c:	080060ad 	.word	0x080060ad
 8006060:	080060ad 	.word	0x080060ad
 8006064:	080060ad 	.word	0x080060ad
 8006068:	080060ad 	.word	0x080060ad
 800606c:	080060ad 	.word	0x080060ad
 8006070:	080060ad 	.word	0x080060ad
 8006074:	080060ad 	.word	0x080060ad
 8006078:	080060ad 	.word	0x080060ad
 800607c:	080060ad 	.word	0x080060ad
 8006080:	080060ad 	.word	0x080060ad
 8006084:	080060ad 	.word	0x080060ad
 8006088:	080060ad 	.word	0x080060ad
 800608c:	080060ad 	.word	0x080060ad
 8006090:	080060ad 	.word	0x080060ad
 8006094:	080060ad 	.word	0x080060ad
 8006098:	080060ad 	.word	0x080060ad
 800609c:	080060ad 	.word	0x080060ad
 80060a0:	080060ad 	.word	0x080060ad
 80060a4:	080060ad 	.word	0x080060ad
 80060a8:	080060ad 	.word	0x080060ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80060ac:	bf00      	nop
  }

  return (USBD_OK);
 80060ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop

080060bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	480c      	ldr	r0, [pc, #48]	; (80060fc <CDC_Receive_FS+0x40>)
 80060ca:	f7fe fe54 	bl	8004d76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80060ce:	480b      	ldr	r0, [pc, #44]	; (80060fc <CDC_Receive_FS+0x40>)
 80060d0:	f7fe fe93 	bl	8004dfa <USBD_CDC_ReceivePacket>

  memcpy(rf_tx_buffer, Buf, *Len);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4808      	ldr	r0, [pc, #32]	; (8006100 <CDC_Receive_FS+0x44>)
 80060de:	f000 fc0b 	bl	80068f8 <memcpy>
  rf_tx_buffer_count = *Len;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <CDC_Receive_FS+0x48>)
 80060ea:	601a      	str	r2, [r3, #0]
  rx_newData = 1;
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <CDC_Receive_FS+0x4c>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]

  //CDC_Transmit_FS(Buf, *Len);
  //HAL_Delay(5);

  return (USBD_OK);
 80060f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	200005c8 	.word	0x200005c8
 8006100:	200001c8 	.word	0x200001c8
 8006104:	200002c8 	.word	0x200002c8
 8006108:	200002ce 	.word	0x200002ce

0800610c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800611c:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <CDC_Transmit_FS+0x48>)
 800611e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006122:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800612e:	2301      	movs	r3, #1
 8006130:	e00b      	b.n	800614a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006132:	887b      	ldrh	r3, [r7, #2]
 8006134:	461a      	mov	r2, r3
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4806      	ldr	r0, [pc, #24]	; (8006154 <CDC_Transmit_FS+0x48>)
 800613a:	f7fe fe03 	bl	8004d44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800613e:	4805      	ldr	r0, [pc, #20]	; (8006154 <CDC_Transmit_FS+0x48>)
 8006140:	f7fe fe2c 	bl	8004d9c <USBD_CDC_TransmitPacket>
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	200005c8 	.word	0x200005c8

08006158 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	6039      	str	r1, [r7, #0]
 8006162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2212      	movs	r2, #18
 8006168:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800616a:	4b03      	ldr	r3, [pc, #12]	; (8006178 <USBD_FS_DeviceDescriptor+0x20>)
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	20000154 	.word	0x20000154

0800617c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	6039      	str	r1, [r7, #0]
 8006186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2204      	movs	r2, #4
 800618c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800618e:	4b03      	ldr	r3, [pc, #12]	; (800619c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000168 	.word	0x20000168

080061a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	6039      	str	r1, [r7, #0]
 80061aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d105      	bne.n	80061be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	4907      	ldr	r1, [pc, #28]	; (80061d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80061b6:	4808      	ldr	r0, [pc, #32]	; (80061d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80061b8:	f7ff fdf9 	bl	8005dae <USBD_GetString>
 80061bc:	e004      	b.n	80061c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	4904      	ldr	r1, [pc, #16]	; (80061d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80061c2:	4805      	ldr	r0, [pc, #20]	; (80061d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80061c4:	f7ff fdf3 	bl	8005dae <USBD_GetString>
  }
  return USBD_StrDesc;
 80061c8:	4b02      	ldr	r3, [pc, #8]	; (80061d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	2000105c 	.word	0x2000105c
 80061d8:	0800694c 	.word	0x0800694c

080061dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	6039      	str	r1, [r7, #0]
 80061e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	4904      	ldr	r1, [pc, #16]	; (80061fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80061ec:	4804      	ldr	r0, [pc, #16]	; (8006200 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80061ee:	f7ff fdde 	bl	8005dae <USBD_GetString>
  return USBD_StrDesc;
 80061f2:	4b02      	ldr	r3, [pc, #8]	; (80061fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	2000105c 	.word	0x2000105c
 8006200:	0800695c 	.word	0x0800695c

08006204 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	6039      	str	r1, [r7, #0]
 800620e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	221a      	movs	r2, #26
 8006214:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006216:	f000 f843 	bl	80062a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800621a:	4b02      	ldr	r3, [pc, #8]	; (8006224 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	2000016c 	.word	0x2000016c

08006228 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	6039      	str	r1, [r7, #0]
 8006232:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d105      	bne.n	8006246 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	4907      	ldr	r1, [pc, #28]	; (800625c <USBD_FS_ConfigStrDescriptor+0x34>)
 800623e:	4808      	ldr	r0, [pc, #32]	; (8006260 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006240:	f7ff fdb5 	bl	8005dae <USBD_GetString>
 8006244:	e004      	b.n	8006250 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	4904      	ldr	r1, [pc, #16]	; (800625c <USBD_FS_ConfigStrDescriptor+0x34>)
 800624a:	4805      	ldr	r0, [pc, #20]	; (8006260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800624c:	f7ff fdaf 	bl	8005dae <USBD_GetString>
  }
  return USBD_StrDesc;
 8006250:	4b02      	ldr	r3, [pc, #8]	; (800625c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	2000105c 	.word	0x2000105c
 8006260:	08006970 	.word	0x08006970

08006264 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	6039      	str	r1, [r7, #0]
 800626e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d105      	bne.n	8006282 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	4907      	ldr	r1, [pc, #28]	; (8006298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800627a:	4808      	ldr	r0, [pc, #32]	; (800629c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800627c:	f7ff fd97 	bl	8005dae <USBD_GetString>
 8006280:	e004      	b.n	800628c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	4904      	ldr	r1, [pc, #16]	; (8006298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006286:	4805      	ldr	r0, [pc, #20]	; (800629c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006288:	f7ff fd91 	bl	8005dae <USBD_GetString>
  }
  return USBD_StrDesc;
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	2000105c 	.word	0x2000105c
 800629c:	0800697c 	.word	0x0800697c

080062a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80062a6:	4b0f      	ldr	r3, [pc, #60]	; (80062e4 <Get_SerialNum+0x44>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80062ac:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <Get_SerialNum+0x48>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80062b2:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <Get_SerialNum+0x4c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80062c6:	2208      	movs	r2, #8
 80062c8:	4909      	ldr	r1, [pc, #36]	; (80062f0 <Get_SerialNum+0x50>)
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f814 	bl	80062f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80062d0:	2204      	movs	r2, #4
 80062d2:	4908      	ldr	r1, [pc, #32]	; (80062f4 <Get_SerialNum+0x54>)
 80062d4:	68b8      	ldr	r0, [r7, #8]
 80062d6:	f000 f80f 	bl	80062f8 <IntToUnicode>
  }
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	1ffff7e8 	.word	0x1ffff7e8
 80062e8:	1ffff7ec 	.word	0x1ffff7ec
 80062ec:	1ffff7f0 	.word	0x1ffff7f0
 80062f0:	2000016e 	.word	0x2000016e
 80062f4:	2000017e 	.word	0x2000017e

080062f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]
 800630e:	e027      	b.n	8006360 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	0f1b      	lsrs	r3, r3, #28
 8006314:	2b09      	cmp	r3, #9
 8006316:	d80b      	bhi.n	8006330 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	0f1b      	lsrs	r3, r3, #28
 800631c:	b2da      	uxtb	r2, r3
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	4619      	mov	r1, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	440b      	add	r3, r1
 8006328:	3230      	adds	r2, #48	; 0x30
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e00a      	b.n	8006346 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	0f1b      	lsrs	r3, r3, #28
 8006334:	b2da      	uxtb	r2, r3
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4619      	mov	r1, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	440b      	add	r3, r1
 8006340:	3237      	adds	r2, #55	; 0x37
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	3301      	adds	r3, #1
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	4413      	add	r3, r2
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	3301      	adds	r3, #1
 800635e:	75fb      	strb	r3, [r7, #23]
 8006360:	7dfa      	ldrb	r2, [r7, #23]
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	429a      	cmp	r2, r3
 8006366:	d3d3      	bcc.n	8006310 <IntToUnicode+0x18>
  }
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr
	...

08006374 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a0d      	ldr	r2, [pc, #52]	; (80063b8 <HAL_PCD_MspInit+0x44>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d113      	bne.n	80063ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <HAL_PCD_MspInit+0x48>)
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	4a0c      	ldr	r2, [pc, #48]	; (80063bc <HAL_PCD_MspInit+0x48>)
 800638c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006390:	61d3      	str	r3, [r2, #28]
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <HAL_PCD_MspInit+0x48>)
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800639e:	2200      	movs	r2, #0
 80063a0:	2100      	movs	r1, #0
 80063a2:	2014      	movs	r0, #20
 80063a4:	f7fa feb5 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80063a8:	2014      	movs	r0, #20
 80063aa:	f7fa fece 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40005c00 	.word	0x40005c00
 80063bc:	40021000 	.word	0x40021000

080063c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7fe fdc5 	bl	8004f66 <USBD_LL_SetupStage>
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	015b      	lsls	r3, r3, #5
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	4619      	mov	r1, r3
 8006408:	f7fe fdf8 	bl	8004ffc <USBD_LL_DataOutStage>
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	015b      	lsls	r3, r3, #5
 800642c:	4413      	add	r3, r2
 800642e:	333c      	adds	r3, #60	; 0x3c
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	4619      	mov	r1, r3
 8006436:	f7fe fe52 	bl	80050de <USBD_LL_DataInStage>
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe ff62 	bl	800531a <USBD_LL_SOF>
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006466:	2301      	movs	r3, #1
 8006468:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d001      	beq.n	8006476 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006472:	f7fa f8f3 	bl	800065c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800647c:	7bfa      	ldrb	r2, [r7, #15]
 800647e:	4611      	mov	r1, r2
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe ff12 	bl	80052aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe fecb 	bl	8005228 <USBD_LL_Reset>
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe ff0c 	bl	80052c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <HAL_PCD_SuspendCallback+0x30>)
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	4a03      	ldr	r2, [pc, #12]	; (80064cc <HAL_PCD_SuspendCallback+0x30>)
 80064be:	f043 0306 	orr.w	r3, r3, #6
 80064c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	e000ed00 	.word	0xe000ed00

080064d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe ff06 	bl	80052f0 <USBD_LL_Resume>
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80064f4:	4a28      	ldr	r2, [pc, #160]	; (8006598 <USBD_LL_Init+0xac>)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a26      	ldr	r2, [pc, #152]	; (8006598 <USBD_LL_Init+0xac>)
 8006500:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006504:	4b24      	ldr	r3, [pc, #144]	; (8006598 <USBD_LL_Init+0xac>)
 8006506:	4a25      	ldr	r2, [pc, #148]	; (800659c <USBD_LL_Init+0xb0>)
 8006508:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800650a:	4b23      	ldr	r3, [pc, #140]	; (8006598 <USBD_LL_Init+0xac>)
 800650c:	2208      	movs	r2, #8
 800650e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006510:	4b21      	ldr	r3, [pc, #132]	; (8006598 <USBD_LL_Init+0xac>)
 8006512:	2202      	movs	r2, #2
 8006514:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <USBD_LL_Init+0xac>)
 8006518:	2200      	movs	r2, #0
 800651a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800651c:	4b1e      	ldr	r3, [pc, #120]	; (8006598 <USBD_LL_Init+0xac>)
 800651e:	2200      	movs	r2, #0
 8006520:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006522:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <USBD_LL_Init+0xac>)
 8006524:	2200      	movs	r2, #0
 8006526:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006528:	481b      	ldr	r0, [pc, #108]	; (8006598 <USBD_LL_Init+0xac>)
 800652a:	f7fa ffcb 	bl	80014c4 <HAL_PCD_Init>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006534:	f7fa f892 	bl	800065c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800653e:	2318      	movs	r3, #24
 8006540:	2200      	movs	r2, #0
 8006542:	2100      	movs	r1, #0
 8006544:	f7fb fe64 	bl	8002210 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800654e:	2358      	movs	r3, #88	; 0x58
 8006550:	2200      	movs	r2, #0
 8006552:	2180      	movs	r1, #128	; 0x80
 8006554:	f7fb fe5c 	bl	8002210 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800655e:	23c0      	movs	r3, #192	; 0xc0
 8006560:	2200      	movs	r2, #0
 8006562:	2181      	movs	r1, #129	; 0x81
 8006564:	f7fb fe54 	bl	8002210 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800656e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006572:	2200      	movs	r2, #0
 8006574:	2101      	movs	r1, #1
 8006576:	f7fb fe4b 	bl	8002210 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006584:	2200      	movs	r2, #0
 8006586:	2182      	movs	r1, #130	; 0x82
 8006588:	f7fb fe42 	bl	8002210 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	2000125c 	.word	0x2000125c
 800659c:	40005c00 	.word	0x40005c00

080065a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fb f865 	bl	8001686 <HAL_PCD_Start>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f948 	bl	8006858 <USBD_Get_USB_Status>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	4608      	mov	r0, r1
 80065e0:	4611      	mov	r1, r2
 80065e2:	461a      	mov	r2, r3
 80065e4:	4603      	mov	r3, r0
 80065e6:	70fb      	strb	r3, [r7, #3]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70bb      	strb	r3, [r7, #2]
 80065ec:	4613      	mov	r3, r2
 80065ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80065fe:	78bb      	ldrb	r3, [r7, #2]
 8006600:	883a      	ldrh	r2, [r7, #0]
 8006602:	78f9      	ldrb	r1, [r7, #3]
 8006604:	f7fb f998 	bl	8001938 <HAL_PCD_EP_Open>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f922 	bl	8006858 <USBD_Get_USB_Status>
 8006614:	4603      	mov	r3, r0
 8006616:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006618:	7bbb      	ldrb	r3, [r7, #14]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800663c:	78fa      	ldrb	r2, [r7, #3]
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f7fb f9d9 	bl	80019f8 <HAL_PCD_EP_Close>
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	4618      	mov	r0, r3
 800664e:	f000 f903 	bl	8006858 <USBD_Get_USB_Status>
 8006652:	4603      	mov	r3, r0
 8006654:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006656:	7bbb      	ldrb	r3, [r7, #14]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f7fb fa83 	bl	8001b8a <HAL_PCD_EP_SetStall>
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 f8e4 	bl	8006858 <USBD_Get_USB_Status>
 8006690:	4603      	mov	r3, r0
 8006692:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006694:	7bbb      	ldrb	r3, [r7, #14]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fb fabe 	bl	8001c3e <HAL_PCD_EP_ClrStall>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f8c5 	bl	8006858 <USBD_Get_USB_Status>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066ee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80066f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da08      	bge.n	800670a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	015b      	lsls	r3, r3, #5
 8006702:	4413      	add	r3, r2
 8006704:	332a      	adds	r3, #42	; 0x2a
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	e008      	b.n	800671c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	015b      	lsls	r3, r3, #5
 8006714:	4413      	add	r3, r2
 8006716:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800671a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr

08006726 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006740:	78fa      	ldrb	r2, [r7, #3]
 8006742:	4611      	mov	r1, r2
 8006744:	4618      	mov	r0, r3
 8006746:	f7fb f8d2 	bl	80018ee <HAL_PCD_SetAddress>
 800674a:	4603      	mov	r3, r0
 800674c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 f881 	bl	8006858 <USBD_Get_USB_Status>
 8006756:	4603      	mov	r3, r0
 8006758:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800675a:	7bbb      	ldrb	r3, [r7, #14]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	461a      	mov	r2, r3
 8006770:	460b      	mov	r3, r1
 8006772:	72fb      	strb	r3, [r7, #11]
 8006774:	4613      	mov	r3, r2
 8006776:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006786:	893b      	ldrh	r3, [r7, #8]
 8006788:	7af9      	ldrb	r1, [r7, #11]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	f7fb f9c4 	bl	8001b18 <HAL_PCD_EP_Transmit>
 8006790:	4603      	mov	r3, r0
 8006792:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f85e 	bl	8006858 <USBD_Get_USB_Status>
 800679c:	4603      	mov	r3, r0
 800679e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80067a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b086      	sub	sp, #24
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	461a      	mov	r2, r3
 80067b6:	460b      	mov	r3, r1
 80067b8:	72fb      	strb	r3, [r7, #11]
 80067ba:	4613      	mov	r3, r2
 80067bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067cc:	893b      	ldrh	r3, [r7, #8]
 80067ce:	7af9      	ldrb	r1, [r7, #11]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	f7fb f953 	bl	8001a7c <HAL_PCD_EP_Receive>
 80067d6:	4603      	mov	r3, r0
 80067d8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 f83b 	bl	8006858 <USBD_Get_USB_Status>
 80067e2:	4603      	mov	r3, r0
 80067e4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80067e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	4611      	mov	r1, r2
 8006806:	4618      	mov	r0, r3
 8006808:	f7fb f972 	bl	8001af0 <HAL_PCD_EP_GetRxCount>
 800680c:	4603      	mov	r3, r0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006820:	4b02      	ldr	r3, [pc, #8]	; (800682c <USBD_static_malloc+0x14>)
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	200002d4 	.word	0x200002d4

08006830 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]

}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	bc80      	pop	{r7}
 8006840:	4770      	bx	lr

08006842 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	2b03      	cmp	r3, #3
 800686a:	d817      	bhi.n	800689c <USBD_Get_USB_Status+0x44>
 800686c:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <USBD_Get_USB_Status+0x1c>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	08006885 	.word	0x08006885
 8006878:	0800688b 	.word	0x0800688b
 800687c:	08006891 	.word	0x08006891
 8006880:	08006897 	.word	0x08006897
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
    break;
 8006888:	e00b      	b.n	80068a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800688a:	2302      	movs	r3, #2
 800688c:	73fb      	strb	r3, [r7, #15]
    break;
 800688e:	e008      	b.n	80068a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006890:	2301      	movs	r3, #1
 8006892:	73fb      	strb	r3, [r7, #15]
    break;
 8006894:	e005      	b.n	80068a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006896:	2302      	movs	r3, #2
 8006898:	73fb      	strb	r3, [r7, #15]
    break;
 800689a:	e002      	b.n	80068a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800689c:	2302      	movs	r3, #2
 800689e:	73fb      	strb	r3, [r7, #15]
    break;
 80068a0:	bf00      	nop
  }
  return usb_status;
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop

080068b0 <__libc_init_array>:
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	2500      	movs	r5, #0
 80068b4:	4e0c      	ldr	r6, [pc, #48]	; (80068e8 <__libc_init_array+0x38>)
 80068b6:	4c0d      	ldr	r4, [pc, #52]	; (80068ec <__libc_init_array+0x3c>)
 80068b8:	1ba4      	subs	r4, r4, r6
 80068ba:	10a4      	asrs	r4, r4, #2
 80068bc:	42a5      	cmp	r5, r4
 80068be:	d109      	bne.n	80068d4 <__libc_init_array+0x24>
 80068c0:	f000 f82e 	bl	8006920 <_init>
 80068c4:	2500      	movs	r5, #0
 80068c6:	4e0a      	ldr	r6, [pc, #40]	; (80068f0 <__libc_init_array+0x40>)
 80068c8:	4c0a      	ldr	r4, [pc, #40]	; (80068f4 <__libc_init_array+0x44>)
 80068ca:	1ba4      	subs	r4, r4, r6
 80068cc:	10a4      	asrs	r4, r4, #2
 80068ce:	42a5      	cmp	r5, r4
 80068d0:	d105      	bne.n	80068de <__libc_init_array+0x2e>
 80068d2:	bd70      	pop	{r4, r5, r6, pc}
 80068d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068d8:	4798      	blx	r3
 80068da:	3501      	adds	r5, #1
 80068dc:	e7ee      	b.n	80068bc <__libc_init_array+0xc>
 80068de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068e2:	4798      	blx	r3
 80068e4:	3501      	adds	r5, #1
 80068e6:	e7f2      	b.n	80068ce <__libc_init_array+0x1e>
 80068e8:	0800699c 	.word	0x0800699c
 80068ec:	0800699c 	.word	0x0800699c
 80068f0:	0800699c 	.word	0x0800699c
 80068f4:	080069a0 	.word	0x080069a0

080068f8 <memcpy>:
 80068f8:	b510      	push	{r4, lr}
 80068fa:	1e43      	subs	r3, r0, #1
 80068fc:	440a      	add	r2, r1
 80068fe:	4291      	cmp	r1, r2
 8006900:	d100      	bne.n	8006904 <memcpy+0xc>
 8006902:	bd10      	pop	{r4, pc}
 8006904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800690c:	e7f7      	b.n	80068fe <memcpy+0x6>

0800690e <memset>:
 800690e:	4603      	mov	r3, r0
 8006910:	4402      	add	r2, r0
 8006912:	4293      	cmp	r3, r2
 8006914:	d100      	bne.n	8006918 <memset+0xa>
 8006916:	4770      	bx	lr
 8006918:	f803 1b01 	strb.w	r1, [r3], #1
 800691c:	e7f9      	b.n	8006912 <memset+0x4>
	...

08006920 <_init>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr

0800692c <_fini>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr
