
nrf-ShieldHost-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006920  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a90  08006a90  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  08006a90  08006a90  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a90  08006a90  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a94  08006a94  00016a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08006a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001340  20000188  08006c20  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c8  08006c20  000214c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163f8  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030f1  00000000  00000000  000365a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  000396a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  0003a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d8b  00000000  00000000  0003af98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db19  00000000  00000000  00051d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f7f3  00000000  00000000  0005f83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf02f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e4  00000000  00000000  000cf0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a14 	.word	0x08006a14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08006a14 	.word	0x08006a14

0800014c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000186:	bf00      	nop
     __ASM volatile ("NOP");
 8000188:	bf00      	nop
  __ASM volatile ("NOP");
 800018a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
  }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ac:	b590      	push	{r4, r7, lr}
 80001ae:	b093      	sub	sp, #76	; 0x4c
 80001b0:	af12      	add	r7, sp, #72	; 0x48
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b2:	f000 fec5 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b6:	f000 f845 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ba:	f000 f8d5 	bl	8000368 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001be:	f000 f89d 	bl	80002fc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001c2:	f005 ff4b 	bl	800605c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init ();
 80001c6:	f7ff ffc1 	bl	800014c <DWT_Delay_Init>

  nRFint_guard = 0;		// Do not execute interruptions until the nRF initalization is complete
 80001ca:	4b17      	ldr	r3, [pc, #92]	; (8000228 <main+0x7c>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	701a      	strb	r2, [r3, #0]
  rf_tx_buffer_count = 0;
 80001d0:	4b16      	ldr	r3, [pc, #88]	; (800022c <main+0x80>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
  rf_tx_SendMsg = 0;
 80001d6:	4b16      	ldr	r3, [pc, #88]	; (8000230 <main+0x84>)
 80001d8:	2200      	movs	r2, #0
 80001da:	701a      	strb	r2, [r3, #0]
  rfBridgeON = 0;   	// Don't transfer data via RF until the Handshake HOST <-> STM is complete
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <main+0x88>)
 80001de:	2200      	movs	r2, #0
 80001e0:	701a      	strb	r2, [r3, #0]

  nRF24L01_STM32(hspi1); // Set the SPI parameters for the nRF library
 80001e2:	4c15      	ldr	r4, [pc, #84]	; (8000238 <main+0x8c>)
 80001e4:	4668      	mov	r0, sp
 80001e6:	f104 0310 	add.w	r3, r4, #16
 80001ea:	2248      	movs	r2, #72	; 0x48
 80001ec:	4619      	mov	r1, r3
 80001ee:	f006 fbfd 	bl	80069ec <memcpy>
 80001f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80001f6:	f000 faab 	bl	8000750 <nRF24L01_STM32>

  // Initiate the nRF with the channel, data rate and tx power parameters
  init(nRF_Canal, RF_DATA_RATE_1Mbps, RF_TX_POWER_0dBm, autoAck_enabled);
 80001fa:	4b10      	ldr	r3, [pc, #64]	; (800023c <main+0x90>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2203      	movs	r2, #3
 8000200:	2100      	movs	r1, #0
 8000202:	2092      	movs	r0, #146	; 0x92
 8000204:	f000 fabc 	bl	8000780 <init>
  rx_newPayload = 0;
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <main+0x94>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
  nRFint_guard = 1; //Liberar execução da interrupção externa
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <main+0x7c>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  get_Msg_fromHost();	// Read the messages from the host received via USB
 8000214:	f000 f97e 	bl	8000514 <get_Msg_fromHost>

	  IRQ_read();
 8000218:	f000 f936 	bl	8000488 <IRQ_read>


	  tx_task();	// If there is message from the Host, read correctly by get_Msg_fromHost(), it's
 800021c:	f000 f9e4 	bl	80005e8 <tx_task>
	  	  	  	  	//  sent to the MIP via RF

	  rx_task();  	// Verifies if package arrived from the MIP (via RF) and send it to the Host via COM port.
 8000220:	f000 f958 	bl	80004d4 <rx_task>
	  get_Msg_fromHost();	// Read the messages from the host received via USB
 8000224:	e7f6      	b.n	8000214 <main+0x68>
 8000226:	bf00      	nop
 8000228:	200001c4 	.word	0x200001c4
 800022c:	200002c8 	.word	0x200002c8
 8000230:	200002cc 	.word	0x200002cc
 8000234:	200002cd 	.word	0x200002cd
 8000238:	2000056c 	.word	0x2000056c
 800023c:	20000000 	.word	0x20000000
 8000240:	200001c6 	.word	0x200001c6

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b094      	sub	sp, #80	; 0x50
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f006 fbd5 	bl	8006a02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000274:	2301      	movs	r3, #1
 8000276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000290:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000294:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029a:	4618      	mov	r0, r3
 800029c:	f002 f864 	bl	8002368 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002a6:	f000 fa2b 	bl	8000700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2101      	movs	r1, #1
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 face 	bl	8002868 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002d2:	f000 fa15 	bl	8000700 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002d6:	2310      	movs	r3, #16
 80002d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002de:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fc34 	bl	8002b50 <HAL_RCCEx_PeriphCLKConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ee:	f000 fa07 	bl	8000700 <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3750      	adds	r7, #80	; 0x50
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000300:	4b17      	ldr	r3, [pc, #92]	; (8000360 <MX_SPI1_Init+0x64>)
 8000302:	4a18      	ldr	r2, [pc, #96]	; (8000364 <MX_SPI1_Init+0x68>)
 8000304:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000306:	4b16      	ldr	r3, [pc, #88]	; (8000360 <MX_SPI1_Init+0x64>)
 8000308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800030c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <MX_SPI1_Init+0x64>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_SPI1_Init+0x64>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MX_SPI1_Init+0x64>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_SPI1_Init+0x64>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <MX_SPI1_Init+0x64>)
 8000328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800032c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <MX_SPI1_Init+0x64>)
 8000330:	2210      	movs	r2, #16
 8000332:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <MX_SPI1_Init+0x64>)
 8000336:	2200      	movs	r2, #0
 8000338:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_SPI1_Init+0x64>)
 800033c:	2200      	movs	r2, #0
 800033e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <MX_SPI1_Init+0x64>)
 8000342:	2200      	movs	r2, #0
 8000344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_SPI1_Init+0x64>)
 8000348:	220a      	movs	r2, #10
 800034a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <MX_SPI1_Init+0x64>)
 800034e:	f002 fcb5 	bl	8002cbc <HAL_SPI_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000358:	f000 f9d2 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	2000056c 	.word	0x2000056c
 8000364:	40013000 	.word	0x40013000

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037c:	4b3e      	ldr	r3, [pc, #248]	; (8000478 <MX_GPIO_Init+0x110>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a3d      	ldr	r2, [pc, #244]	; (8000478 <MX_GPIO_Init+0x110>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b3b      	ldr	r3, [pc, #236]	; (8000478 <MX_GPIO_Init+0x110>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0310 	and.w	r3, r3, #16
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000394:	4b38      	ldr	r3, [pc, #224]	; (8000478 <MX_GPIO_Init+0x110>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a37      	ldr	r2, [pc, #220]	; (8000478 <MX_GPIO_Init+0x110>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b35      	ldr	r3, [pc, #212]	; (8000478 <MX_GPIO_Init+0x110>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b32      	ldr	r3, [pc, #200]	; (8000478 <MX_GPIO_Init+0x110>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a31      	ldr	r2, [pc, #196]	; (8000478 <MX_GPIO_Init+0x110>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b2f      	ldr	r3, [pc, #188]	; (8000478 <MX_GPIO_Init+0x110>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b2c      	ldr	r3, [pc, #176]	; (8000478 <MX_GPIO_Init+0x110>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a2b      	ldr	r2, [pc, #172]	; (8000478 <MX_GPIO_Init+0x110>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b29      	ldr	r3, [pc, #164]	; (8000478 <MX_GPIO_Init+0x110>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	603b      	str	r3, [r7, #0]
 80003da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e2:	4826      	ldr	r0, [pc, #152]	; (800047c <MX_GPIO_Init+0x114>)
 80003e4:	f001 f8af 	bl	8001546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_CE_Pin|RF_CSN_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2118      	movs	r1, #24
 80003ec:	4824      	ldr	r0, [pc, #144]	; (8000480 <MX_GPIO_Init+0x118>)
 80003ee:	f001 f8aa 	bl	8001546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_VERDE_Pin|LED_VERMELHO_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80003f8:	4822      	ldr	r0, [pc, #136]	; (8000484 <MX_GPIO_Init+0x11c>)
 80003fa:	f001 f8a4 	bl	8001546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2302      	movs	r3, #2
 800040e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	4819      	ldr	r0, [pc, #100]	; (800047c <MX_GPIO_Init+0x114>)
 8000418:	f000 ff24 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CE_Pin RF_CSN_Pin */
  GPIO_InitStruct.Pin = RF_CE_Pin|RF_CSN_Pin;
 800041c:	2318      	movs	r3, #24
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2302      	movs	r3, #2
 800042a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	4813      	ldr	r0, [pc, #76]	; (8000480 <MX_GPIO_Init+0x118>)
 8000434:	f000 ff16 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 8000438:	2301      	movs	r3, #1
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	480e      	ldr	r0, [pc, #56]	; (8000484 <MX_GPIO_Init+0x11c>)
 800044c:	f000 ff0a 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERDE_Pin LED_VERMELHO_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_VERMELHO_Pin;
 8000450:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2302      	movs	r3, #2
 8000460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	4806      	ldr	r0, [pc, #24]	; (8000484 <MX_GPIO_Init+0x11c>)
 800046a:	f000 fefb 	bl	8001264 <HAL_GPIO_Init>

}
 800046e:	bf00      	nop
 8000470:	3720      	adds	r7, #32
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	40011000 	.word	0x40011000
 8000480:	40010800 	.word	0x40010800
 8000484:	40010c00 	.word	0x40010c00

08000488 <IRQ_read>:
  }
}*/


void IRQ_read()
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800048c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000490:	480a      	ldr	r0, [pc, #40]	; (80004bc <IRQ_read+0x34>)
 8000492:	f001 f870 	bl	8001576 <HAL_GPIO_TogglePin>
	if( (nRFint_guard > 0) && (HAL_GPIO_ReadPin(RF_IRQ_GPIO_Port, RF_IRQ_Pin) == 0) )
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <IRQ_read+0x38>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d00b      	beq.n	80004b6 <IRQ_read+0x2e>
 800049e:	2101      	movs	r1, #1
 80004a0:	4808      	ldr	r0, [pc, #32]	; (80004c4 <IRQ_read+0x3c>)
 80004a2:	f001 f839 	bl	8001518 <HAL_GPIO_ReadPin>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d104      	bne.n	80004b6 <IRQ_read+0x2e>
	{
		//HAL_Delay(5);
		RF_IRQ(rx_buf, &rx_payloadWidth, &rx_newPayload);
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <IRQ_read+0x40>)
 80004ae:	4907      	ldr	r1, [pc, #28]	; (80004cc <IRQ_read+0x44>)
 80004b0:	4807      	ldr	r0, [pc, #28]	; (80004d0 <IRQ_read+0x48>)
 80004b2:	f000 fb85 	bl	8000bc0 <RF_IRQ>
	}
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40011000 	.word	0x40011000
 80004c0:	200001c4 	.word	0x200001c4
 80004c4:	40010c00 	.word	0x40010c00
 80004c8:	200001c6 	.word	0x200001c6
 80004cc:	200001c5 	.word	0x200001c5
 80004d0:	2000054c 	.word	0x2000054c

080004d4 <rx_task>:

/**
 * Verifica se algum pacote foi recebido pela interrupção e envia ao Host.
 */
void rx_task()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
    //Verificar se chegou (recebeu) um novo pacote pelo canal RF.
    //(O MIP enviou um pacote para o HOST).
    if (rx_newPayload > 0)  //newPayload setada em IRQ de chegada de novo pacote (RX)
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <rx_task+0x34>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d010      	beq.n	8000502 <rx_task+0x2e>
    {

        rx_newPayload = 0; //sdinalizar payload recebida
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <rx_task+0x34>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]

        if(rx_payloadWidth > 0) //Se a interrupção foi gerado por algum ruído etc, não teremos dados no payload
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <rx_task+0x38>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d009      	beq.n	8000502 <rx_task+0x2e>
        {
          //Enviar pacote recebido para o código do HOST (Visual Studio) via serial COMM (USB)

        	CDC_Transmit_FS(rx_buf, rx_payloadWidth);
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <rx_task+0x38>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <rx_task+0x3c>)
 80004f8:	f005 fe82 	bl	8006200 <CDC_Transmit_FS>
        	HAL_Delay(5);
 80004fc:	2005      	movs	r0, #5
 80004fe:	f000 fd81 	bl	8001004 <HAL_Delay>
        }

    }
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200001c6 	.word	0x200001c6
 800050c:	200001c5 	.word	0x200001c5
 8000510:	2000054c 	.word	0x2000054c

08000514 <get_Msg_fromHost>:
 * it is done in this function and it activates the rx_tx_SendMsg flag that allows redirectioning the messages from
 * the nRF to the Host. If the handshake its already been done, it reads the message from the host (ended with '\0')
 * via COM port and puts it in the RF transmission buffer to the MIP.
 */
void get_Msg_fromHost()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

    // The rx_newData variable is modified in the callback function called when new data
	//  comes through the serial port (CDC_Receive_FS)

    //Se não estiver enviando mensagem do Buffer TX para o HOST:
    if ((rx_newData == 1) && (rf_tx_SendMsg == 0))
 800051a:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <get_Msg_fromHost+0xc0>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d154      	bne.n	80005cc <get_Msg_fromHost+0xb8>
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <get_Msg_fromHost+0xc4>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d150      	bne.n	80005cc <get_Msg_fromHost+0xb8>
    {
    	int i, rc;
    	rx_newData = 0;
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <get_Msg_fromHost+0xc0>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
    	//memcpy(rf_tx_buffer, buf, len); // Salva os dados do vetor buf em rf_tx_buffer
    	//rf_tx_buffer_count = len;		// Salva a qte de bytes de len em rf_tx_buffer_count

    	// Pega o último byte de rf_tx_buffer e salva em rc
        rc = rf_tx_buffer[rf_tx_buffer_count - 1];
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <get_Msg_fromHost+0xc8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3b01      	subs	r3, #1
 8000536:	4a2a      	ldr	r2, [pc, #168]	; (80005e0 <get_Msg_fromHost+0xcc>)
 8000538:	5cd3      	ldrb	r3, [r2, r3]
 800053a:	603b      	str	r3, [r7, #0]

        //O último caractere (rc) é o indicador de final de mensagem ('\0')?
        if (rc == endMsgChar)
 800053c:	2300      	movs	r3, #0
 800053e:	461a      	mov	r2, r3
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	4293      	cmp	r3, r2
 8000544:	d142      	bne.n	80005cc <get_Msg_fromHost+0xb8>
        {

            //A mensagem termina com '\0' -- terminador de mensagens enviadas pelo HOST;

            //Estamos em fase de handshake initial Host <-> STM?
            if(rfBridgeON)
 8000546:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <get_Msg_fromHost+0xd0>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d003      	beq.n	8000556 <get_Msg_fromHost+0x42>
            	//CDC_Transmit_FS(rf_tx_buffer, rf_tx_buffer_count);
				//HAL_Delay(10);
              //NÃO - Arduino é apenas um ponte entre HOST e Transceiver RF.
              //Portanto, o que chega ao uC deve ser retransmitido ao MIP via RF.
              // ==> Sinalizar execução do estado para transmissão desta msg para o MIP via RF.
              rf_tx_SendMsg = 1;
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <get_Msg_fromHost+0xc4>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
              return;
 8000554:	e03a      	b.n	80005cc <get_Msg_fromHost+0xb8>
                //      2 - Ao receber o primeiro MIPCOM_READY ("RDY") o STM retorna pela COM para o HOST "RDYOK" - O Host irá
                //          ler ou tentar ler esta mensagem (que pode estar corrompida ou nem mesmo chegar ao Host (C#).
                //
                //Neste primeiro momento, a mensagem em rf_tx_buffer pode conter apenas lixo, conter a mensagem com lixo antes de 'RDY'
                //ou conter apenas "RDY".
                if(rf_tx_buffer_count > 4) //Se conter mais que 4 elementos ['R','D','Y','\0'] remover elementos excedentes no inicio.
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <get_Msg_fromHost+0xc8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b04      	cmp	r3, #4
 800055c:	dd17      	ble.n	800058e <get_Msg_fromHost+0x7a>
                {
                    for(i = 0; i < 4; i++)
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	e00e      	b.n	8000582 <get_Msg_fromHost+0x6e>
                      rf_tx_buffer[i] = rf_tx_buffer[(rf_tx_buffer_count-4) + i];
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <get_Msg_fromHost+0xc8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	1f1a      	subs	r2, r3, #4
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <get_Msg_fromHost+0xcc>)
 8000570:	5cd1      	ldrb	r1, [r2, r3]
 8000572:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <get_Msg_fromHost+0xcc>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	460a      	mov	r2, r1
 800057a:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < 4; i++)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b03      	cmp	r3, #3
 8000586:	dded      	ble.n	8000564 <get_Msg_fromHost+0x50>
                    rf_tx_buffer_count = 4;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <get_Msg_fromHost+0xc8>)
 800058a:	2204      	movs	r2, #4
 800058c:	601a      	str	r2, [r3, #0]
                }
                //A mensagem é "RDY\0" ?
                if( (rf_tx_buffer[0] == 'R') && (rf_tx_buffer[1] == 'D') && (rf_tx_buffer[2] == 'Y') )
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <get_Msg_fromHost+0xcc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b52      	cmp	r3, #82	; 0x52
 8000594:	d114      	bne.n	80005c0 <get_Msg_fromHost+0xac>
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <get_Msg_fromHost+0xcc>)
 8000598:	785b      	ldrb	r3, [r3, #1]
 800059a:	2b44      	cmp	r3, #68	; 0x44
 800059c:	d110      	bne.n	80005c0 <get_Msg_fromHost+0xac>
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <get_Msg_fromHost+0xcc>)
 80005a0:	789b      	ldrb	r3, [r3, #2]
 80005a2:	2b59      	cmp	r3, #89	; 0x59
 80005a4:	d10c      	bne.n	80005c0 <get_Msg_fromHost+0xac>
                {
                  //Ecoar para o Host

                	CDC_Transmit_FS(rf_tx_buffer, rf_tx_buffer_count);
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <get_Msg_fromHost+0xc8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <get_Msg_fromHost+0xcc>)
 80005b0:	f005 fe26 	bl	8006200 <CDC_Transmit_FS>
                	HAL_Delay(5);
 80005b4:	2005      	movs	r0, #5
 80005b6:	f000 fd25 	bl	8001004 <HAL_Delay>

                  rfBridgeON = 1; //De agora em diante, todos os bytes recebidos do Host serão enviados ao MIP por RF.
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <get_Msg_fromHost+0xd0>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
                  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
                }
                //Caso a mensagem tenha sido enviada para o Host (acima) ou não (deve ser ignorada):
                rf_tx_buffer_count = 0; //reiniciar leitura de novas mensagens;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <get_Msg_fromHost+0xc8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
                rf_tx_SendMsg = 0; //a mensagem recebida não deve ser enviada por RF
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <get_Msg_fromHost+0xc4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200002ce 	.word	0x200002ce
 80005d8:	200002cc 	.word	0x200002cc
 80005dc:	200002c8 	.word	0x200002c8
 80005e0:	200001c8 	.word	0x200001c8
 80005e4:	200002cd 	.word	0x200002cd

080005e8 <tx_task>:

/**
 * Verifies if there is a message to be transmitted to the MIP via RF and sends it in packages of 32 bytes or less
 */
void tx_task()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
  uint32_t data_size, index_atual;

  //Transmissão/Recepção de dados via RF liberada? E
  //Existe mensagem para ser enviada para o MIP via RF?
  if ((rfBridgeON == 0) || (rf_tx_SendMsg == 0))
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <tx_task+0x8c>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d03a      	beq.n	800066c <tx_task+0x84>
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <tx_task+0x90>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d036      	beq.n	800066c <tx_task+0x84>
    return;
  data_size = rf_tx_buffer_count;
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <tx_task+0x94>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	60bb      	str	r3, [r7, #8]
  rf_tx_buffer_count = 0;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <tx_task+0x94>)
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]

  index_atual = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  while (index_atual < data_size) // Verifica se todos os dados contidos já foram enviados
 800060e:	e025      	b.n	800065c <tx_task+0x74>
  {
	uint32_t actual_length = data_size - index_atual;
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	607b      	str	r3, [r7, #4]

    //Enquanto tiver algum para escrever
	// Caso a mensagem possua menos, de 32 bytes ele envia apenas os bytes necessários
    if (actual_length < 32)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b1f      	cmp	r3, #31
 800061c:	d812      	bhi.n	8000644 <tx_task+0x5c>
    {
      //Se existem menos de 32 bytes para serem enviados
      rfSendBuffer(&rf_tx_buffer[index_atual], (uint8_t)actual_length);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	4a17      	ldr	r2, [pc, #92]	; (8000680 <tx_task+0x98>)
 8000622:	4413      	add	r3, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f82a 	bl	8000684 <rfSendBuffer>
      HAL_Delay(1); //Aguardar transmissão -- max 32 bytes
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fce7 	bl	8001004 <HAL_Delay>
      waitForIRQ();
 8000636:	f000 f853 	bl	80006e0 <waitForIRQ>
      index_atual += actual_length;
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e00b      	b.n	800065c <tx_task+0x74>
    }
    else
    {
      //Se existem pelo menos 32 bytes para serem escritos, escreve um pacote
      rfSendBuffer(&rf_tx_buffer[index_atual], 32);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <tx_task+0x98>)
 8000648:	4413      	add	r3, r2
 800064a:	2120      	movs	r1, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f819 	bl	8000684 <rfSendBuffer>
      waitForIRQ();
 8000652:	f000 f845 	bl	80006e0 <waitForIRQ>
      index_atual += 32;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	3320      	adds	r3, #32
 800065a:	60fb      	str	r3, [r7, #12]
  while (index_atual < data_size) // Verifica se todos os dados contidos já foram enviados
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	429a      	cmp	r2, r3
 8000662:	d3d5      	bcc.n	8000610 <tx_task+0x28>
    }
  }
  //Sinalizar mensagem transmitida
  rf_tx_SendMsg = 0;
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <tx_task+0x90>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e000      	b.n	800066e <tx_task+0x86>
    return;
 800066c:	bf00      	nop
}
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200002cd 	.word	0x200002cd
 8000678:	200002cc 	.word	0x200002cc
 800067c:	200002c8 	.word	0x200002c8
 8000680:	200001c8 	.word	0x200001c8

08000684 <rfSendBuffer>:
 *
 * @param buffer2send	Buffer to be sent to the MIP via RF
 * @param buffer_size	Size of buffer to be sent to the MIP via RF
 */
void rfSendBuffer(uint8_t *buffer2send, uint8_t buffer_size)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
  uint8_t send_index = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
  
  // Escreve no buffer de saída (tx_buf) os bytes a serem enviados
  for (int i = 0; i < buffer_size; i++)
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	e00e      	b.n	80006b8 <rfSendBuffer+0x34>
  {
    tx_buf[i] = buffer2send[i];
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	7819      	ldrb	r1, [r3, #0]
 80006a2:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <rfSendBuffer+0x54>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	4413      	add	r3, r2
 80006a8:	460a      	mov	r2, r1
 80006aa:	701a      	strb	r2, [r3, #0]
    send_index += 1;
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	3301      	adds	r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < buffer_size; i++)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbec      	blt.n	800069a <rfSendBuffer+0x16>
  }
  //Enviar via RF
  TX_Mode(tx_buf, send_index, autoAck_enabled);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <rfSendBuffer+0x58>)
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	4619      	mov	r1, r3
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <rfSendBuffer+0x54>)
 80006ca:	f000 fae7 	bl	8000c9c <TX_Mode>
  //HAL_Delay(5);
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001a4 	.word	0x200001a4
 80006dc:	20000000 	.word	0x20000000

080006e0 <waitForIRQ>:
/**
 *
 *
 */
void waitForIRQ()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(RF_IRQ_GPIO_Port, RF_IRQ_Pin) != 0);
 80006e4:	bf00      	nop
 80006e6:	2101      	movs	r1, #1
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <waitForIRQ+0x1c>)
 80006ea:	f000 ff15 	bl	8001518 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f8      	bne.n	80006e6 <waitForIRQ+0x6>
	IRQ_read();
 80006f4:	f7ff fec8 	bl	8000488 <IRQ_read>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40010c00 	.word	0x40010c00

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <DWT_Delay_us+0x3c>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800071a:	f002 f9f1 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 800071e:	4602      	mov	r2, r0
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <DWT_Delay_us+0x40>)
 8000722:	fba3 2302 	umull	r2, r3, r3, r2
 8000726:	0c9b      	lsrs	r3, r3, #18
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	fb02 f303 	mul.w	r3, r2, r3
 800072e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000730:	bf00      	nop
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <DWT_Delay_us+0x3c>)
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	1ad2      	subs	r2, r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	429a      	cmp	r2, r3
 800073e:	d3f8      	bcc.n	8000732 <DWT_Delay_us+0x26>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	e0001000 	.word	0xe0001000
 800074c:	431bde83 	.word	0x431bde83

08000750 <nRF24L01_STM32>:
/**
 * Construtor using the default pins
 * @param spi its an SPI_HandleTypeDef object that contains the SPI informations
 **/
void nRF24L01_STM32(SPI_HandleTypeDef spi)
{
 8000750:	b084      	sub	sp, #16
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
 8000756:	f107 0c08 	add.w	ip, r7, #8
 800075a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    _spi = spi;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <nRF24L01_STM32+0x2c>)
 8000760:	4618      	mov	r0, r3
 8000762:	f107 0108 	add.w	r1, r7, #8
 8000766:	2358      	movs	r3, #88	; 0x58
 8000768:	461a      	mov	r2, r3
 800076a:	f006 f93f 	bl	80069ec <memcpy>
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000776:	b004      	add	sp, #16
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	200004f4 	.word	0x200004f4

08000780 <init>:
 * @param rf_data_rate	The radio's data rate in Mbps
 * @param rf_pwr		The radio's power in dB
 */

void init(uint8_t rf_channel, rf_data_rate_t rf_data_rate, rf_tx_power_t rf_pwr, uint8_t autoAck_enable)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b087      	sub	sp, #28
 8000784:	af00      	add	r7, sp, #0
 8000786:	4604      	mov	r4, r0
 8000788:	4608      	mov	r0, r1
 800078a:	4611      	mov	r1, r2
 800078c:	461a      	mov	r2, r3
 800078e:	4623      	mov	r3, r4
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	4603      	mov	r3, r0
 8000794:	71bb      	strb	r3, [r7, #6]
 8000796:	460b      	mov	r3, r1
 8000798:	717b      	strb	r3, [r7, #5]
 800079a:	4613      	mov	r3, r2
 800079c:	713b      	strb	r3, [r7, #4]
	// Setup values of the registers
	uint8_t rf_setup_byte;
	uint8_t setup_aw_value = 0x03;	//Setup of Address Widths ('11' - 5 bytes)
 800079e:	2303      	movs	r3, #3
 80007a0:	75bb      	strb	r3, [r7, #22]
	uint8_t en_aa_value;			//Auto Acknowledgment Function on pipe 0 e 1
	uint8_t en_rxaddr_value = 0x01;	//Enabled RX Addresses (only pipe 1)
 80007a2:	2301      	movs	r3, #1
 80007a4:	753b      	strb	r3, [r7, #20]

	/* MUDAR EN RXADDR SÓ PRO PIPE QUE RECEBE */
	uint8_t setup_retr_value;		//Setup of Automatic Retransmission
	uint8_t dypnd_value = 0x3f;		//Enable dynamic payload length
 80007a6:	233f      	movs	r3, #63	; 0x3f
 80007a8:	74bb      	strb	r3, [r7, #18]
	uint8_t feature_value = 0x04;	//Feature Register
 80007aa:	2304      	movs	r3, #4
 80007ac:	747b      	strb	r3, [r7, #17]
	uint8_t zero = 0x00;			// 0 (0) (2*5 - 11 + 1)
 80007ae:	2300      	movs	r3, #0
 80007b0:	743b      	strb	r3, [r7, #16]
	uint8_t nrf_status_value = 0x70;// Status
 80007b2:	2370      	movs	r3, #112	; 0x70
 80007b4:	73fb      	strb	r3, [r7, #15]

    //uint8_t addr_host[TX_RX_ADDR_WIDTH] = {0xE7,0xE7,0xE7,0xE7,0xE7};

    //Aguardar sequencia de power-up _ start do CI (~12ms) 
    HAL_Delay(20);
 80007b6:	2014      	movs	r0, #20
 80007b8:	f000 fc24 	bl	8001004 <HAL_Delay>

    //rx_newPayload = 0;      // Init with no new payload
    //rx_payloadWidth = 0;    // It has no length
    status = 0;             // Stores the STATUS register status
 80007bc:	4b5c      	ldr	r3, [pc, #368]	; (8000930 <init+0x1b0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
    TX_OK = 0;              // initiates in stand-by
 80007c2:	4b5c      	ldr	r3, [pc, #368]	; (8000934 <init+0x1b4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
    RX_OK = 0;              // "
 80007c8:	4b5b      	ldr	r3, [pc, #364]	; (8000938 <init+0x1b8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]

    // Set CSN high, no SPI transaction yet
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2110      	movs	r1, #16
 80007d2:	485a      	ldr	r0, [pc, #360]	; (800093c <init+0x1bc>)
 80007d4:	f000 feb7 	bl	8001546 <HAL_GPIO_WritePin>
 
    // Disable RX TX
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2108      	movs	r1, #8
 80007dc:	4857      	ldr	r0, [pc, #348]	; (800093c <init+0x1bc>)
 80007de:	f000 feb2 	bl	8001546 <HAL_GPIO_WritePin>
    //Configuração:

    //W_REGISTER=001A AAAA: Read command and status registers. AAAAA = 5 bit Register Map Address

    // SETUP_AW register: Setup of Address Widths - (common for all data pipes)  
    SPI_Write_Reg(SETUP_AW, &setup_aw_value); //RX/TX Address field width 5 bytes
 80007e2:	f107 0316 	add.w	r3, r7, #22
 80007e6:	4619      	mov	r1, r3
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f8ab 	bl	8000944 <SPI_Write_Reg>
    // Configuration register é definido quando entra no modo RX ou TX (ver funções para cada modo)

    // EN_RXADDR register: Enable Pipe0 (only pipe0)
    SPI_Write_Reg(EN_RXADDR, &en_rxaddr_value);    // Enable Pipe 0 e 1
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	2002      	movs	r0, #2
 80007f6:	f000 f8a5 	bl	8000944 <SPI_Write_Reg>

    if(autoAck_enable > 0)
 80007fa:	793b      	ldrb	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d010      	beq.n	8000822 <init+0xa2>
    {
    	en_aa_value = 0x3f;			// Enabled Auto Acknowledgment on pipe 0 e 1
 8000800:	233f      	movs	r3, #63	; 0x3f
 8000802:	757b      	strb	r3, [r7, #21]
		setup_retr_value = 0x15;	// Enabled retransmission (5 max with 500 us interval)
 8000804:	2315      	movs	r3, #21
 8000806:	74fb      	strb	r3, [r7, #19]

    	// EN_AA register: Enable Auto Acknowledgment: Pipe 0
    	SPI_Write_Reg(EN_AA, &en_aa_value);
 8000808:	f107 0315 	add.w	r3, r7, #21
 800080c:	4619      	mov	r1, r3
 800080e:	2001      	movs	r0, #1
 8000810:	f000 f898 	bl	8000944 <SPI_Write_Reg>

    	// SETUP_RETR register: Time to automatic retransmission selected: 500us, retransmission enabled
		SPI_Write_Reg(SETUP_RETR, &setup_retr_value);
 8000814:	f107 0313 	add.w	r3, r7, #19
 8000818:	4619      	mov	r1, r3
 800081a:	2004      	movs	r0, #4
 800081c:	f000 f892 	bl	8000944 <SPI_Write_Reg>
 8000820:	e00f      	b.n	8000842 <init+0xc2>
    }
    else
    {
    	en_aa_value = 0x00;			// Disabled Auto Acknowledgment
 8000822:	2300      	movs	r3, #0
 8000824:	757b      	strb	r3, [r7, #21]
		setup_retr_value = 0x00;	// Disabled retransmission
 8000826:	2300      	movs	r3, #0
 8000828:	74fb      	strb	r3, [r7, #19]

    	// EN_AA register: Disable Auto Acknowledgment
		SPI_Write_Reg(EN_AA, &en_aa_value);        // Disable Auto Acknowledgment: All pipes
 800082a:	f107 0315 	add.w	r3, r7, #21
 800082e:	4619      	mov	r1, r3
 8000830:	2001      	movs	r0, #1
 8000832:	f000 f887 	bl	8000944 <SPI_Write_Reg>

		// SETUP_RETR register: Time to automatic retransmission selected: 250us, retransmission disabled
		SPI_Write_Reg(SETUP_RETR, &setup_retr_value);
 8000836:	f107 0313 	add.w	r3, r7, #19
 800083a:	4619      	mov	r1, r3
 800083c:	2004      	movs	r0, #4
 800083e:	f000 f881 	bl	8000944 <SPI_Write_Reg>
    }


    // RF_CH register: Select RF channel
    SPI_Write_Reg(RF_CH, &rf_channel);          // Select RF channel: Fo = 2,490 GHz + rf_channel
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	4619      	mov	r1, r3
 8000846:	2005      	movs	r0, #5
 8000848:	f000 f87c 	bl	8000944 <SPI_Write_Reg>

    //RF SETUP
    //Ajustar potência de saída em modo TX (bits 2:1)
    //  bit 0 = 1 (setup LNA gain)
    rf_setup_byte = 0x01; //0000 0001
 800084c:	2301      	movs	r3, #1
 800084e:	75fb      	strb	r3, [r7, #23]
    switch (rf_pwr) 
 8000850:	797b      	ldrb	r3, [r7, #5]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d827      	bhi.n	80008a6 <init+0x126>
 8000856:	a201      	add	r2, pc, #4	; (adr r2, 800085c <init+0xdc>)
 8000858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085c:	0800086d 	.word	0x0800086d
 8000860:	08000879 	.word	0x08000879
 8000864:	08000885 	.word	0x08000885
 8000868:	0800089b 	.word	0x0800089b
    {     
        case RF_TX_POWER_NEGATIVE_18dBm: //bits 2:1 = 00
            rf_setup_byte &= 0xF9; //1111 1001
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	f023 0306 	bic.w	r3, r3, #6
 8000872:	b2db      	uxtb	r3, r3
 8000874:	75fb      	strb	r3, [r7, #23]
        break;
 8000876:	e017      	b.n	80008a8 <init+0x128>

        case RF_TX_POWER_NEGATIVE_12dBm: //bits 2:1 = 01
            rf_setup_byte |= 0x02;//0000 0010
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	b2db      	uxtb	r3, r3
 8000880:	75fb      	strb	r3, [r7, #23]
            //rf_setup_byte &= 0xFB;//1111 1011
        break;
 8000882:	e011      	b.n	80008a8 <init+0x128>

        case RF_TX_POWER_NEGATIVE_6dBm: //bits 2:1 = 10
            rf_setup_byte &= 0xFD;//1111 1101
 8000884:	7dfb      	ldrb	r3, [r7, #23]
 8000886:	f023 0302 	bic.w	r3, r3, #2
 800088a:	b2db      	uxtb	r3, r3
 800088c:	75fb      	strb	r3, [r7, #23]
            rf_setup_byte |= 0x04;//0000 0100
 800088e:	7dfb      	ldrb	r3, [r7, #23]
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	b2db      	uxtb	r3, r3
 8000896:	75fb      	strb	r3, [r7, #23]
        break;
 8000898:	e006      	b.n	80008a8 <init+0x128>

        case RF_TX_POWER_0dBm: //bits 2:1 = 11
            rf_setup_byte |= 0x06;//0000 0110
 800089a:	7dfb      	ldrb	r3, [r7, #23]
 800089c:	f043 0306 	orr.w	r3, r3, #6
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	75fb      	strb	r3, [r7, #23]
        break;
 80008a4:	e000      	b.n	80008a8 <init+0x128>

        default: 
        break;      
 80008a6:	bf00      	nop
        }
        //Ajustar Air Data Rate (bit 3)
        switch (rf_data_rate) 
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <init+0x134>
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d003      	beq.n	80008ba <init+0x13a>
 80008b2:	e008      	b.n	80008c6 <init+0x146>
        {
        case RF_DATA_RATE_1Mbps: //bit 3 = 0
            rf_setup_byte |= 0x00;//0000 0000
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	75fb      	strb	r3, [r7, #23]
        break;
 80008b8:	e005      	b.n	80008c6 <init+0x146>
        case RF_DATA_RATE_2Mbps: //bit 3 = 1
            rf_setup_byte |= 0x08;//0000 1000
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	75fb      	strb	r3, [r7, #23]
        break;
 80008c4:	bf00      	nop
        }

    //Bit 4: PLL_LOCK = 0; bits 7:5 = Reserved = 000
    //rf_setup_byte &= 0x0F;//0000 1111
    SPI_Write_Reg(RF_SETUP, &rf_setup_byte);     // TX_PWR:0dBm, Datarate:1Mbps, LNA:HCURR
 80008c6:	f107 0317 	add.w	r3, r7, #23
 80008ca:	4619      	mov	r1, r3
 80008cc:	2006      	movs	r0, #6
 80008ce:	f000 f839 	bl	8000944 <SPI_Write_Reg>

    /**
     * SET THE TX_ADDR EQUAL AS THE RX_ADDR_P0 IN ORDER TO USE THE AUTO ACK
     * */
    //Transmiter Address.
    SPI_Write_Buf_Reg(TX_ADDR, ADDR_HOST_P0_AND_TX, TX_RX_ADDR_WIDTH);
 80008d2:	2205      	movs	r2, #5
 80008d4:	491a      	ldr	r1, [pc, #104]	; (8000940 <init+0x1c0>)
 80008d6:	2010      	movs	r0, #16
 80008d8:	f000 f860 	bl	800099c <SPI_Write_Buf_Reg>
    //Receiver Address - Pipe 0
    SPI_Write_Buf_Reg(RX_ADDR_P0, ADDR_HOST_P0_AND_TX, TX_RX_ADDR_WIDTH);
 80008dc:	2205      	movs	r2, #5
 80008de:	4918      	ldr	r1, [pc, #96]	; (8000940 <init+0x1c0>)
 80008e0:	200a      	movs	r0, #10
 80008e2:	f000 f85b 	bl	800099c <SPI_Write_Buf_Reg>
    //SPI_Write_Buf_Reg(RX_ADDR_P1, ADDR_HOST_P1, TX_RX_ADDR_WIDTH);

    //SPI_Write_Reg(RX_PW_P0, &n_bytes_p0);

    // Ativa Payload dinamico, com ACK e comando W_TX_PAY
    SPI_Write_Reg(FEATURE, &feature_value);      // Ativa Payload dinâmico, com ACK e comando W_TX_PAY
 80008e6:	f107 0311 	add.w	r3, r7, #17
 80008ea:	4619      	mov	r1, r3
 80008ec:	201d      	movs	r0, #29
 80008ee:	f000 f829 	bl	8000944 <SPI_Write_Reg>
    // Ativa Payload dinamico em data pipe 0 e 1
    SPI_Write_Reg(DYNPD, &dypnd_value);        // Ativa Payload dinâmico em data pipe 0
 80008f2:	f107 0312 	add.w	r3, r7, #18
 80008f6:	4619      	mov	r1, r3
 80008f8:	201c      	movs	r0, #28
 80008fa:	f000 f823 	bl	8000944 <SPI_Write_Reg>
    //After the packet is validated, Enhanched ShockBurst™ disassembles the packet and loads the payload into
    //the RX FIFO, and assert the RX_DR IRQ (active low)
    //A interrupção é associada ao handler RF_IRQ (nesta classe), no código principal (rf_shield_Host.cpp).

    // Clears the TX and RX FIFO
    SPI_Write(FLUSH_TX, &zero);
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4619      	mov	r1, r3
 8000904:	20e1      	movs	r0, #225	; 0xe1
 8000906:	f000 f89d 	bl	8000a44 <SPI_Write>
    SPI_Write(FLUSH_RX, &zero);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	20e2      	movs	r0, #226	; 0xe2
 8000912:	f000 f897 	bl	8000a44 <SPI_Write>

    // Writes in the STATUS register
    SPI_Write_Reg(NRF_STATUS, &nrf_status_value);
 8000916:	f107 030f 	add.w	r3, r7, #15
 800091a:	4619      	mov	r1, r3
 800091c:	2007      	movs	r0, #7
 800091e:	f000 f811 	bl	8000944 <SPI_Write_Reg>

    //Default: Stay in RX Mode waiting for data from MIP
    RX_Mode();
 8000922:	f000 f92d 	bl	8000b80 <RX_Mode>

}
 8000926:	bf00      	nop
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	bf00      	nop
 8000930:	200002cf 	.word	0x200002cf
 8000934:	200002d0 	.word	0x200002d0
 8000938:	200002d1 	.word	0x200002d1
 800093c:	40010800 	.word	0x40010800
 8000940:	20000004 	.word	0x20000004

08000944 <SPI_Write_Reg>:
 * Writes a value in a register
 * @param reg   Register adress
 * @param value Value to be written
 **/
void SPI_Write_Reg(uint8_t reg, uint8_t * value)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
    uint16_t size = sizeof(*value);
 8000950:	2301      	movs	r3, #1
 8000952:	81fb      	strh	r3, [r7, #14]
    reg = (uint8_t) W_REGISTER + reg;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3320      	adds	r3, #32
 8000958:	b2db      	uxtb	r3, r3
 800095a:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 800095c:	2200      	movs	r2, #0
 800095e:	2110      	movs	r1, #16
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <SPI_Write_Reg+0x50>)
 8000962:	f000 fdf0 	bl	8001546 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY);                    // select register
 8000966:	1df9      	adds	r1, r7, #7
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	2201      	movs	r2, #1
 800096e:	480a      	ldr	r0, [pc, #40]	; (8000998 <SPI_Write_Reg+0x54>)
 8000970:	f002 fa05 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 8000974:	89fa      	ldrh	r2, [r7, #14]
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	6839      	ldr	r1, [r7, #0]
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <SPI_Write_Reg+0x54>)
 800097e:	f002 f9fe 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000982:	2201      	movs	r2, #1
 8000984:	2110      	movs	r1, #16
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <SPI_Write_Reg+0x50>)
 8000988:	f000 fddd 	bl	8001546 <HAL_GPIO_WritePin>
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010800 	.word	0x40010800
 8000998:	200004f4 	.word	0x200004f4

0800099c <SPI_Write_Buf_Reg>:
 * @param reg   Register adress
 * @param value Value to be written
 * @param size  Buffer size
 **/
void SPI_Write_Buf_Reg(uint8_t reg, uint8_t *value, uint16_t size)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	80bb      	strh	r3, [r7, #4]
    reg = (uint8_t) W_REGISTER + reg;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	3320      	adds	r3, #32
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <SPI_Write_Buf_Reg+0x50>)
 80009ba:	f000 fdc4 	bl	8001546 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY);                    // select register
 80009be:	1df9      	adds	r1, r7, #7
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
 80009c4:	2201      	movs	r2, #1
 80009c6:	480a      	ldr	r0, [pc, #40]	; (80009f0 <SPI_Write_Buf_Reg+0x54>)
 80009c8:	f002 f9d9 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 80009cc:	88ba      	ldrh	r2, [r7, #4]
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	6839      	ldr	r1, [r7, #0]
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <SPI_Write_Buf_Reg+0x54>)
 80009d6:	f002 f9d2 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 80009da:	2201      	movs	r2, #1
 80009dc:	2110      	movs	r1, #16
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <SPI_Write_Buf_Reg+0x50>)
 80009e0:	f000 fdb1 	bl	8001546 <HAL_GPIO_WritePin>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40010800 	.word	0x40010800
 80009f0:	200004f4 	.word	0x200004f4

080009f4 <SPI_Write_Buf>:
 * @param reg   Register adress
 * @param value Value to be written
 * @param size  Buffer size
 **/
void SPI_Write_Buf(uint8_t command, uint8_t *value, uint16_t size)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	80bb      	strh	r3, [r7, #4]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000a04:	2200      	movs	r2, #0
 8000a06:	2110      	movs	r1, #16
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <SPI_Write_Buf+0x48>)
 8000a0a:	f000 fd9c 	bl	8001546 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY);                    // select register
 8000a0e:	1df9      	adds	r1, r7, #7
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	2201      	movs	r2, #1
 8000a16:	480a      	ldr	r0, [pc, #40]	; (8000a40 <SPI_Write_Buf+0x4c>)
 8000a18:	f002 f9b1 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 8000a1c:	88ba      	ldrh	r2, [r7, #4]
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	6839      	ldr	r1, [r7, #0]
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <SPI_Write_Buf+0x4c>)
 8000a26:	f002 f9aa 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <SPI_Write_Buf+0x48>)
 8000a30:	f000 fd89 	bl	8001546 <HAL_GPIO_WritePin>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	200004f4 	.word	0x200004f4

08000a44 <SPI_Write>:
 * Send a command that need a value to be written
 * @param command   SPI command
 * @param value     Value to be written
 **/
void SPI_Write(uint8_t command, uint8_t * value)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
    uint16_t size = sizeof(*value);
 8000a50:	2301      	movs	r3, #1
 8000a52:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <SPI_Write+0x48>)
 8000a5a:	f000 fd74 	bl	8001546 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY);                    // select register
 8000a5e:	1df9      	adds	r1, r7, #7
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	2201      	movs	r2, #1
 8000a66:	480a      	ldr	r0, [pc, #40]	; (8000a90 <SPI_Write+0x4c>)
 8000a68:	f002 f989 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 8000a6c:	89fa      	ldrh	r2, [r7, #14]
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	6839      	ldr	r1, [r7, #0]
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <SPI_Write+0x4c>)
 8000a76:	f002 f982 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2110      	movs	r1, #16
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <SPI_Write+0x48>)
 8000a80:	f000 fd61 	bl	8001546 <HAL_GPIO_WritePin>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	200004f4 	.word	0x200004f4

08000a94 <SPI_Read>:
 * Reads a value returned by a command
 * @param command   SPI command
 * @return The byte returned by the command
 **/
uint8_t SPI_Read(uint8_t command)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
    uint8_t reading = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2110      	movs	r1, #16
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <SPI_Read+0x4c>)
 8000aa8:	f000 fd4d 	bl	8001546 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY); 	  // Transmits the command
 8000aac:	1df9      	adds	r1, r7, #7
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <SPI_Read+0x50>)
 8000ab6:	f002 f962 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, &reading, sizeof(command), HAL_MAX_DELAY);	  // Saves the response in 'reading'
 8000aba:	f107 010f 	add.w	r1, r7, #15
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <SPI_Read+0x50>)
 8000ac6:	f002 fa8e 	bl	8002fe6 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000aca:	2201      	movs	r2, #1
 8000acc:	2110      	movs	r1, #16
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <SPI_Read+0x4c>)
 8000ad0:	f000 fd39 	bl	8001546 <HAL_GPIO_WritePin>

    return reading;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	200004f4 	.word	0x200004f4

08000ae8 <SPI_Read_Status>:
 * Reads the STATUS register
 * @return the STATUS register content
 */

uint8_t SPI_Read_Status()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af02      	add	r7, sp, #8
    uint8_t reg_read = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	71fb      	strb	r3, [r7, #7]
    uint8_t nop = NOP;
 8000af2:	23ff      	movs	r3, #255	; 0xff
 8000af4:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	480b      	ldr	r0, [pc, #44]	; (8000b28 <SPI_Read_Status+0x40>)
 8000afc:	f000 fd23 	bl	8001546 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive (&_spi, &nop, &reg_read, 1, HAL_MAX_DELAY);
 8000b00:	1dfa      	adds	r2, r7, #7
 8000b02:	1db9      	adds	r1, r7, #6
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <SPI_Read_Status+0x44>)
 8000b0e:	f002 fb73 	bl	80031f8 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000b12:	2201      	movs	r2, #1
 8000b14:	2110      	movs	r1, #16
 8000b16:	4804      	ldr	r0, [pc, #16]	; (8000b28 <SPI_Read_Status+0x40>)
 8000b18:	f000 fd15 	bl	8001546 <HAL_GPIO_WritePin>

    return reg_read;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	200004f4 	.word	0x200004f4

08000b30 <SPI_Read_Buf>:
 * Sends a command and reads a buffer of bytes
 * @param command   SPI command
 * @param dataBuf   Buffer to store the data
 **/
void SPI_Read_Buf(uint8_t command, uint8_t *dataBuf, uint16_t size)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	80bb      	strh	r3, [r7, #4]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);  // CSN low, initiate SPI transaction
 8000b40:	2200      	movs	r2, #0
 8000b42:	2110      	movs	r1, #16
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <SPI_Read_Buf+0x48>)
 8000b46:	f000 fcfe 	bl	8001546 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, 1, HAL_MAX_DELAY);           		// select register
 8000b4a:	1df9      	adds	r1, r7, #7
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	2201      	movs	r2, #1
 8000b52:	480a      	ldr	r0, [pc, #40]	; (8000b7c <SPI_Read_Buf+0x4c>)
 8000b54:	f002 f913 	bl	8002d7e <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, dataBuf, size, HAL_MAX_DELAY);              // read register
 8000b58:	88ba      	ldrh	r2, [r7, #4]
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	6839      	ldr	r1, [r7, #0]
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <SPI_Read_Buf+0x4c>)
 8000b62:	f002 fa40 	bl	8002fe6 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);    // CSN high again, ends SPI transaction
 8000b66:	2201      	movs	r2, #1
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <SPI_Read_Buf+0x48>)
 8000b6c:	f000 fceb 	bl	8001546 <HAL_GPIO_WritePin>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	200004f4 	.word	0x200004f4

08000b80 <RX_Mode>:

/**
 * Changes the nRF state to RX, which it awaits a payload to be received
 **/
void RX_Mode(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
    //rx_newPayload = 0;
    //status = 0;
    RX_OK = 0;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <RX_Mode+0x38>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]

    uint8_t config_value = 0x1F;
 8000b8c:	231f      	movs	r3, #31
 8000b8e:	71fb      	strb	r3, [r7, #7]
    //The RX mode is an active mode where the nRF24L01 radio is a receiver. To enter this mode, the
    //nRF24L01 must have the PWR_UP bit set high, PRIM_RX bit set high and the CE pin set high.

    //Make sure you sett CE = 0 first, so the chip is in Standby mode before you change radio mode. 
    //CE (active high and is used to activate the chip in RX or TX mode) - 0: Desativa o transceiver para programação
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET); 
 8000b90:	2200      	movs	r2, #0
 8000b92:	2108      	movs	r1, #8
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <RX_Mode+0x3c>)
 8000b96:	f000 fcd6 	bl	8001546 <HAL_GPIO_WritePin>
    // b4. MASK_MAX_RT  = 1: Disabled - Reflect MAX_RT as active low on RFIRQ
    // b3. EN_CRC       = 1: Enable CRC - Forced high if one of the bits in the EN_AA is high
    // b2. CRCO         = 1: CRC encoding 2 bytes
    // b1. PWR_UP       = 1: POWER UP
    // b0. PRIM_RX      = 1: RX/TX control with RX (sets the nRF24L01 in transmit/receive)
    SPI_Write_Reg(CONFIG, &config_value);
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fed0 	bl	8000944 <SPI_Write_Reg>

    //CE (active high and is used to activate the chip in RX or TX mode) - a: Ativa o transceiver para RX
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_SET); 
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <RX_Mode+0x3c>)
 8000baa:	f000 fccc 	bl	8001546 <HAL_GPIO_WritePin>
  
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200002d1 	.word	0x200002d1
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <RF_IRQ>:
/**
 * Function called when an IRQ occurs. After verifying the nRF state it saves the paylod (RX mode) or 
 *  flushes the TX FIFO after a successful transmission
 **/
void RF_IRQ(uint8_t *buf, uint8_t *size, uint8_t *newPayload)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
    
	DWT_Delay_us(500); // Delay to give NRf time to transmit the ACK packet
 8000bcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd0:	f7ff fd9c 	bl	800070c <DWT_Delay_us>
    //HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
    // Read STATUS register
    status = SPI_Read_Status();
 8000bd4:	f7ff ff88 	bl	8000ae8 <SPI_Read_Status>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <RF_IRQ+0xcc>)
 8000bde:	701a      	strb	r2, [r3, #0]

    //HAL_GPIO_TogglePin(_RF_LED_GPIO_Port, _RF_LED_Pin);

    if(status & RX_DR)
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <RF_IRQ+0xcc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d01f      	beq.n	8000c2c <RF_IRQ+0x6c>
    { 
        // if received data ready (RX_DR) interrupt
        RX_OK = 1;
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <RF_IRQ+0xd0>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
        *size = SPI_Read(R_RX_PLD_WIDTH);  // Retorna o número de bytes no payload recebido
 8000bf2:	2060      	movs	r0, #96	; 0x60
 8000bf4:	f7ff ff4e 	bl	8000a94 <SPI_Read>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	701a      	strb	r2, [r3, #0]
        SPI_Read_Buf(R_RX_PAYLOAD, buf, *size);  // read receive payload from RX_FIFO buffer
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	68f9      	ldr	r1, [r7, #12]
 8000c0a:	2061      	movs	r0, #97	; 0x61
 8000c0c:	f7ff ff90 	bl	8000b30 <SPI_Read_Buf>

        if(*size > 32)  //Não pode conter mais que 32 bytes
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b20      	cmp	r3, #32
 8000c16:	d902      	bls.n	8000c1e <RF_IRQ+0x5e>
        {
            *size = 0;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
        }
        SPI_Write(FLUSH_RX, 0x00); //Limpar o buffer RX (os dados recebidos estão em rx_buf).
 8000c1e:	2100      	movs	r1, #0
 8000c20:	20e2      	movs	r0, #226	; 0xe2
 8000c22:	f7ff ff0f 	bl	8000a44 <SPI_Write>

        *newPayload = 1;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
    }

    

    //se o pacote foi reconhecido pelo receptor (funciona com TX-ACK)
    if(status & TX_DS)
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <RF_IRQ+0xcc>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	f003 0320 	and.w	r3, r3, #32
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00b      	beq.n	8000c50 <RF_IRQ+0x90>
    {
        //Completou TX ?
        TX_OK = 1;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <RF_IRQ+0xd4>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
        //RX_Mode();
        SPI_Write(FLUSH_TX,0); //limpar o buffer TX
 8000c3e:	2100      	movs	r1, #0
 8000c40:	20e1      	movs	r0, #225	; 0xe1
 8000c42:	f7ff feff 	bl	8000a44 <SPI_Write>
        HAL_GPIO_TogglePin(LED_Port, LED_VERDE);
 8000c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4a:	4813      	ldr	r0, [pc, #76]	; (8000c98 <RF_IRQ+0xd8>)
 8000c4c:	f000 fc93 	bl	8001576 <HAL_GPIO_TogglePin>

    }
    
    // If the maximum number of retransmissions was reached
    if(status & MAX_RT)
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <RF_IRQ+0xcc>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d008      	beq.n	8000c6e <RF_IRQ+0xae>
    {
    	//
    	SPI_Write(FLUSH_TX,0); //limpar o buffer TX
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	20e1      	movs	r0, #225	; 0xe1
 8000c60:	f7ff fef0 	bl	8000a44 <SPI_Write>
    	HAL_GPIO_TogglePin(LED_Port, LED_VERMELHO);
 8000c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <RF_IRQ+0xd8>)
 8000c6a:	f000 fc84 	bl	8001576 <HAL_GPIO_TogglePin>
    }



    //Reset status
    uint8_t sta_val = 0x70;
 8000c6e:	2370      	movs	r3, #112	; 0x70
 8000c70:	75fb      	strb	r3, [r7, #23]
    SPI_Write_Reg(NRF_STATUS, &sta_val);
 8000c72:	f107 0317 	add.w	r3, r7, #23
 8000c76:	4619      	mov	r1, r3
 8000c78:	2007      	movs	r0, #7
 8000c7a:	f7ff fe63 	bl	8000944 <SPI_Write_Reg>
    RX_Mode();
 8000c7e:	f7ff ff7f 	bl	8000b80 <RX_Mode>


}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200002cf 	.word	0x200002cf
 8000c90:	200002d1 	.word	0x200002d1
 8000c94:	200002d0 	.word	0x200002d0
 8000c98:	40010c00 	.word	0x40010c00

08000c9c <TX_Mode>:
 * @param buf The payload to be transmitted
 * @param payloadLength The payload's length
 */

void TX_Mode(uint8_t* buf, uint8_t payloadLength, uint8_t autoAck_enabled)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	70bb      	strb	r3, [r7, #2]
	  TX_OK = 0; //Iniciando transmissão (Na IRQ é setada para 1, indicando fim de transmissão)
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <TX_Mode+0x88>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
	  //To enter this mode, the nRF24L01 must have the PWR_UP bit set high, PRIM_RX bit set low,
	  //a payload in the TX FIFO and, a high pulse on the CE for more than 10μs.

	  //Make sure you sett CE = 0 first, so the chip is in Standby mode before you change radio mode.
	  //CE (active high and is used to activate the chip in RX or TX mode) - 0: Desativa o transceiver para programação
	  HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	481c      	ldr	r0, [pc, #112]	; (8000d28 <TX_Mode+0x8c>)
 8000cb8:	f000 fc45 	bl	8001546 <HAL_GPIO_WritePin>
	  // b4. MASK_MAX_RT 	= 0 or 1: 0 Reflect MAX_RT as active low on RFIRQ or 1 to disable this IRQ
	  // b3. EN_CRC 		= 1: Enable CRC - Forced high if one of the bits in the EN_AA is high
	  // b2. CRCO 			= 1: CRC encoding 2 bytes
	  // b1. PWR_UP 		= 1: POWER UP
	  // b0. PRIM_RX 		= 0: RX/TX control with TX (sets the nRF24L01 in transmit/receive)
	  uint8_t config = 0x0E; // 0000 1110
 8000cbc:	230e      	movs	r3, #14
 8000cbe:	73fb      	strb	r3, [r7, #15]

	  // Disables the MAX_RT IRQ if the Auto Acknowledgment is disabled
	  if(autoAck_enabled == 0)
 8000cc0:	78bb      	ldrb	r3, [r7, #2]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <TX_Mode+0x34>
	  {
		  config |= 0x10; // 0000 1110 | 0001 0000 = 0001 1110
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	f043 0310 	orr.w	r3, r3, #16
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	73fb      	strb	r3, [r7, #15]
	  }

	  SPI_Write_Reg(CONFIG, &config);
 8000cd0:	f107 030f 	add.w	r3, r7, #15
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fe34 	bl	8000944 <SPI_Write_Reg>

	  //enviar (transmitir) endereço do receptor para o qual a mensagem será enviada (o outro nRF24L01)
	  //SPI_Write_Buf_Reg(TX_ADDR, ADDR_HOST_P0_AND_TX, TX_RX_ADDR_WIDTH);

	  //Envia o payload para o transceiver.
	  if(autoAck_enabled)
 8000cdc:	78bb      	ldrb	r3, [r7, #2]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d007      	beq.n	8000cf2 <TX_Mode+0x56>
		  SPI_Write_Buf(W_ACK_PAYLOAD, buf, payloadLength); // Writes data to TX payload
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	20a8      	movs	r0, #168	; 0xa8
 8000cec:	f7ff fe82 	bl	80009f4 <SPI_Write_Buf>
 8000cf0:	e006      	b.n	8000d00 <TX_Mode+0x64>
	  else
		  SPI_Write_Buf(W_TX_PAYLOAD_NOACK, buf, payloadLength); // Writes data to TX payload without Acknowledgment
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	20b0      	movs	r0, #176	; 0xb0
 8000cfc:	f7ff fe7a 	bl	80009f4 <SPI_Write_Buf>

	  //Iniciar transmissão - ativar TX-RF
	  // Set CE pin high to enable TX Mode
	  //	CE (active high and is used to activate the chip in RX or TX mode)
	  // 	- a: Ativa o transceiver para RX
	  HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2108      	movs	r1, #8
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <TX_Mode+0x8c>)
 8000d06:	f000 fc1e 	bl	8001546 <HAL_GPIO_WritePin>
	            //Com data rate de 1Mbps ==> 1us por bit;
	            //Pacote transmitido: Preambulo (1 byte) + endereço (5bytes) + controle (9bits) + payload (até 32 bytes)
	            //                    + CRC (2 bytes) ==> Total 329 bits (pacote maximo) ==> ou seja 329useg
	            //    adicionando os tempos de wakeup etc, teríamos +- 1mseg... vou usar 2mseg por segurança aqui...

	  DWT_Delay_us(15);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f7ff fcfe 	bl	800070c <DWT_Delay_us>
	  HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <TX_Mode+0x8c>)
 8000d16:	f000 fc16 	bl	8001546 <HAL_GPIO_WritePin>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200002d0 	.word	0x200002d0
 8000d28:	40010800 	.word	0x40010800

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_MspInit+0x60>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_MspInit+0x60>)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000

08000d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d12f      	bne.n	8000e10 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000db6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MOSI_Pin;
 8000de0:	23a0      	movs	r3, #160	; 0xa0
 8000de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	480b      	ldr	r0, [pc, #44]	; (8000e20 <HAL_SPI_MspInit+0x90>)
 8000df4:	f000 fa36 	bl	8001264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_MISO_Pin;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RF_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_SPI_MspInit+0x90>)
 8000e0c:	f000 fa2a 	bl	8001264 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40013000 	.word	0x40013000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010800 	.word	0x40010800

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <HardFault_Handler+0x4>

08000e36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <MemManage_Handler+0x4>

08000e3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <BusFault_Handler+0x4>

08000e42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <UsageFault_Handler+0x4>

08000e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f8ac 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e7e:	f000 fc99 	bl	80017b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000125c 	.word	0x2000125c

08000e8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <SystemInit+0x5c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <SystemInit+0x5c>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <SystemInit+0x5c>)
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	4911      	ldr	r1, [pc, #68]	; (8000ee8 <SystemInit+0x5c>)
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <SystemInit+0x60>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <SystemInit+0x5c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <SystemInit+0x5c>)
 8000eae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <SystemInit+0x5c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SystemInit+0x5c>)
 8000ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <SystemInit+0x5c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <SystemInit+0x5c>)
 8000eca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ece:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SystemInit+0x5c>)
 8000ed2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ed6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SystemInit+0x64>)
 8000eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ede:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	f8ff0000 	.word	0xf8ff0000
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ef4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1a:	f7ff ffb7 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f005 fd41 	bl	80069a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f22:	f7ff f943 	bl	80001ac <main>
  bx lr
 8000f26:	4770      	bx	lr
  ldr r3, =_sidata
 8000f28:	08006a98 	.word	0x08006a98
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f30:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 8000f34:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 8000f38:	200014c8 	.word	0x200014c8

08000f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_2_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x28>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x28>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f945 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fee6 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f95d 	bl	800124a <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f925 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000000c 	.word	0x2000000c
 8000fc4:	20000014 	.word	0x20000014
 8000fc8:	20000010 	.word	0x20000010

08000fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_IncTick+0x1c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x20>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x20>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000014 	.word	0x20000014
 8000fec:	200005c4 	.word	0x200005c4

08000ff0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <HAL_GetTick+0x10>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	200005c4 	.word	0x200005c4

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fff0 	bl	8000ff0 <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_Delay+0x40>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffe0 	bl	8000ff0 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000014 	.word	0x20000014

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4906      	ldr	r1, [pc, #24]	; (80010e0 <__NVIC_EnableIRQ+0x34>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff90 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff2d 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff42 	bl	8001090 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff90 	bl	8001138 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5f 	bl	80010e4 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff35 	bl	80010ac <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa2 	bl	800119c <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b08b      	sub	sp, #44	; 0x2c
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001276:	e127      	b.n	80014c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001278:	2201      	movs	r2, #1
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	429a      	cmp	r2, r3
 8001292:	f040 8116 	bne.w	80014c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b12      	cmp	r3, #18
 800129c:	d034      	beq.n	8001308 <HAL_GPIO_Init+0xa4>
 800129e:	2b12      	cmp	r3, #18
 80012a0:	d80d      	bhi.n	80012be <HAL_GPIO_Init+0x5a>
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d02b      	beq.n	80012fe <HAL_GPIO_Init+0x9a>
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d804      	bhi.n	80012b4 <HAL_GPIO_Init+0x50>
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d031      	beq.n	8001312 <HAL_GPIO_Init+0xae>
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d01c      	beq.n	80012ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012b2:	e048      	b.n	8001346 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d043      	beq.n	8001340 <HAL_GPIO_Init+0xdc>
 80012b8:	2b11      	cmp	r3, #17
 80012ba:	d01b      	beq.n	80012f4 <HAL_GPIO_Init+0x90>
          break;
 80012bc:	e043      	b.n	8001346 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012be:	4a89      	ldr	r2, [pc, #548]	; (80014e4 <HAL_GPIO_Init+0x280>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d026      	beq.n	8001312 <HAL_GPIO_Init+0xae>
 80012c4:	4a87      	ldr	r2, [pc, #540]	; (80014e4 <HAL_GPIO_Init+0x280>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d806      	bhi.n	80012d8 <HAL_GPIO_Init+0x74>
 80012ca:	4a87      	ldr	r2, [pc, #540]	; (80014e8 <HAL_GPIO_Init+0x284>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d020      	beq.n	8001312 <HAL_GPIO_Init+0xae>
 80012d0:	4a86      	ldr	r2, [pc, #536]	; (80014ec <HAL_GPIO_Init+0x288>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01d      	beq.n	8001312 <HAL_GPIO_Init+0xae>
          break;
 80012d6:	e036      	b.n	8001346 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012d8:	4a85      	ldr	r2, [pc, #532]	; (80014f0 <HAL_GPIO_Init+0x28c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0xae>
 80012de:	4a85      	ldr	r2, [pc, #532]	; (80014f4 <HAL_GPIO_Init+0x290>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d016      	beq.n	8001312 <HAL_GPIO_Init+0xae>
 80012e4:	4a84      	ldr	r2, [pc, #528]	; (80014f8 <HAL_GPIO_Init+0x294>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xae>
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e028      	b.n	8001346 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e023      	b.n	8001346 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01e      	b.n	8001346 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e019      	b.n	8001346 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e012      	b.n	8001346 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e008      	b.n	8001346 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d801      	bhi.n	8001350 <HAL_GPIO_Init+0xec>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	e001      	b.n	8001354 <HAL_GPIO_Init+0xf0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3304      	adds	r3, #4
 8001354:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2bff      	cmp	r3, #255	; 0xff
 800135a:	d802      	bhi.n	8001362 <HAL_GPIO_Init+0xfe>
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x104>
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	3b08      	subs	r3, #8
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	210f      	movs	r1, #15
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	401a      	ands	r2, r3
 800137a:	6a39      	ldr	r1, [r7, #32]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	431a      	orrs	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 8096 	beq.w	80014c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001396:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HAL_GPIO_Init+0x298>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_GPIO_Init+0x298>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6193      	str	r3, [r2, #24]
 80013a2:	4b56      	ldr	r3, [pc, #344]	; (80014fc <HAL_GPIO_Init+0x298>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013ae:	4a54      	ldr	r2, [pc, #336]	; (8001500 <HAL_GPIO_Init+0x29c>)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4b      	ldr	r2, [pc, #300]	; (8001504 <HAL_GPIO_Init+0x2a0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x19e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4a      	ldr	r2, [pc, #296]	; (8001508 <HAL_GPIO_Init+0x2a4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x19a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a49      	ldr	r2, [pc, #292]	; (800150c <HAL_GPIO_Init+0x2a8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x196>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a48      	ldr	r2, [pc, #288]	; (8001510 <HAL_GPIO_Init+0x2ac>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x192>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x1a0>
 80013f6:	2304      	movs	r3, #4
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x1a0>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x1a0>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x1a0>
 8001402:	2300      	movs	r3, #0
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001414:	493a      	ldr	r1, [pc, #232]	; (8001500 <HAL_GPIO_Init+0x29c>)
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4938      	ldr	r1, [pc, #224]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
 800143a:	e006      	b.n	800144a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800143c:	4b35      	ldr	r3, [pc, #212]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	43db      	mvns	r3, r3
 8001444:	4933      	ldr	r1, [pc, #204]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 8001446:	4013      	ands	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	492e      	ldr	r1, [pc, #184]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
 8001462:	e006      	b.n	8001472 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	43db      	mvns	r3, r3
 800146c:	4929      	ldr	r1, [pc, #164]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 800146e:	4013      	ands	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800147e:	4b25      	ldr	r3, [pc, #148]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4924      	ldr	r1, [pc, #144]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	608b      	str	r3, [r1, #8]
 800148a:	e006      	b.n	800149a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	43db      	mvns	r3, r3
 8001494:	491f      	ldr	r1, [pc, #124]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 8001496:	4013      	ands	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	491a      	ldr	r1, [pc, #104]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60cb      	str	r3, [r1, #12]
 80014b2:	e006      	b.n	80014c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	4915      	ldr	r1, [pc, #84]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 80014be:	4013      	ands	r3, r2
 80014c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	3301      	adds	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	fa22 f303 	lsr.w	r3, r2, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f47f aed0 	bne.w	8001278 <HAL_GPIO_Init+0x14>
  }
}
 80014d8:	bf00      	nop
 80014da:	372c      	adds	r7, #44	; 0x2c
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	10210000 	.word	0x10210000
 80014e8:	10110000 	.word	0x10110000
 80014ec:	10120000 	.word	0x10120000
 80014f0:	10310000 	.word	0x10310000
 80014f4:	10320000 	.word	0x10320000
 80014f8:	10220000 	.word	0x10220000
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	40010800 	.word	0x40010800
 8001508:	40010c00 	.word	0x40010c00
 800150c:	40011000 	.word	0x40011000
 8001510:	40011400 	.word	0x40011400
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e001      	b.n	800153a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	807b      	strh	r3, [r7, #2]
 8001552:	4613      	mov	r3, r2
 8001554:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001556:	787b      	ldrb	r3, [r7, #1]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155c:	887a      	ldrh	r2, [r7, #2]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001562:	e003      	b.n	800156c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	041a      	lsls	r2, r3, #16
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	611a      	str	r2, [r3, #16]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	4013      	ands	r3, r2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001594:	e002      	b.n	800159c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a8:	b08b      	sub	sp, #44	; 0x2c
 80015aa:	af06      	add	r7, sp, #24
 80015ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0d3      	b.n	8001760 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d106      	bne.n	80015d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f004 ff4b 	bl	8006468 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2203      	movs	r2, #3
 80015d6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 f8ad 	bl	800373e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	687e      	ldr	r6, [r7, #4]
 80015ec:	466d      	mov	r5, sp
 80015ee:	f106 0410 	add.w	r4, r6, #16
 80015f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	602b      	str	r3, [r5, #0]
 80015fa:	1d33      	adds	r3, r6, #4
 80015fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f002 f876 	bl	80036f0 <USB_CoreInit>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2202      	movs	r2, #2
 800160e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0a4      	b.n	8001760 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f002 f8aa 	bl	8003776 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	e035      	b.n	8001694 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	015b      	lsls	r3, r3, #5
 800162e:	4413      	add	r3, r2
 8001630:	3329      	adds	r3, #41	; 0x29
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	015b      	lsls	r3, r3, #5
 800163c:	4413      	add	r3, r2
 800163e:	3328      	adds	r3, #40	; 0x28
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	b291      	uxth	r1, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	015b      	lsls	r3, r3, #5
 800164e:	4413      	add	r3, r2
 8001650:	3336      	adds	r3, #54	; 0x36
 8001652:	460a      	mov	r2, r1
 8001654:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	015b      	lsls	r3, r3, #5
 800165c:	4413      	add	r3, r2
 800165e:	332b      	adds	r3, #43	; 0x2b
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	4413      	add	r3, r2
 800166c:	3338      	adds	r3, #56	; 0x38
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	015b      	lsls	r3, r3, #5
 8001678:	4413      	add	r3, r2
 800167a:	333c      	adds	r3, #60	; 0x3c
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	3302      	adds	r3, #2
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	4413      	add	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	3301      	adds	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3c4      	bcc.n	8001628 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e031      	b.n	8001708 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	015b      	lsls	r3, r3, #5
 80016aa:	4413      	add	r3, r2
 80016ac:	f203 1329 	addw	r3, r3, #297	; 0x129
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	015b      	lsls	r3, r3, #5
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	015b      	lsls	r3, r3, #5
 80016ca:	4413      	add	r3, r2
 80016cc:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	015b      	lsls	r3, r3, #5
 80016da:	4413      	add	r3, r2
 80016dc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	015b      	lsls	r3, r3, #5
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	330a      	adds	r3, #10
 80016fa:	015b      	lsls	r3, r3, #5
 80016fc:	4413      	add	r3, r2
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	3301      	adds	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	d3c8      	bcc.n	80016a4 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	687e      	ldr	r6, [r7, #4]
 800171a:	466d      	mov	r5, sp
 800171c:	f106 0410 	add.w	r4, r6, #16
 8001720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	602b      	str	r3, [r5, #0]
 8001728:	1d33      	adds	r3, r6, #4
 800172a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172c:	6838      	ldr	r0, [r7, #0]
 800172e:	f002 f82e 	bl	800378e <USB_DevInit>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e00d      	b.n	8001760 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f003 f86c 	bl	8004836 <USB_DevDisconnect>

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001768 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_PCD_Start+0x16>
 800177a:	2302      	movs	r3, #2
 800177c:	e016      	b.n	80017ac <HAL_PCD_Start+0x44>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001786:	2101      	movs	r1, #1
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f005 f8d4 	bl	8006936 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f003 f845 	bl	8004822 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f001 ffb7 	bl	8003710 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 f842 	bl	800484a <USB_ReadInterrupts>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017d0:	d102      	bne.n	80017d8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 faf2 	bl	8001dbc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 f834 	bl	800484a <USB_ReadInterrupts>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ec:	d112      	bne.n	8001814 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001800:	b292      	uxth	r2, r2
 8001802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f004 fea3 	bl	8006552 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800180c:	2100      	movs	r1, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f8de 	bl	80019d0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f003 f816 	bl	800484a <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001828:	d10b      	bne.n	8001842 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f002 ffff 	bl	800484a <USB_ReadInterrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001856:	d10b      	bne.n	8001870 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001860:	b29a      	uxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800186a:	b292      	uxth	r2, r2
 800186c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f002 ffe8 	bl	800484a <USB_ReadInterrupts>
 800187a:	4603      	mov	r3, r0
 800187c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001884:	d126      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800188e:	b29a      	uxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0204 	bic.w	r2, r2, #4
 8001898:	b292      	uxth	r2, r2
 800189a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0208 	bic.w	r2, r2, #8
 80018b0:	b292      	uxth	r2, r2
 80018b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f004 fe84 	bl	80065c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018ce:	b292      	uxth	r2, r2
 80018d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 ffb6 	bl	800484a <USB_ReadInterrupts>
 80018de:	4603      	mov	r3, r0
 80018e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e8:	d13d      	bne.n	8001966 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0208 	orr.w	r2, r2, #8
 80018fc:	b292      	uxth	r2, r2
 80018fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800190a:	b29a      	uxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001914:	b292      	uxth	r2, r2
 8001916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0204 	orr.w	r2, r2, #4
 800192c:	b292      	uxth	r2, r2
 800192e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f002 ff87 	bl	800484a <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001946:	d10b      	bne.n	8001960 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001950:	b29a      	uxth	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800195a:	b292      	uxth	r2, r2
 800195c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f004 fe15 	bl	8006590 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f002 ff6d 	bl	800484a <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197a:	d10e      	bne.n	800199a <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800198e:	b292      	uxth	r2, r2
 8001990:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f004 fdce 	bl	8006536 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 ff53 	bl	800484a <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ae:	d10b      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019c2:	b292      	uxth	r2, r2
 80019c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_PCD_SetAddress+0x1a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e013      	b.n	8001a12 <HAL_PCD_SetAddress+0x42>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fefa 	bl	80047fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	803b      	strh	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da0b      	bge.n	8001a58 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	015b      	lsls	r3, r3, #5
 8001a48:	3328      	adds	r3, #40	; 0x28
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	705a      	strb	r2, [r3, #1]
 8001a56:	e00b      	b.n	8001a70 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	015b      	lsls	r3, r3, #5
 8001a60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a7c:	883a      	ldrh	r2, [r7, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	78ba      	ldrb	r2, [r7, #2]
 8001a86:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	785b      	ldrb	r3, [r3, #1]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a9a:	78bb      	ldrb	r3, [r7, #2]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d102      	bne.n	8001aa6 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_PCD_EP_Open+0x9a>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e00e      	b.n	8001ad2 <HAL_PCD_EP_Open+0xb8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fe88 	bl	80037d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001ad0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da0b      	bge.n	8001b06 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	015b      	lsls	r3, r3, #5
 8001af6:	3328      	adds	r3, #40	; 0x28
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	705a      	strb	r2, [r3, #1]
 8001b04:	e00b      	b.n	8001b1e <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	015b      	lsls	r3, r3, #5
 8001b0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_EP_Close+0x5e>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e00e      	b.n	8001b56 <HAL_PCD_EP_Close+0x7c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 f934 	bl	8003db4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	015b      	lsls	r3, r3, #5
 8001b76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2200      	movs	r2, #0
 8001b96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6979      	ldr	r1, [r7, #20]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fa93 	bl	80040e0 <USB_EPStartXfer>
 8001bba:	e005      	b.n	8001bc8 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6979      	ldr	r1, [r7, #20]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 fa8c 	bl	80040e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	330a      	adds	r3, #10
 8001be8:	015b      	lsls	r3, r3, #5
 8001bea:	4413      	add	r3, r2
 8001bec:	3304      	adds	r3, #4
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	460b      	mov	r3, r1
 8001c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	015b      	lsls	r3, r3, #5
 8001c12:	3328      	adds	r3, #40	; 0x28
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d106      	bne.n	8001c56 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6979      	ldr	r1, [r7, #20]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fa46 	bl	80040e0 <USB_EPStartXfer>
 8001c54:	e005      	b.n	8001c62 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6979      	ldr	r1, [r7, #20]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fa3f 	bl	80040e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 0207 	and.w	r2, r3, #7
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d901      	bls.n	8001c8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e046      	b.n	8001d18 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	da0b      	bge.n	8001caa <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	015b      	lsls	r3, r3, #5
 8001c9a:	3328      	adds	r3, #40	; 0x28
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	705a      	strb	r2, [r3, #1]
 8001ca8:	e009      	b.n	8001cbe <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	015b      	lsls	r3, r3, #5
 8001cae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_PCD_EP_SetStall+0x72>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e01c      	b.n	8001d18 <HAL_PCD_EP_SetStall+0xac>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68f9      	ldr	r1, [r7, #12]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fcaf 	bl	8004650 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d108      	bne.n	8001d0e <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f002 fdad 	bl	8004868 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d901      	bls.n	8001d3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e03a      	b.n	8001db4 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da0b      	bge.n	8001d5e <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	015b      	lsls	r3, r3, #5
 8001d4e:	3328      	adds	r3, #40	; 0x28
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	705a      	strb	r2, [r3, #1]
 8001d5c:	e00b      	b.n	8001d76 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	015b      	lsls	r3, r3, #5
 8001d66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_PCD_EP_ClrStall+0x76>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e00e      	b.n	8001db4 <HAL_PCD_EP_ClrStall+0x94>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68f9      	ldr	r1, [r7, #12]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fc95 	bl	80046d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dc4:	e282      	b.n	80022cc <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dce:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001dd0:	8afb      	ldrh	r3, [r7, #22]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001dda:	7d7b      	ldrb	r3, [r7, #21]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 8142 	bne.w	8002066 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001de2:	8afb      	ldrh	r3, [r7, #22]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d151      	bne.n	8001e90 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfc:	b29c      	uxth	r4, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3328      	adds	r3, #40	; 0x28
 8001e12:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	441a      	add	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e4e:	2100      	movs	r1, #0
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f004 fb59 	bl	8006508 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8234 	beq.w	80022cc <PCD_EP_ISR_Handler+0x510>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 822f 	bne.w	80022cc <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b292      	uxth	r2, r2
 8001e82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e8e:	e21d      	b.n	80022cc <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e96:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ea0:	8a7b      	ldrh	r3, [r7, #18]
 8001ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d033      	beq.n	8001f12 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3306      	adds	r3, #6
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	f002 fd0c 	bl	8004906 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001efa:	4013      	ands	r3, r2
 8001efc:	b29c      	uxth	r4, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001f06:	b292      	uxth	r2, r2
 8001f08:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f004 fad2 	bl	80064b4 <HAL_PCD_SetupStageCallback>
 8001f10:	e1dc      	b.n	80022cc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f280 81d8 	bge.w	80022cc <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b29c      	uxth	r4, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001f34:	b292      	uxth	r2, r2
 8001f36:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3306      	adds	r3, #6
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d019      	beq.n	8001fa0 <PCD_EP_ISR_Handler+0x1e4>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6959      	ldr	r1, [r3, #20]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f002 fcbe 	bl	8004906 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	441a      	add	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f004 fa9c 	bl	80064d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461c      	mov	r4, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	441c      	add	r4, r3
 8001fb2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001fb6:	461c      	mov	r4, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10e      	bne.n	8001fde <PCD_EP_ISR_Handler+0x222>
 8001fc0:	8823      	ldrh	r3, [r4, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	8023      	strh	r3, [r4, #0]
 8001fcc:	8823      	ldrh	r3, [r4, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	8023      	strh	r3, [r4, #0]
 8001fdc:	e02d      	b.n	800203a <PCD_EP_ISR_Handler+0x27e>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8001fe4:	d812      	bhi.n	800200c <PCD_EP_ISR_Handler+0x250>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <PCD_EP_ISR_Handler+0x244>
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	b29b      	uxth	r3, r3
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	b29b      	uxth	r3, r3
 8002008:	8023      	strh	r3, [r4, #0]
 800200a:	e016      	b.n	800203a <PCD_EP_ISR_Handler+0x27e>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <PCD_EP_ISR_Handler+0x26a>
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	3b01      	subs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	b29b      	uxth	r3, r3
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	b29b      	uxth	r3, r3
 800202e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002036:	b29b      	uxth	r3, r3
 8002038:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	b29c      	uxth	r4, r3
 800204c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002050:	b29c      	uxth	r4, r3
 8002052:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002056:	b29c      	uxth	r4, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4ba2      	ldr	r3, [pc, #648]	; (80022e8 <PCD_EP_ISR_Handler+0x52c>)
 800205e:	4323      	orrs	r3, r4
 8002060:	b29b      	uxth	r3, r3
 8002062:	8013      	strh	r3, [r2, #0]
 8002064:	e132      	b.n	80022cc <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	7d7b      	ldrb	r3, [r7, #21]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002076:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f280 80d1 	bge.w	8002222 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	7d7b      	ldrb	r3, [r7, #21]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29a      	uxth	r2, r3
 8002090:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002094:	4013      	ands	r3, r2
 8002096:	b29c      	uxth	r4, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	7d7b      	ldrb	r3, [r7, #21]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80020a8:	b292      	uxth	r2, r2
 80020aa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020ac:	7d7b      	ldrb	r3, [r7, #21]
 80020ae:	015b      	lsls	r3, r3, #5
 80020b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	7b1b      	ldrb	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d121      	bne.n	8002106 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	3306      	adds	r3, #6
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ea:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80020ec:	8bfb      	ldrh	r3, [r7, #30]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d072      	beq.n	80021d8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6959      	ldr	r1, [r3, #20]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	88da      	ldrh	r2, [r3, #6]
 80020fe:	8bfb      	ldrh	r3, [r7, #30]
 8002100:	f002 fc01 	bl	8004906 <USB_ReadPMA>
 8002104:	e068      	b.n	80021d8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d021      	beq.n	8002164 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002128:	b29b      	uxth	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	3302      	adds	r3, #2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002148:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800214a:	8bfb      	ldrh	r3, [r7, #30]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d02a      	beq.n	80021a6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6959      	ldr	r1, [r3, #20]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	891a      	ldrh	r2, [r3, #8]
 800215c:	8bfb      	ldrh	r3, [r7, #30]
 800215e:	f002 fbd2 	bl	8004906 <USB_ReadPMA>
 8002162:	e020      	b.n	80021a6 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	3306      	adds	r3, #6
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800218e:	8bfb      	ldrh	r3, [r7, #30]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6959      	ldr	r1, [r3, #20]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	895a      	ldrh	r2, [r3, #10]
 80021a0:	8bfb      	ldrh	r3, [r7, #30]
 80021a2:	f002 fbb0 	bl	8004906 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c0:	b29c      	uxth	r4, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	4b46      	ldr	r3, [pc, #280]	; (80022ec <PCD_EP_ISR_Handler+0x530>)
 80021d2:	4323      	orrs	r3, r4
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	8bfb      	ldrh	r3, [r7, #30]
 80021de:	441a      	add	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	8bfb      	ldrh	r3, [r7, #30]
 80021ea:	441a      	add	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <PCD_EP_ISR_Handler+0x446>
 80021f8:	8bfa      	ldrh	r2, [r7, #30]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d206      	bcs.n	8002210 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f004 f965 	bl	80064d8 <HAL_PCD_DataOutStageCallback>
 800220e:	e008      	b.n	8002222 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	7819      	ldrb	r1, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff fc9e 	bl	8001b5e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002222:	8a7b      	ldrh	r3, [r7, #18]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b00      	cmp	r3, #0
 800222a:	d04f      	beq.n	80022cc <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800222c:	7d7b      	ldrb	r3, [r7, #21]
 800222e:	015b      	lsls	r3, r3, #5
 8002230:	3328      	adds	r3, #40	; 0x28
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	7d7b      	ldrb	r3, [r7, #21]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800224c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002250:	b29c      	uxth	r4, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	7d7b      	ldrb	r3, [r7, #21]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	441a      	add	r2, r3
 800225e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002266:	b29b      	uxth	r3, r3
 8002268:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	3302      	adds	r3, #2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	441a      	add	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f004 f928 	bl	8006508 <HAL_PCD_DataInStageCallback>
 80022b8:	e008      	b.n	80022cc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	7819      	ldrb	r1, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fc97 	bl	8001bfa <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f6ff ad74 	blt.w	8001dc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3724      	adds	r7, #36	; 0x24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}
 80022e8:	ffff8080 	.word	0xffff8080
 80022ec:	ffff80c0 	.word	0xffff80c0

080022f0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	817b      	strh	r3, [r7, #10]
 80022fe:	4613      	mov	r3, r2
 8002300:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002302:	897b      	ldrh	r3, [r7, #10]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800230e:	897b      	ldrh	r3, [r7, #10]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	015b      	lsls	r3, r3, #5
 8002316:	3328      	adds	r3, #40	; 0x28
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e006      	b.n	800232e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002320:	897b      	ldrh	r3, [r7, #10]
 8002322:	015b      	lsls	r3, r3, #5
 8002324:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800232e:	893b      	ldrh	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2200      	movs	r2, #0
 8002338:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	b29a      	uxth	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	80da      	strh	r2, [r3, #6]
 8002342:	e00b      	b.n	800235c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2201      	movs	r2, #1
 8002348:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	b29a      	uxth	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	b29a      	uxth	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e26c      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8087 	beq.w	8002496 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002388:	4b92      	ldr	r3, [pc, #584]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b04      	cmp	r3, #4
 8002392:	d00c      	beq.n	80023ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002394:	4b8f      	ldr	r3, [pc, #572]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d112      	bne.n	80023c6 <HAL_RCC_OscConfig+0x5e>
 80023a0:	4b8c      	ldr	r3, [pc, #560]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d10b      	bne.n	80023c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ae:	4b89      	ldr	r3, [pc, #548]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d06c      	beq.n	8002494 <HAL_RCC_OscConfig+0x12c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d168      	bne.n	8002494 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e246      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x76>
 80023d0:	4b80      	ldr	r3, [pc, #512]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a7f      	ldr	r2, [pc, #508]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	e02e      	b.n	800243c <HAL_RCC_OscConfig+0xd4>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x98>
 80023e6:	4b7b      	ldr	r3, [pc, #492]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7a      	ldr	r2, [pc, #488]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b78      	ldr	r3, [pc, #480]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a77      	ldr	r2, [pc, #476]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e01d      	b.n	800243c <HAL_RCC_OscConfig+0xd4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0xbc>
 800240a:	4b72      	ldr	r3, [pc, #456]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a71      	ldr	r2, [pc, #452]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b6f      	ldr	r3, [pc, #444]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6e      	ldr	r2, [pc, #440]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xd4>
 8002424:	4b6b      	ldr	r3, [pc, #428]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a6a      	ldr	r2, [pc, #424]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b68      	ldr	r3, [pc, #416]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a67      	ldr	r2, [pc, #412]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fdd4 	bl	8000ff0 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe fdd0 	bl	8000ff0 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1fa      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b5d      	ldr	r3, [pc, #372]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0xe4>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe fdc0 	bl	8000ff0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe fdbc 	bl	8000ff0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1e6      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x10c>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d063      	beq.n	800256a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a2:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024ae:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d11c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x18c>
 80024ba:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x176>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e1ba      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4939      	ldr	r1, [pc, #228]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	e03a      	b.n	800256a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_RCC_OscConfig+0x270>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fd75 	bl	8000ff0 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250a:	f7fe fd71 	bl	8000ff0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e19b      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4927      	ldr	r1, [pc, #156]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fd54 	bl	8000ff0 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254c:	f7fe fd50 	bl	8000ff0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e17a      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d03a      	beq.n	80025ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d019      	beq.n	80025b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_RCC_OscConfig+0x274>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002584:	f7fe fd34 	bl	8000ff0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe fd30 	bl	8000ff0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e15a      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f000 fab2 	bl	8002b14 <RCC_Delay>
 80025b0:	e01c      	b.n	80025ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_RCC_OscConfig+0x274>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b8:	f7fe fd1a 	bl	8000ff0 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025be:	e00f      	b.n	80025e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c0:	f7fe fd16 	bl	8000ff0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d908      	bls.n	80025e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e140      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	42420000 	.word	0x42420000
 80025dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	4b9e      	ldr	r3, [pc, #632]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e9      	bne.n	80025c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80a6 	beq.w	8002746 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b97      	ldr	r3, [pc, #604]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	4b94      	ldr	r3, [pc, #592]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4a93      	ldr	r2, [pc, #588]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002614:	61d3      	str	r3, [r2, #28]
 8002616:	4b91      	ldr	r3, [pc, #580]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002622:	2301      	movs	r3, #1
 8002624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	4b8e      	ldr	r3, [pc, #568]	; (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d118      	bne.n	8002664 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002632:	4b8b      	ldr	r3, [pc, #556]	; (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a8a      	ldr	r2, [pc, #552]	; (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263e:	f7fe fcd7 	bl	8000ff0 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002646:	f7fe fcd3 	bl	8000ff0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	; 0x64
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0fd      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	4b81      	ldr	r3, [pc, #516]	; (8002860 <HAL_RCC_OscConfig+0x4f8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x312>
 800266c:	4b7b      	ldr	r3, [pc, #492]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4a7a      	ldr	r2, [pc, #488]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6213      	str	r3, [r2, #32]
 8002678:	e02d      	b.n	80026d6 <HAL_RCC_OscConfig+0x36e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x334>
 8002682:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a75      	ldr	r2, [pc, #468]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6213      	str	r3, [r2, #32]
 800268e:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4a72      	ldr	r2, [pc, #456]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	6213      	str	r3, [r2, #32]
 800269a:	e01c      	b.n	80026d6 <HAL_RCC_OscConfig+0x36e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0x356>
 80026a4:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a6c      	ldr	r2, [pc, #432]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	4b6a      	ldr	r3, [pc, #424]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a69      	ldr	r2, [pc, #420]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	e00b      	b.n	80026d6 <HAL_RCC_OscConfig+0x36e>
 80026be:	4b67      	ldr	r3, [pc, #412]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a66      	ldr	r2, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6213      	str	r3, [r2, #32]
 80026ca:	4b64      	ldr	r3, [pc, #400]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4a63      	ldr	r2, [pc, #396]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d015      	beq.n	800270a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe fc87 	bl	8000ff0 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe fc83 	bl	8000ff0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e0ab      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	4b57      	ldr	r3, [pc, #348]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ee      	beq.n	80026e6 <HAL_RCC_OscConfig+0x37e>
 8002708:	e014      	b.n	8002734 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7fe fc71 	bl	8000ff0 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fc6d 	bl	8000ff0 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e095      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ee      	bne.n	8002712 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d105      	bne.n	8002746 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273a:	4b48      	ldr	r3, [pc, #288]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a47      	ldr	r2, [pc, #284]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002744:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8081 	beq.w	8002852 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002750:	4b42      	ldr	r3, [pc, #264]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d061      	beq.n	8002820 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d146      	bne.n	80027f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_OscConfig+0x4fc>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe fc41 	bl	8000ff0 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fc3d 	bl	8000ff0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e067      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002798:	d108      	bne.n	80027ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	492d      	ldr	r1, [pc, #180]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a19      	ldr	r1, [r3, #32]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	430b      	orrs	r3, r1
 80027be:	4927      	ldr	r1, [pc, #156]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c4:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_RCC_OscConfig+0x4fc>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe fc11 	bl	8000ff0 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe fc0d 	bl	8000ff0 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e037      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x46a>
 80027f0:	e02f      	b.n	8002852 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_RCC_OscConfig+0x4fc>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fbfa 	bl	8000ff0 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe fbf6 	bl	8000ff0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e020      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x498>
 800281e:	e018      	b.n	8002852 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e013      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x4f4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	429a      	cmp	r2, r3
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	40007000 	.word	0x40007000
 8002864:	42420060 	.word	0x42420060

08002868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0d0      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d910      	bls.n	80028ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0207 	bic.w	r2, r3, #7
 8002892:	4965      	ldr	r1, [pc, #404]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0b8      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c4:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028dc:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a52      	ldr	r2, [pc, #328]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	494d      	ldr	r1, [pc, #308]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d040      	beq.n	8002988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d115      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e07f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e073      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e06b      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4936      	ldr	r1, [pc, #216]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002958:	f7fe fb4a 	bl	8000ff0 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	e00a      	b.n	8002976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fe fb46 	bl	8000ff0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e053      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 020c 	and.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	429a      	cmp	r2, r3
 8002986:	d1eb      	bne.n	8002960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d210      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	4922      	ldr	r1, [pc, #136]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e032      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4916      	ldr	r1, [pc, #88]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	490e      	ldr	r1, [pc, #56]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029f6:	f000 f821 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029fa:	4601      	mov	r1, r0
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	5cd3      	ldrb	r3, [r2, r3]
 8002a0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1cc>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x1d0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe faa8 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	08006a80 	.word	0x08006a80
 8002a34:	2000000c 	.word	0x2000000c
 8002a38:	20000010 	.word	0x20000010

08002a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	b490      	push	{r4, r7}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a44:	1d3c      	adds	r4, r7, #4
 8002a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a4c:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a66:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x40>
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x46>
 8002a7a:	e02d      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a7e:	623b      	str	r3, [r7, #32]
      break;
 8002a80:	e02d      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	0c9b      	lsrs	r3, r3, #18
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a8e:	4413      	add	r3, r2
 8002a90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	0c5b      	lsrs	r3, r3, #17
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aae:	4413      	add	r3, r2
 8002ab0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ab4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aba:	fb02 f203 	mul.w	r2, r2, r3
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	e004      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002acc:	fb02 f303 	mul.w	r3, r2, r3
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	623b      	str	r3, [r7, #32]
      break;
 8002ad6:	e002      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ada:	623b      	str	r3, [r7, #32]
      break;
 8002adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ade:	6a3b      	ldr	r3, [r7, #32]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3728      	adds	r7, #40	; 0x28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc90      	pop	{r4, r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	08006a2c 	.word	0x08006a2c
 8002af0:	08006a3c 	.word	0x08006a3c
 8002af4:	40021000 	.word	0x40021000
 8002af8:	007a1200 	.word	0x007a1200
 8002afc:	003d0900 	.word	0x003d0900

08002b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	2000000c 	.word	0x2000000c

08002b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <RCC_Delay+0x34>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <RCC_Delay+0x38>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0a5b      	lsrs	r3, r3, #9
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b30:	bf00      	nop
  }
  while (Delay --);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	60fa      	str	r2, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f9      	bne.n	8002b30 <RCC_Delay+0x1c>
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	2000000c 	.word	0x2000000c
 8002b4c:	10624dd3 	.word	0x10624dd3

08002b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d07d      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4a4b      	ldr	r2, [pc, #300]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	61d3      	str	r3, [r2, #28]
 8002b88:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b94:	2301      	movs	r3, #1
 8002b96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d118      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba4:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a42      	ldr	r2, [pc, #264]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fa1e 	bl	8000ff0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	e008      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb8:	f7fe fa1a 	bl	8000ff0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e06d      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d02e      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d027      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c04:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c0a:	4a29      	ldr	r2, [pc, #164]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d014      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe f9e9 	bl	8000ff0 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe f9e5 	bl	8000ff0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e036      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ee      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4917      	ldr	r1, [pc, #92]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	490b      	ldr	r1, [pc, #44]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4904      	ldr	r1, [pc, #16]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	42420440 	.word	0x42420440

08002cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e053      	b.n	8002d76 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fe f851 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d04:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	ea42 0103 	orr.w	r1, r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	0c1a      	lsrs	r2, r3, #16
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f002 0204 	and.w	r2, r2, #4
 8002d54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b088      	sub	sp, #32
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_SPI_Transmit+0x22>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e11e      	b.n	8002fde <HAL_SPI_Transmit+0x260>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da8:	f7fe f922 	bl	8000ff0 <HAL_GetTick>
 8002dac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dc2:	e103      	b.n	8002fcc <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_Transmit+0x52>
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dd4:	e0fa      	b.n	8002fcc <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e1c:	d107      	bne.n	8002e2e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d007      	beq.n	8002e4c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e54:	d14b      	bne.n	8002eee <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_SPI_Transmit+0xe6>
 8002e5e:	8afb      	ldrh	r3, [r7, #22]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d13e      	bne.n	8002ee2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	881a      	ldrh	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	1c9a      	adds	r2, r3, #2
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e88:	e02b      	b.n	8002ee2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d112      	bne.n	8002ebe <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ebc:	e011      	b.n	8002ee2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ebe:	f7fe f897 	bl	8000ff0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d803      	bhi.n	8002ed6 <HAL_SPI_Transmit+0x158>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d102      	bne.n	8002edc <HAL_SPI_Transmit+0x15e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ee0:	e074      	b.n	8002fcc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ce      	bne.n	8002e8a <HAL_SPI_Transmit+0x10c>
 8002eec:	e04c      	b.n	8002f88 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_SPI_Transmit+0x17e>
 8002ef6:	8afb      	ldrh	r3, [r7, #22]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d140      	bne.n	8002f7e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f22:	e02c      	b.n	8002f7e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d113      	bne.n	8002f5a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f58:	e011      	b.n	8002f7e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f5a:	f7fe f849 	bl	8000ff0 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d803      	bhi.n	8002f72 <HAL_SPI_Transmit+0x1f4>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d102      	bne.n	8002f78 <HAL_SPI_Transmit+0x1fa>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f7c:	e026      	b.n	8002fcc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1cd      	bne.n	8002f24 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	6839      	ldr	r1, [r7, #0]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fb91 	bl	80036b4 <SPI_EndRxTxTransaction>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	77fb      	strb	r3, [r7, #31]
 8002fc8:	e000      	b.n	8002fcc <HAL_SPI_Transmit+0x24e>
  }

error:
 8002fca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b088      	sub	sp, #32
 8002fea:	af02      	add	r7, sp, #8
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003002:	d112      	bne.n	800302a <HAL_SPI_Receive+0x44>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2204      	movs	r2, #4
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f8e9 	bl	80031f8 <HAL_SPI_TransmitReceive>
 8003026:	4603      	mov	r3, r0
 8003028:	e0e2      	b.n	80031f0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_SPI_Receive+0x52>
 8003034:	2302      	movs	r3, #2
 8003036:	e0db      	b.n	80031f0 <HAL_SPI_Receive+0x20a>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003040:	f7fd ffd6 	bl	8000ff0 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003056:	e0c2      	b.n	80031de <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x7e>
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003068:	e0b9      	b.n	80031de <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2204      	movs	r2, #4
 800306e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b0:	d107      	bne.n	80030c2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d007      	beq.n	80030e0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d162      	bne.n	80031ae <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030e8:	e02e      	b.n	8003148 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d115      	bne.n	8003124 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f103 020c 	add.w	r2, r3, #12
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	7812      	ldrb	r2, [r2, #0]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003122:	e011      	b.n	8003148 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003124:	f7fd ff64 	bl	8000ff0 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d803      	bhi.n	800313c <HAL_SPI_Receive+0x156>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d102      	bne.n	8003142 <HAL_SPI_Receive+0x15c>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003146:	e04a      	b.n	80031de <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1cb      	bne.n	80030ea <HAL_SPI_Receive+0x104>
 8003152:	e031      	b.n	80031b8 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d113      	bne.n	800318a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	b292      	uxth	r2, r2
 800316e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	1c9a      	adds	r2, r3, #2
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003188:	e011      	b.n	80031ae <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800318a:	f7fd ff31 	bl	8000ff0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d803      	bhi.n	80031a2 <HAL_SPI_Receive+0x1bc>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_Receive+0x1c2>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031ac:	e017      	b.n	80031de <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1cd      	bne.n	8003154 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	6839      	ldr	r1, [r7, #0]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fa27 	bl	8003610 <SPI_EndRxTransaction>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
 80031da:	e000      	b.n	80031de <HAL_SPI_Receive+0x1f8>
  }

error :
 80031dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	; 0x30
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003206:	2301      	movs	r3, #1
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_SPI_TransmitReceive+0x26>
 800321a:	2302      	movs	r3, #2
 800321c:	e18a      	b.n	8003534 <HAL_SPI_TransmitReceive+0x33c>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003226:	f7fd fee3 	bl	8000ff0 <HAL_GetTick>
 800322a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800323c:	887b      	ldrh	r3, [r7, #2]
 800323e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003244:	2b01      	cmp	r3, #1
 8003246:	d00f      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x70>
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324e:	d107      	bne.n	8003260 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d103      	bne.n	8003260 <HAL_SPI_TransmitReceive+0x68>
 8003258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800325c:	2b04      	cmp	r3, #4
 800325e:	d003      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003260:	2302      	movs	r3, #2
 8003262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003266:	e15b      	b.n	8003520 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_SPI_TransmitReceive+0x82>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_SPI_TransmitReceive+0x82>
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d103      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003280:	e14e      	b.n	8003520 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b04      	cmp	r3, #4
 800328c:	d003      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2205      	movs	r2, #5
 8003292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	887a      	ldrh	r2, [r7, #2]
 80032a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	887a      	ldrh	r2, [r7, #2]
 80032ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	887a      	ldrh	r2, [r7, #2]
 80032be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d007      	beq.n	80032ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f2:	d178      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_SPI_TransmitReceive+0x10a>
 80032fc:	8b7b      	ldrh	r3, [r7, #26]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d166      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	881a      	ldrh	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	1c9a      	adds	r2, r3, #2
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003326:	e053      	b.n	80033d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d11b      	bne.n	800336e <HAL_SPI_TransmitReceive+0x176>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d016      	beq.n	800336e <HAL_SPI_TransmitReceive+0x176>
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d113      	bne.n	800336e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	881a      	ldrh	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	1c9a      	adds	r2, r3, #2
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d119      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x1b8>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d014      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	b292      	uxth	r2, r2
 8003392:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	1c9a      	adds	r2, r3, #2
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ac:	2301      	movs	r3, #1
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033b0:	f7fd fe1e 	bl	8000ff0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033bc:	429a      	cmp	r2, r3
 80033be:	d807      	bhi.n	80033d0 <HAL_SPI_TransmitReceive+0x1d8>
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c6:	d003      	beq.n	80033d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033ce:	e0a7      	b.n	8003520 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1a6      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x130>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1a1      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x130>
 80033e4:	e07c      	b.n	80034e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x1fc>
 80033ee:	8b7b      	ldrh	r3, [r7, #26]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d16b      	bne.n	80034cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800341a:	e057      	b.n	80034cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d11c      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x26c>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d017      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x26c>
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d114      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d119      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x2ae>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d014      	beq.n	80034a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034a2:	2301      	movs	r3, #1
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034a6:	f7fd fda3 	bl	8000ff0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d803      	bhi.n	80034be <HAL_SPI_TransmitReceive+0x2c6>
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d102      	bne.n	80034c4 <HAL_SPI_TransmitReceive+0x2cc>
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d103      	bne.n	80034cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034ca:	e029      	b.n	8003520 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1a2      	bne.n	800341c <HAL_SPI_TransmitReceive+0x224>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d19d      	bne.n	800341c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f8e5 	bl	80036b4 <SPI_EndRxTxTransaction>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034fc:	e010      	b.n	8003520 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	e000      	b.n	8003520 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800351e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003530:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003534:	4618      	mov	r0, r3
 8003536:	3730      	adds	r7, #48	; 0x30
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800354c:	e04c      	b.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d048      	beq.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003556:	f7fd fd4b 	bl	8000ff0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d902      	bls.n	800356c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d13d      	bne.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800357a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003584:	d111      	bne.n	80035aa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358e:	d004      	beq.n	800359a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003598:	d107      	bne.n	80035aa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b2:	d10f      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e00f      	b.n	8003608 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	429a      	cmp	r2, r3
 8003604:	d1a3      	bne.n	800354e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003624:	d111      	bne.n	800364a <SPI_EndRxTransaction+0x3a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362e:	d004      	beq.n	800363a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003638:	d107      	bne.n	800364a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003648:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d117      	bne.n	8003684 <SPI_EndRxTransaction+0x74>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365c:	d112      	bne.n	8003684 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2200      	movs	r2, #0
 8003666:	2101      	movs	r1, #1
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff ff67 	bl	800353c <SPI_WaitFlagStateUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01a      	beq.n	80036aa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e013      	b.n	80036ac <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	2180      	movs	r1, #128	; 0x80
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff ff54 	bl	800353c <SPI_WaitFlagStateUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e000      	b.n	80036ac <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff ff36 	bl	800353c <SPI_WaitFlagStateUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e000      	b.n	80036e8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036f0:	b084      	sub	sp, #16
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	f107 0014 	add.w	r0, r7, #20
 80036fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	b004      	add	sp, #16
 800370e:	4770      	bx	lr

08003710 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003718:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800371c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003724:	b29a      	uxth	r2, r3
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	4313      	orrs	r3, r2
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003746:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800374a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003752:	b29b      	uxth	r3, r3
 8003754:	b21a      	sxth	r2, r3
 8003756:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800375a:	43db      	mvns	r3, r3
 800375c:	b21b      	sxth	r3, r3
 800375e:	4013      	ands	r3, r2
 8003760:	b21b      	sxth	r3, r3
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800378e:	b084      	sub	sp, #16
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	f107 0014 	add.w	r0, r7, #20
 800379c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ffa5 	bl	8003710 <USB_EnableGlobalInt>

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037d2:	b004      	add	sp, #16
 80037d4:	4770      	bx	lr
	...

080037d8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037d8:	b490      	push	{r4, r7}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	78db      	ldrb	r3, [r3, #3]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d819      	bhi.n	800383a <USB_ActivateEndpoint+0x62>
 8003806:	a201      	add	r2, pc, #4	; (adr r2, 800380c <USB_ActivateEndpoint+0x34>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	0800381d 	.word	0x0800381d
 8003810:	08003831 	.word	0x08003831
 8003814:	08003841 	.word	0x08003841
 8003818:	08003827 	.word	0x08003827
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800381c:	89bb      	ldrh	r3, [r7, #12]
 800381e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003822:	81bb      	strh	r3, [r7, #12]
      break;
 8003824:	e00d      	b.n	8003842 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003826:	89bb      	ldrh	r3, [r7, #12]
 8003828:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800382c:	81bb      	strh	r3, [r7, #12]
      break;
 800382e:	e008      	b.n	8003842 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003830:	89bb      	ldrh	r3, [r7, #12]
 8003832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003836:	81bb      	strh	r3, [r7, #12]
      break;
 8003838:	e003      	b.n	8003842 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
      break;
 800383e:	e000      	b.n	8003842 <USB_ActivateEndpoint+0x6a>
      break;
 8003840:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	441a      	add	r2, r3
 800384c:	89bb      	ldrh	r3, [r7, #12]
 800384e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800385a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385e:	b29b      	uxth	r3, r3
 8003860:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003878:	b29a      	uxth	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	4313      	orrs	r3, r2
 8003882:	b29c      	uxth	r4, r3
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	4b8a      	ldr	r3, [pc, #552]	; (8003ab8 <USB_ActivateEndpoint+0x2e0>)
 8003890:	4323      	orrs	r3, r4
 8003892:	b29b      	uxth	r3, r3
 8003894:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	7b1b      	ldrb	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 8112 	bne.w	8003ac4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d067      	beq.n	8003978 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038a8:	687c      	ldr	r4, [r7, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	441c      	add	r4, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	4423      	add	r3, r4
 80038bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038c0:	461c      	mov	r4, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	88db      	ldrh	r3, [r3, #6]
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29c      	uxth	r4, r3
 80038de:	4623      	mov	r3, r4
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d014      	beq.n	8003912 <USB_ActivateEndpoint+0x13a>
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	b29c      	uxth	r4, r3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <USB_ActivateEndpoint+0x2e4>)
 800390c:	4323      	orrs	r3, r4
 800390e:	b29b      	uxth	r3, r3
 8003910:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	78db      	ldrb	r3, [r3, #3]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d018      	beq.n	800394c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003930:	b29c      	uxth	r4, r3
 8003932:	f084 0320 	eor.w	r3, r4, #32
 8003936:	b29c      	uxth	r4, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	4b5d      	ldr	r3, [pc, #372]	; (8003ab8 <USB_ActivateEndpoint+0x2e0>)
 8003944:	4323      	orrs	r3, r4
 8003946:	b29b      	uxth	r3, r3
 8003948:	8013      	strh	r3, [r2, #0]
 800394a:	e22b      	b.n	8003da4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003962:	b29c      	uxth	r4, r3
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	4b52      	ldr	r3, [pc, #328]	; (8003ab8 <USB_ActivateEndpoint+0x2e0>)
 8003970:	4323      	orrs	r3, r4
 8003972:	b29b      	uxth	r3, r3
 8003974:	8013      	strh	r3, [r2, #0]
 8003976:	e215      	b.n	8003da4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003978:	687c      	ldr	r4, [r7, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003980:	b29b      	uxth	r3, r3
 8003982:	441c      	add	r4, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4423      	add	r3, r4
 800398c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003990:	461c      	mov	r4, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	88db      	ldrh	r3, [r3, #6]
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	b29b      	uxth	r3, r3
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	b29b      	uxth	r3, r3
 800399e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80039a0:	687c      	ldr	r4, [r7, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	441c      	add	r4, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	4423      	add	r3, r4
 80039b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039b8:	461c      	mov	r4, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10e      	bne.n	80039e0 <USB_ActivateEndpoint+0x208>
 80039c2:	8823      	ldrh	r3, [r4, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	8023      	strh	r3, [r4, #0]
 80039ce:	8823      	ldrh	r3, [r4, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039da:	b29b      	uxth	r3, r3
 80039dc:	8023      	strh	r3, [r4, #0]
 80039de:	e02d      	b.n	8003a3c <USB_ActivateEndpoint+0x264>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b3e      	cmp	r3, #62	; 0x3e
 80039e6:	d812      	bhi.n	8003a0e <USB_ActivateEndpoint+0x236>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <USB_ActivateEndpoint+0x22a>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3301      	adds	r3, #1
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	029b      	lsls	r3, r3, #10
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	8023      	strh	r3, [r4, #0]
 8003a0c:	e016      	b.n	8003a3c <USB_ActivateEndpoint+0x264>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <USB_ActivateEndpoint+0x250>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	029b      	lsls	r3, r3, #10
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29c      	uxth	r4, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d014      	beq.n	8003a7e <USB_ActivateEndpoint+0x2a6>
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	b29c      	uxth	r4, r3
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <USB_ActivateEndpoint+0x2e8>)
 8003a78:	4323      	orrs	r3, r4
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a94:	b29c      	uxth	r4, r3
 8003a96:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a9a:	b29c      	uxth	r4, r3
 8003a9c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003aa0:	b29c      	uxth	r4, r3
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	441a      	add	r2, r3
 8003aac:	4b02      	ldr	r3, [pc, #8]	; (8003ab8 <USB_ActivateEndpoint+0x2e0>)
 8003aae:	4323      	orrs	r3, r4
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	8013      	strh	r3, [r2, #0]
 8003ab4:	e176      	b.n	8003da4 <USB_ActivateEndpoint+0x5cc>
 8003ab6:	bf00      	nop
 8003ab8:	ffff8080 	.word	0xffff8080
 8003abc:	ffff80c0 	.word	0xffff80c0
 8003ac0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	b29c      	uxth	r4, r3
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	441a      	add	r2, r3
 8003ae6:	4b96      	ldr	r3, [pc, #600]	; (8003d40 <USB_ActivateEndpoint+0x568>)
 8003ae8:	4323      	orrs	r3, r4
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003aee:	687c      	ldr	r4, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	441c      	add	r4, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	4423      	add	r3, r4
 8003b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b06:	461c      	mov	r4, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	891b      	ldrh	r3, [r3, #8]
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	8023      	strh	r3, [r4, #0]
 8003b16:	687c      	ldr	r4, [r7, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	441c      	add	r4, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	4423      	add	r3, r4
 8003b2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b2e:	461c      	mov	r4, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	895b      	ldrh	r3, [r3, #10]
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 8088 	bne.w	8003c58 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	b29c      	uxth	r4, r3
 8003b56:	4623      	mov	r3, r4
 8003b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d014      	beq.n	8003b8a <USB_ActivateEndpoint+0x3b2>
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	b29c      	uxth	r4, r3
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	4b70      	ldr	r3, [pc, #448]	; (8003d44 <USB_ActivateEndpoint+0x56c>)
 8003b84:	4323      	orrs	r3, r4
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29c      	uxth	r4, r3
 8003b98:	4623      	mov	r3, r4
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d014      	beq.n	8003bcc <USB_ActivateEndpoint+0x3f4>
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb8:	b29c      	uxth	r4, r3
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	441a      	add	r2, r3
 8003bc4:	4b60      	ldr	r3, [pc, #384]	; (8003d48 <USB_ActivateEndpoint+0x570>)
 8003bc6:	4323      	orrs	r3, r4
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	b29c      	uxth	r4, r3
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	4b56      	ldr	r3, [pc, #344]	; (8003d48 <USB_ActivateEndpoint+0x570>)
 8003bf0:	4323      	orrs	r3, r4
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0c:	b29c      	uxth	r4, r3
 8003c0e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c12:	b29c      	uxth	r4, r3
 8003c14:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c18:	b29c      	uxth	r4, r3
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	441a      	add	r2, r3
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <USB_ActivateEndpoint+0x574>)
 8003c26:	4323      	orrs	r3, r4
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c42:	b29c      	uxth	r4, r3
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <USB_ActivateEndpoint+0x574>)
 8003c50:	4323      	orrs	r3, r4
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]
 8003c56:	e0a5      	b.n	8003da4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29c      	uxth	r4, r3
 8003c66:	4623      	mov	r3, r4
 8003c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d014      	beq.n	8003c9a <USB_ActivateEndpoint+0x4c2>
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	b29c      	uxth	r4, r3
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	441a      	add	r2, r3
 8003c92:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <USB_ActivateEndpoint+0x56c>)
 8003c94:	4323      	orrs	r3, r4
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29c      	uxth	r4, r3
 8003ca8:	4623      	mov	r3, r4
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d014      	beq.n	8003cdc <USB_ActivateEndpoint+0x504>
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc8:	b29c      	uxth	r4, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	441a      	add	r2, r3
 8003cd4:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <USB_ActivateEndpoint+0x570>)
 8003cd6:	4323      	orrs	r3, r4
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	b29c      	uxth	r4, r3
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	441a      	add	r2, r3
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <USB_ActivateEndpoint+0x56c>)
 8003d00:	4323      	orrs	r3, r4
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	78db      	ldrb	r3, [r3, #3]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d020      	beq.n	8003d50 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d24:	b29c      	uxth	r4, r3
 8003d26:	f084 0320 	eor.w	r3, r4, #32
 8003d2a:	b29c      	uxth	r4, r3
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	441a      	add	r2, r3
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <USB_ActivateEndpoint+0x574>)
 8003d38:	4323      	orrs	r3, r4
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	8013      	strh	r3, [r2, #0]
 8003d3e:	e01c      	b.n	8003d7a <USB_ActivateEndpoint+0x5a2>
 8003d40:	ffff8180 	.word	0xffff8180
 8003d44:	ffffc080 	.word	0xffffc080
 8003d48:	ffff80c0 	.word	0xffff80c0
 8003d4c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d66:	b29c      	uxth	r4, r3
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <USB_ActivateEndpoint+0x5d8>)
 8003d74:	4323      	orrs	r3, r4
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d90:	b29c      	uxth	r4, r3
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	441a      	add	r2, r3
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <USB_ActivateEndpoint+0x5d8>)
 8003d9e:	4323      	orrs	r3, r4
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc90      	pop	{r4, r7}
 8003dae:	4770      	bx	lr
 8003db0:	ffff8080 	.word	0xffff8080

08003db4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003db4:	b490      	push	{r4, r7}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	7b1b      	ldrb	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d171      	bne.n	8003eaa <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d036      	beq.n	8003e3c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29c      	uxth	r4, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d014      	beq.n	8003e10 <USB_DeactivateEndpoint+0x5c>
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	b29c      	uxth	r4, r3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	441a      	add	r2, r3
 8003e08:	4b6b      	ldr	r3, [pc, #428]	; (8003fb8 <USB_DeactivateEndpoint+0x204>)
 8003e0a:	4323      	orrs	r3, r4
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e26:	b29c      	uxth	r4, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	4b62      	ldr	r3, [pc, #392]	; (8003fbc <USB_DeactivateEndpoint+0x208>)
 8003e34:	4323      	orrs	r3, r4
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	8013      	strh	r3, [r2, #0]
 8003e3a:	e144      	b.n	80040c6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29c      	uxth	r4, r3
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d014      	beq.n	8003e7e <USB_DeactivateEndpoint+0xca>
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	b29c      	uxth	r4, r3
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	441a      	add	r2, r3
 8003e76:	4b52      	ldr	r3, [pc, #328]	; (8003fc0 <USB_DeactivateEndpoint+0x20c>)
 8003e78:	4323      	orrs	r3, r4
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e94:	b29c      	uxth	r4, r3
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	4b46      	ldr	r3, [pc, #280]	; (8003fbc <USB_DeactivateEndpoint+0x208>)
 8003ea2:	4323      	orrs	r3, r4
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	8013      	strh	r3, [r2, #0]
 8003ea8:	e10d      	b.n	80040c6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f040 8088 	bne.w	8003fc4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29c      	uxth	r4, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d014      	beq.n	8003ef6 <USB_DeactivateEndpoint+0x142>
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	b29c      	uxth	r4, r3
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <USB_DeactivateEndpoint+0x20c>)
 8003ef0:	4323      	orrs	r3, r4
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29c      	uxth	r4, r3
 8003f04:	4623      	mov	r3, r4
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d014      	beq.n	8003f38 <USB_DeactivateEndpoint+0x184>
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f24:	b29c      	uxth	r4, r3
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	441a      	add	r2, r3
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <USB_DeactivateEndpoint+0x204>)
 8003f32:	4323      	orrs	r3, r4
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4e:	b29c      	uxth	r4, r3
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	441a      	add	r2, r3
 8003f5a:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <USB_DeactivateEndpoint+0x204>)
 8003f5c:	4323      	orrs	r3, r4
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	b29c      	uxth	r4, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <USB_DeactivateEndpoint+0x208>)
 8003f86:	4323      	orrs	r3, r4
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa2:	b29c      	uxth	r4, r3
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <USB_DeactivateEndpoint+0x208>)
 8003fb0:	4323      	orrs	r3, r4
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8013      	strh	r3, [r2, #0]
 8003fb6:	e086      	b.n	80040c6 <USB_DeactivateEndpoint+0x312>
 8003fb8:	ffff80c0 	.word	0xffff80c0
 8003fbc:	ffff8080 	.word	0xffff8080
 8003fc0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b29c      	uxth	r4, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d014      	beq.n	8004006 <USB_DeactivateEndpoint+0x252>
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	b29c      	uxth	r4, r3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	4b35      	ldr	r3, [pc, #212]	; (80040d4 <USB_DeactivateEndpoint+0x320>)
 8004000:	4323      	orrs	r3, r4
 8004002:	b29b      	uxth	r3, r3
 8004004:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29c      	uxth	r4, r3
 8004014:	4623      	mov	r3, r4
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d014      	beq.n	8004048 <USB_DeactivateEndpoint+0x294>
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	b29c      	uxth	r4, r3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	441a      	add	r2, r3
 8004040:	4b25      	ldr	r3, [pc, #148]	; (80040d8 <USB_DeactivateEndpoint+0x324>)
 8004042:	4323      	orrs	r3, r4
 8004044:	b29b      	uxth	r3, r3
 8004046:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	b29c      	uxth	r4, r3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <USB_DeactivateEndpoint+0x320>)
 800406c:	4323      	orrs	r3, r4
 800406e:	b29b      	uxth	r3, r3
 8004070:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004088:	b29c      	uxth	r4, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <USB_DeactivateEndpoint+0x328>)
 8004096:	4323      	orrs	r3, r4
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	b29c      	uxth	r4, r3
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <USB_DeactivateEndpoint+0x328>)
 80040c0:	4323      	orrs	r3, r4
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc90      	pop	{r4, r7}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	ffffc080 	.word	0xffffc080
 80040d8:	ffff80c0 	.word	0xffff80c0
 80040dc:	ffff8080 	.word	0xffff8080

080040e0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b08d      	sub	sp, #52	; 0x34
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	785b      	ldrb	r3, [r3, #1]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	f040 8160 	bne.w	80043b4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d909      	bls.n	8004114 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	1ad2      	subs	r2, r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	619a      	str	r2, [r3, #24]
 8004112:	e005      	b.n	8004120 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2200      	movs	r2, #0
 800411e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	7b1b      	ldrb	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d119      	bne.n	800415c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	6959      	ldr	r1, [r3, #20]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	88da      	ldrh	r2, [r3, #6]
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	b29b      	uxth	r3, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fba2 	bl	800487e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800413a:	687c      	ldr	r4, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	441c      	add	r4, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	4423      	add	r3, r4
 800414e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004152:	461c      	mov	r4, r3
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	b29b      	uxth	r3, r3
 8004158:	8023      	strh	r3, [r4, #0]
 800415a:	e10f      	b.n	800437c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d065      	beq.n	800423e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004172:	687c      	ldr	r4, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d148      	bne.n	800420e <USB_EPStartXfer+0x12e>
 800417c:	687c      	ldr	r4, [r7, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004184:	b29b      	uxth	r3, r3
 8004186:	441c      	add	r4, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4423      	add	r3, r4
 8004190:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004194:	461c      	mov	r4, r3
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10e      	bne.n	80041ba <USB_EPStartXfer+0xda>
 800419c:	8823      	ldrh	r3, [r4, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	8023      	strh	r3, [r4, #0]
 80041a8:	8823      	ldrh	r3, [r4, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8023      	strh	r3, [r4, #0]
 80041b8:	e03d      	b.n	8004236 <USB_EPStartXfer+0x156>
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	2b3e      	cmp	r3, #62	; 0x3e
 80041be:	d810      	bhi.n	80041e2 <USB_EPStartXfer+0x102>
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <USB_EPStartXfer+0xf6>
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	3301      	adds	r3, #1
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	b29b      	uxth	r3, r3
 80041da:	029b      	lsls	r3, r3, #10
 80041dc:	b29b      	uxth	r3, r3
 80041de:	8023      	strh	r3, [r4, #0]
 80041e0:	e029      	b.n	8004236 <USB_EPStartXfer+0x156>
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <USB_EPStartXfer+0x118>
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	3b01      	subs	r3, #1
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	029b      	lsls	r3, r3, #10
 80041fe:	b29b      	uxth	r3, r3
 8004200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004208:	b29b      	uxth	r3, r3
 800420a:	8023      	strh	r3, [r4, #0]
 800420c:	e013      	b.n	8004236 <USB_EPStartXfer+0x156>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d10f      	bne.n	8004236 <USB_EPStartXfer+0x156>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800421c:	b29b      	uxth	r3, r3
 800421e:	441c      	add	r4, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	4423      	add	r3, r4
 8004228:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	895b      	ldrh	r3, [r3, #10]
 800423a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800423c:	e063      	b.n	8004306 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d148      	bne.n	80042d8 <USB_EPStartXfer+0x1f8>
 8004246:	687c      	ldr	r4, [r7, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424e:	b29b      	uxth	r3, r3
 8004250:	441c      	add	r4, r3
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	4423      	add	r3, r4
 800425a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800425e:	461c      	mov	r4, r3
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10e      	bne.n	8004284 <USB_EPStartXfer+0x1a4>
 8004266:	8823      	ldrh	r3, [r4, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800426e:	b29b      	uxth	r3, r3
 8004270:	8023      	strh	r3, [r4, #0]
 8004272:	8823      	ldrh	r3, [r4, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800427e:	b29b      	uxth	r3, r3
 8004280:	8023      	strh	r3, [r4, #0]
 8004282:	e03d      	b.n	8004300 <USB_EPStartXfer+0x220>
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	2b3e      	cmp	r3, #62	; 0x3e
 8004288:	d810      	bhi.n	80042ac <USB_EPStartXfer+0x1cc>
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <USB_EPStartXfer+0x1c0>
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	3301      	adds	r3, #1
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	029b      	lsls	r3, r3, #10
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	8023      	strh	r3, [r4, #0]
 80042aa:	e029      	b.n	8004300 <USB_EPStartXfer+0x220>
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	623b      	str	r3, [r7, #32]
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <USB_EPStartXfer+0x1e2>
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	3b01      	subs	r3, #1
 80042c0:	623b      	str	r3, [r7, #32]
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8023      	strh	r3, [r4, #0]
 80042d6:	e013      	b.n	8004300 <USB_EPStartXfer+0x220>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10f      	bne.n	8004300 <USB_EPStartXfer+0x220>
 80042e0:	687c      	ldr	r4, [r7, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	441c      	add	r4, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	4423      	add	r3, r4
 80042f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042f8:	461c      	mov	r4, r3
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	891b      	ldrh	r3, [r3, #8]
 8004304:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6959      	ldr	r1, [r3, #20]
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	b29b      	uxth	r3, r3
 800430e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fab4 	bl	800487e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d115      	bne.n	800434a <USB_EPStartXfer+0x26a>
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	b29c      	uxth	r4, r3
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	441a      	add	r2, r3
 8004340:	4b9a      	ldr	r3, [pc, #616]	; (80045ac <USB_EPStartXfer+0x4cc>)
 8004342:	4323      	orrs	r3, r4
 8004344:	b29b      	uxth	r3, r3
 8004346:	8013      	strh	r3, [r2, #0]
 8004348:	e018      	b.n	800437c <USB_EPStartXfer+0x29c>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	785b      	ldrb	r3, [r3, #1]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d114      	bne.n	800437c <USB_EPStartXfer+0x29c>
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	b29c      	uxth	r4, r3
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	441a      	add	r2, r3
 8004374:	4b8e      	ldr	r3, [pc, #568]	; (80045b0 <USB_EPStartXfer+0x4d0>)
 8004376:	4323      	orrs	r3, r4
 8004378:	b29b      	uxth	r3, r3
 800437a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004392:	b29c      	uxth	r4, r3
 8004394:	f084 0310 	eor.w	r3, r4, #16
 8004398:	b29c      	uxth	r4, r3
 800439a:	f084 0320 	eor.w	r3, r4, #32
 800439e:	b29c      	uxth	r4, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	4b82      	ldr	r3, [pc, #520]	; (80045b4 <USB_EPStartXfer+0x4d4>)
 80043ac:	4323      	orrs	r3, r4
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]
 80043b2:	e146      	b.n	8004642 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d909      	bls.n	80043d4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	1ad2      	subs	r2, r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	619a      	str	r2, [r3, #24]
 80043d2:	e005      	b.n	80043e0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2200      	movs	r2, #0
 80043de:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	7b1b      	ldrb	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d148      	bne.n	800447a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80043e8:	687c      	ldr	r4, [r7, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	441c      	add	r4, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	4423      	add	r3, r4
 80043fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004400:	461c      	mov	r4, r3
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10e      	bne.n	8004426 <USB_EPStartXfer+0x346>
 8004408:	8823      	ldrh	r3, [r4, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004410:	b29b      	uxth	r3, r3
 8004412:	8023      	strh	r3, [r4, #0]
 8004414:	8823      	ldrh	r3, [r4, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004420:	b29b      	uxth	r3, r3
 8004422:	8023      	strh	r3, [r4, #0]
 8004424:	e0f2      	b.n	800460c <USB_EPStartXfer+0x52c>
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	2b3e      	cmp	r3, #62	; 0x3e
 800442a:	d810      	bhi.n	800444e <USB_EPStartXfer+0x36e>
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <USB_EPStartXfer+0x362>
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3301      	adds	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	b29b      	uxth	r3, r3
 8004446:	029b      	lsls	r3, r3, #10
 8004448:	b29b      	uxth	r3, r3
 800444a:	8023      	strh	r3, [r4, #0]
 800444c:	e0de      	b.n	800460c <USB_EPStartXfer+0x52c>
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <USB_EPStartXfer+0x384>
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3b01      	subs	r3, #1
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	b29b      	uxth	r3, r3
 8004468:	029b      	lsls	r3, r3, #10
 800446a:	b29b      	uxth	r3, r3
 800446c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004474:	b29b      	uxth	r3, r3
 8004476:	8023      	strh	r3, [r4, #0]
 8004478:	e0c8      	b.n	800460c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	785b      	ldrb	r3, [r3, #1]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d148      	bne.n	8004514 <USB_EPStartXfer+0x434>
 8004482:	687c      	ldr	r4, [r7, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800448a:	b29b      	uxth	r3, r3
 800448c:	441c      	add	r4, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	4423      	add	r3, r4
 8004496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800449a:	461c      	mov	r4, r3
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10e      	bne.n	80044c0 <USB_EPStartXfer+0x3e0>
 80044a2:	8823      	ldrh	r3, [r4, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	8023      	strh	r3, [r4, #0]
 80044ae:	8823      	ldrh	r3, [r4, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	8023      	strh	r3, [r4, #0]
 80044be:	e03d      	b.n	800453c <USB_EPStartXfer+0x45c>
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	2b3e      	cmp	r3, #62	; 0x3e
 80044c4:	d810      	bhi.n	80044e8 <USB_EPStartXfer+0x408>
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <USB_EPStartXfer+0x3fc>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3301      	adds	r3, #1
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	029b      	lsls	r3, r3, #10
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8023      	strh	r3, [r4, #0]
 80044e6:	e029      	b.n	800453c <USB_EPStartXfer+0x45c>
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <USB_EPStartXfer+0x41e>
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	b29b      	uxth	r3, r3
 8004502:	029b      	lsls	r3, r3, #10
 8004504:	b29b      	uxth	r3, r3
 8004506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450e:	b29b      	uxth	r3, r3
 8004510:	8023      	strh	r3, [r4, #0]
 8004512:	e013      	b.n	800453c <USB_EPStartXfer+0x45c>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	785b      	ldrb	r3, [r3, #1]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d10f      	bne.n	800453c <USB_EPStartXfer+0x45c>
 800451c:	687c      	ldr	r4, [r7, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004524:	b29b      	uxth	r3, r3
 8004526:	441c      	add	r4, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	4423      	add	r3, r4
 8004530:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004534:	461c      	mov	r4, r3
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	b29b      	uxth	r3, r3
 800453a:	8023      	strh	r3, [r4, #0]
 800453c:	687c      	ldr	r4, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d14e      	bne.n	80045e4 <USB_EPStartXfer+0x504>
 8004546:	687c      	ldr	r4, [r7, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454e:	b29b      	uxth	r3, r3
 8004550:	441c      	add	r4, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	4423      	add	r3, r4
 800455a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800455e:	461c      	mov	r4, r3
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10e      	bne.n	8004584 <USB_EPStartXfer+0x4a4>
 8004566:	8823      	ldrh	r3, [r4, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800456e:	b29b      	uxth	r3, r3
 8004570:	8023      	strh	r3, [r4, #0]
 8004572:	8823      	ldrh	r3, [r4, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457e:	b29b      	uxth	r3, r3
 8004580:	8023      	strh	r3, [r4, #0]
 8004582:	e043      	b.n	800460c <USB_EPStartXfer+0x52c>
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	2b3e      	cmp	r3, #62	; 0x3e
 8004588:	d816      	bhi.n	80045b8 <USB_EPStartXfer+0x4d8>
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <USB_EPStartXfer+0x4c0>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	3301      	adds	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	029b      	lsls	r3, r3, #10
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	8023      	strh	r3, [r4, #0]
 80045aa:	e02f      	b.n	800460c <USB_EPStartXfer+0x52c>
 80045ac:	ffff80c0 	.word	0xffff80c0
 80045b0:	ffffc080 	.word	0xffffc080
 80045b4:	ffff8080 	.word	0xffff8080
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <USB_EPStartXfer+0x4ee>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	029b      	lsls	r3, r3, #10
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8023      	strh	r3, [r4, #0]
 80045e2:	e013      	b.n	800460c <USB_EPStartXfer+0x52c>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10f      	bne.n	800460c <USB_EPStartXfer+0x52c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	441c      	add	r4, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	4423      	add	r3, r4
 80045fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	b29a      	uxth	r2, r3
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	b29c      	uxth	r4, r3
 8004624:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004628:	b29c      	uxth	r4, r3
 800462a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800462e:	b29c      	uxth	r4, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	4b04      	ldr	r3, [pc, #16]	; (800464c <USB_EPStartXfer+0x56c>)
 800463c:	4323      	orrs	r3, r4
 800463e:	b29b      	uxth	r3, r3
 8004640:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3734      	adds	r7, #52	; 0x34
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	ffff8080 	.word	0xffff8080

08004650 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004650:	b490      	push	{r4, r7}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d018      	beq.n	8004694 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004678:	b29c      	uxth	r4, r3
 800467a:	f084 0310 	eor.w	r3, r4, #16
 800467e:	b29c      	uxth	r4, r3
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <USB_EPSetStall+0x80>)
 800468c:	4323      	orrs	r3, r4
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]
 8004692:	e017      	b.n	80046c4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	b29c      	uxth	r4, r3
 80046ac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80046b0:	b29c      	uxth	r4, r3
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <USB_EPSetStall+0x80>)
 80046be:	4323      	orrs	r3, r4
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc90      	pop	{r4, r7}
 80046ce:	4770      	bx	lr
 80046d0:	ffff8080 	.word	0xffff8080

080046d4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046d4:	b490      	push	{r4, r7}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	7b1b      	ldrb	r3, [r3, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d17d      	bne.n	80047e2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d03d      	beq.n	800476a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29c      	uxth	r4, r3
 80046fc:	4623      	mov	r3, r4
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d014      	beq.n	8004730 <USB_EPClearStall+0x5c>
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471c:	b29c      	uxth	r4, r3
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <USB_EPClearStall+0x11c>)
 800472a:	4323      	orrs	r3, r4
 800472c:	b29b      	uxth	r3, r3
 800472e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	78db      	ldrb	r3, [r3, #3]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d054      	beq.n	80047e2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474e:	b29c      	uxth	r4, r3
 8004750:	f084 0320 	eor.w	r3, r4, #32
 8004754:	b29c      	uxth	r4, r3
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <USB_EPClearStall+0x120>)
 8004762:	4323      	orrs	r3, r4
 8004764:	b29b      	uxth	r3, r3
 8004766:	8013      	strh	r3, [r2, #0]
 8004768:	e03b      	b.n	80047e2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29c      	uxth	r4, r3
 8004778:	4623      	mov	r3, r4
 800477a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d014      	beq.n	80047ac <USB_EPClearStall+0xd8>
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	b29c      	uxth	r4, r3
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <USB_EPClearStall+0x124>)
 80047a6:	4323      	orrs	r3, r4
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	b29c      	uxth	r4, r3
 80047c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80047c8:	b29c      	uxth	r4, r3
 80047ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80047ce:	b29c      	uxth	r4, r3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <USB_EPClearStall+0x120>)
 80047dc:	4323      	orrs	r3, r4
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc90      	pop	{r4, r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	ffff80c0 	.word	0xffff80c0
 80047f4:	ffff8080 	.word	0xffff8080
 80047f8:	ffffc080 	.word	0xffffc080

080047fc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2280      	movs	r2, #128	; 0x80
 8004812:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr

0800484a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004858:	b29b      	uxth	r3, r3
 800485a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800485c:	68fb      	ldr	r3, [r7, #12]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800487e:	b480      	push	{r7}
 8004880:	b08d      	sub	sp, #52	; 0x34
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	4611      	mov	r1, r2
 800488a:	461a      	mov	r2, r3
 800488c:	460b      	mov	r3, r1
 800488e:	80fb      	strh	r3, [r7, #6]
 8004890:	4613      	mov	r3, r2
 8004892:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004894:	88bb      	ldrh	r3, [r7, #4]
 8004896:	3301      	adds	r3, #1
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	005a      	lsls	r2, r3, #1
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b6:	e01e      	b.n	80048f6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	3301      	adds	r3, #1
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	b29a      	uxth	r2, r3
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	3302      	adds	r3, #2
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	3302      	adds	r3, #2
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	3301      	adds	r3, #1
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	3b01      	subs	r3, #1
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1dd      	bne.n	80048b8 <USB_WritePMA+0x3a>
  }
}
 80048fc:	bf00      	nop
 80048fe:	3734      	adds	r7, #52	; 0x34
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr

08004906 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004906:	b480      	push	{r7}
 8004908:	b08b      	sub	sp, #44	; 0x2c
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	4611      	mov	r1, r2
 8004912:	461a      	mov	r2, r3
 8004914:	460b      	mov	r3, r1
 8004916:	80fb      	strh	r3, [r7, #6]
 8004918:	4613      	mov	r3, r2
 800491a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800491c:	88bb      	ldrh	r3, [r7, #4]
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	b29b      	uxth	r3, r3
 8004922:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	005a      	lsls	r2, r3, #1
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004938:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
 800493e:	e01b      	b.n	8004978 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	3302      	adds	r3, #2
 800494c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3301      	adds	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	b2da      	uxtb	r2, r3
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3301      	adds	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	3302      	adds	r3, #2
 8004970:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	3b01      	subs	r3, #1
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e0      	bne.n	8004940 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800497e:	88bb      	ldrh	r3, [r7, #4]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	701a      	strb	r2, [r3, #0]
  }
}
 800499a:	bf00      	nop
 800499c:	372c      	adds	r7, #44	; 0x2c
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	7c1b      	ldrb	r3, [r3, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d115      	bne.n	80049e8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80049bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c0:	2202      	movs	r2, #2
 80049c2:	2181      	movs	r1, #129	; 0x81
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fe80 	bl	80066ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80049d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049d4:	2202      	movs	r2, #2
 80049d6:	2101      	movs	r1, #1
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 fe76 	bl	80066ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80049e6:	e012      	b.n	8004a0e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80049e8:	2340      	movs	r3, #64	; 0x40
 80049ea:	2202      	movs	r2, #2
 80049ec:	2181      	movs	r1, #129	; 0x81
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f001 fe6b 	bl	80066ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80049fa:	2340      	movs	r3, #64	; 0x40
 80049fc:	2202      	movs	r2, #2
 80049fe:	2101      	movs	r1, #1
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f001 fe62 	bl	80066ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004a0e:	2308      	movs	r3, #8
 8004a10:	2203      	movs	r2, #3
 8004a12:	2182      	movs	r1, #130	; 0x82
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fe58 	bl	80066ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a24:	f001 ff72 	bl	800690c <USBD_static_malloc>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	e026      	b.n	8004a8e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a46:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7c1b      	ldrb	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a74:	2101      	movs	r1, #1
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f001 ff11 	bl	800689e <USBD_LL_PrepareReceive>
 8004a7c:	e007      	b.n	8004a8e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a84:	2340      	movs	r3, #64	; 0x40
 8004a86:	2101      	movs	r1, #1
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f001 ff08 	bl	800689e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004aa8:	2181      	movs	r1, #129	; 0x81
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f001 fe33 	bl	8006716 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f001 fe2c 	bl	8006716 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ac6:	2182      	movs	r1, #130	; 0x82
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f001 fe24 	bl	8006716 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00e      	beq.n	8004afc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 ff18 	bl	8006924 <USBD_static_free>
    pdev->pClassData = NULL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b16:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d039      	beq.n	8004ba4 <USBD_CDC_Setup+0x9e>
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d17c      	bne.n	8004c2e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	88db      	ldrh	r3, [r3, #6]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d029      	beq.n	8004b90 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b25b      	sxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da11      	bge.n	8004b6a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004b52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	88d2      	ldrh	r2, [r2, #6]
 8004b58:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004b5a:	6939      	ldr	r1, [r7, #16]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	88db      	ldrh	r3, [r3, #6]
 8004b60:	461a      	mov	r2, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f001 f9f6 	bl	8005f54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004b68:	e068      	b.n	8004c3c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	785a      	ldrb	r2, [r3, #1]
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	88db      	ldrh	r3, [r3, #6]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004b80:	6939      	ldr	r1, [r7, #16]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	88db      	ldrh	r3, [r3, #6]
 8004b86:	461a      	mov	r2, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f001 fa11 	bl	8005fb0 <USBD_CtlPrepareRx>
      break;
 8004b8e:	e055      	b.n	8004c3c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	7850      	ldrb	r0, [r2, #1]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	4798      	blx	r3
      break;
 8004ba2:	e04b      	b.n	8004c3c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b0a      	cmp	r3, #10
 8004baa:	d017      	beq.n	8004bdc <USBD_CDC_Setup+0xd6>
 8004bac:	2b0b      	cmp	r3, #11
 8004bae:	d029      	beq.n	8004c04 <USBD_CDC_Setup+0xfe>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d133      	bne.n	8004c1c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d107      	bne.n	8004bce <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004bbe:	f107 030c 	add.w	r3, r7, #12
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f001 f9c4 	bl	8005f54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004bcc:	e02e      	b.n	8004c2c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004bce:	6839      	ldr	r1, [r7, #0]
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f001 f955 	bl	8005e80 <USBD_CtlError>
            ret = USBD_FAIL;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8004bda:	e027      	b.n	8004c2c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d107      	bne.n	8004bf6 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004be6:	f107 030f 	add.w	r3, r7, #15
 8004bea:	2201      	movs	r2, #1
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f001 f9b0 	bl	8005f54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004bf4:	e01a      	b.n	8004c2c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004bf6:	6839      	ldr	r1, [r7, #0]
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f001 f941 	bl	8005e80 <USBD_CtlError>
            ret = USBD_FAIL;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	75fb      	strb	r3, [r7, #23]
          break;
 8004c02:	e013      	b.n	8004c2c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d00d      	beq.n	8004c2a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004c0e:	6839      	ldr	r1, [r7, #0]
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f001 f935 	bl	8005e80 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c16:	2302      	movs	r3, #2
 8004c18:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004c1a:	e006      	b.n	8004c2a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 f92e 	bl	8005e80 <USBD_CtlError>
          ret = USBD_FAIL;
 8004c24:	2302      	movs	r3, #2
 8004c26:	75fb      	strb	r3, [r7, #23]
          break;
 8004c28:	e000      	b.n	8004c2c <USBD_CDC_Setup+0x126>
          break;
 8004c2a:	bf00      	nop
      }
      break;
 8004c2c:	e006      	b.n	8004c3c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f001 f925 	bl	8005e80 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c36:	2302      	movs	r3, #2
 8004c38:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3a:	bf00      	nop
  }

  return ret;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c58:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c60:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d037      	beq.n	8004cdc <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	331c      	adds	r3, #28
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d026      	beq.n	8004cd0 <USBD_CDC_DataIn+0x8a>
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	331c      	adds	r3, #28
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	0152      	lsls	r2, r2, #5
 8004c9a:	440a      	add	r2, r1
 8004c9c:	3238      	adds	r2, #56	; 0x38
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ca4:	fb02 f201 	mul.w	r2, r2, r1
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d110      	bne.n	8004cd0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	331c      	adds	r3, #28
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004cc2:	78f9      	ldrb	r1, [r7, #3]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 fdc5 	bl	8006858 <USBD_LL_Transmit>
 8004cce:	e003      	b.n	8004cd8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e000      	b.n	8004cde <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004cdc:	2302      	movs	r3, #2
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 fdf0 	bl	80068e4 <USBD_LL_GetRxDataSize>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00d      	beq.n	8004d32 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4798      	blx	r3

    return USBD_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e000      	b.n	8004d34 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004d32:	2302      	movs	r3, #2
  }
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d4a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d015      	beq.n	8004d82 <USBD_CDC_EP0_RxReady+0x46>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004d5c:	2bff      	cmp	r3, #255	; 0xff
 8004d5e:	d010      	beq.n	8004d82 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004d6e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004d76:	b292      	uxth	r2, r2
 8004d78:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2243      	movs	r2, #67	; 0x43
 8004d98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004d9a:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	200000a0 	.word	0x200000a0

08004dac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2243      	movs	r2, #67	; 0x43
 8004db8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004dba:	4b03      	ldr	r3, [pc, #12]	; (8004dc8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	2000005c 	.word	0x2000005c

08004dcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2243      	movs	r2, #67	; 0x43
 8004dd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004dda:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	200000e4 	.word	0x200000e4

08004dec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	220a      	movs	r2, #10
 8004df8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004dfa:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000018 	.word	0x20000018

08004e0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004e16:	2302      	movs	r3, #2
 8004e18:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e4c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004e56:	88fa      	ldrh	r2, [r7, #6]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e7a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr

08004e90 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01c      	beq.n	8004ee4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d115      	bne.n	8004ee0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2181      	movs	r1, #129	; 0x81
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 fcbe 	bl	8006858 <USBD_LL_Transmit>

      return USBD_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e002      	b.n	8004ee6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d017      	beq.n	8004f38 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	7c1b      	ldrb	r3, [r3, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d109      	bne.n	8004f24 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f001 fcbe 	bl	800689e <USBD_LL_PrepareReceive>
 8004f22:	e007      	b.n	8004f34 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f2a:	2340      	movs	r3, #64	; 0x40
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f001 fcb5 	bl	800689e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e000      	b.n	8004f3a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004f38:	2302      	movs	r3, #2
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004f56:	2302      	movs	r3, #2
 8004f58:	e01a      	b.n	8004f90 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	79fa      	ldrb	r2, [r7, #7]
 8004f86:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f001 fb29 	bl	80065e0 <USBD_LL_Init>

  return USBD_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d006      	beq.n	8004fba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	73fb      	strb	r3, [r7, #15]
 8004fb8:	e001      	b.n	8004fbe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f001 fb5e 	bl	8006694 <USBD_LL_Start>

  return USBD_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005002:	2302      	movs	r3, #2
 8005004:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	4611      	mov	r1, r2
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	4798      	blx	r3
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	4611      	mov	r1, r2
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3

  return USBD_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fecb 	bl	8005e08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005080:	461a      	mov	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2b01      	cmp	r3, #1
 8005094:	d00c      	beq.n	80050b0 <USBD_LL_SetupStage+0x56>
 8005096:	2b01      	cmp	r3, #1
 8005098:	d302      	bcc.n	80050a0 <USBD_LL_SetupStage+0x46>
 800509a:	2b02      	cmp	r3, #2
 800509c:	d010      	beq.n	80050c0 <USBD_LL_SetupStage+0x66>
 800509e:	e017      	b.n	80050d0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80050a6:	4619      	mov	r1, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f9cb 	bl	8005444 <USBD_StdDevReq>
      break;
 80050ae:	e01a      	b.n	80050e6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fa2d 	bl	8005518 <USBD_StdItfReq>
      break;
 80050be:	e012      	b.n	80050e6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fa6b 	bl	80055a4 <USBD_StdEPReq>
      break;
 80050ce:	e00a      	b.n	80050e6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	4619      	mov	r1, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f001 fb38 	bl	8006754 <USBD_LL_StallEP>
      break;
 80050e4:	bf00      	nop
  }

  return USBD_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	460b      	mov	r3, r1
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80050fe:	7afb      	ldrb	r3, [r7, #11]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d14b      	bne.n	800519c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800510a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005112:	2b03      	cmp	r3, #3
 8005114:	d134      	bne.n	8005180 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	429a      	cmp	r2, r3
 8005120:	d919      	bls.n	8005156 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005138:	429a      	cmp	r2, r3
 800513a:	d203      	bcs.n	8005144 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005140:	b29b      	uxth	r3, r3
 8005142:	e002      	b.n	800514a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005148:	b29b      	uxth	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 ff4c 	bl	8005fec <USBD_CtlContinueRx>
 8005154:	e038      	b.n	80051c8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005168:	2b03      	cmp	r3, #3
 800516a:	d105      	bne.n	8005178 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 ff49 	bl	8006010 <USBD_CtlSendStatus>
 800517e:	e023      	b.n	80051c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005186:	2b05      	cmp	r3, #5
 8005188:	d11e      	bne.n	80051c8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005192:	2100      	movs	r1, #0
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f001 fadd 	bl	8006754 <USBD_LL_StallEP>
 800519a:	e015      	b.n	80051c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d108      	bne.n	80051c4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	7afa      	ldrb	r2, [r7, #11]
 80051bc:	4611      	mov	r1, r2
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	4798      	blx	r3
 80051c2:	e001      	b.n	80051c8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80051c4:	2302      	movs	r3, #2
 80051c6:	e000      	b.n	80051ca <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	460b      	mov	r3, r1
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80051e0:	7afb      	ldrb	r3, [r7, #11]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d17f      	bne.n	80052e6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3314      	adds	r3, #20
 80051ea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d15c      	bne.n	80052b0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d915      	bls.n	800522e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	1ad2      	subs	r2, r2, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	b29b      	uxth	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 feb6 	bl	8005f8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005220:	2300      	movs	r3, #0
 8005222:	2200      	movs	r2, #0
 8005224:	2100      	movs	r1, #0
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f001 fb39 	bl	800689e <USBD_LL_PrepareReceive>
 800522c:	e04e      	b.n	80052cc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	6912      	ldr	r2, [r2, #16]
 8005236:	fbb3 f1f2 	udiv	r1, r3, r2
 800523a:	fb02 f201 	mul.w	r2, r2, r1
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d11c      	bne.n	800527e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800524c:	429a      	cmp	r2, r3
 800524e:	d316      	bcc.n	800527e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800525a:	429a      	cmp	r2, r3
 800525c:	d20f      	bcs.n	800527e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800525e:	2200      	movs	r2, #0
 8005260:	2100      	movs	r1, #0
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fe92 	bl	8005f8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005270:	2300      	movs	r3, #0
 8005272:	2200      	movs	r2, #0
 8005274:	2100      	movs	r1, #0
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f001 fb11 	bl	800689e <USBD_LL_PrepareReceive>
 800527c:	e026      	b.n	80052cc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005290:	2b03      	cmp	r3, #3
 8005292:	d105      	bne.n	80052a0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f001 fa56 	bl	8006754 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 fec4 	bl	8006036 <USBD_CtlReceiveStatus>
 80052ae:	e00d      	b.n	80052cc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d004      	beq.n	80052c4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d103      	bne.n	80052cc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f001 fa44 	bl	8006754 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d11d      	bne.n	8005312 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f7ff fe83 	bl	8004fe2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80052e4:	e015      	b.n	8005312 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d108      	bne.n	800530e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	7afa      	ldrb	r2, [r7, #11]
 8005306:	4611      	mov	r1, r2
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	4798      	blx	r3
 800530c:	e001      	b.n	8005312 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800530e:	2302      	movs	r3, #2
 8005310:	e000      	b.n	8005314 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	2200      	movs	r2, #0
 8005328:	2100      	movs	r1, #0
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f001 f9cd 	bl	80066ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2240      	movs	r2, #64	; 0x40
 800533c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005340:	2340      	movs	r3, #64	; 0x40
 8005342:	2200      	movs	r2, #0
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f001 f9bf 	bl	80066ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2240      	movs	r2, #64	; 0x40
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6852      	ldr	r2, [r2, #4]
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	4611      	mov	r1, r2
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	4798      	blx	r3
  }

  return USBD_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2204      	movs	r2, #4
 80053d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d105      	bne.n	8005402 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800541c:	2b03      	cmp	r3, #3
 800541e:	d10b      	bne.n	8005438 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800545a:	2b20      	cmp	r3, #32
 800545c:	d004      	beq.n	8005468 <USBD_StdDevReq+0x24>
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d002      	beq.n	8005468 <USBD_StdDevReq+0x24>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <USBD_StdDevReq+0x34>
 8005466:	e04c      	b.n	8005502 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	4798      	blx	r3
      break;
 8005476:	e049      	b.n	800550c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	2b09      	cmp	r3, #9
 800547e:	d83a      	bhi.n	80054f6 <USBD_StdDevReq+0xb2>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <USBD_StdDevReq+0x44>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054d9 	.word	0x080054d9
 800548c:	080054ed 	.word	0x080054ed
 8005490:	080054f7 	.word	0x080054f7
 8005494:	080054e3 	.word	0x080054e3
 8005498:	080054f7 	.word	0x080054f7
 800549c:	080054bb 	.word	0x080054bb
 80054a0:	080054b1 	.word	0x080054b1
 80054a4:	080054f7 	.word	0x080054f7
 80054a8:	080054cf 	.word	0x080054cf
 80054ac:	080054c5 	.word	0x080054c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f9d4 	bl	8005860 <USBD_GetDescriptor>
          break;
 80054b8:	e022      	b.n	8005500 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fb37 	bl	8005b30 <USBD_SetAddress>
          break;
 80054c2:	e01d      	b.n	8005500 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fb74 	bl	8005bb4 <USBD_SetConfig>
          break;
 80054cc:	e018      	b.n	8005500 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fbfd 	bl	8005cd0 <USBD_GetConfig>
          break;
 80054d6:	e013      	b.n	8005500 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fc2c 	bl	8005d38 <USBD_GetStatus>
          break;
 80054e0:	e00e      	b.n	8005500 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fc5a 	bl	8005d9e <USBD_SetFeature>
          break;
 80054ea:	e009      	b.n	8005500 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fc69 	bl	8005dc6 <USBD_ClrFeature>
          break;
 80054f4:	e004      	b.n	8005500 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fcc1 	bl	8005e80 <USBD_CtlError>
          break;
 80054fe:	bf00      	nop
      }
      break;
 8005500:	e004      	b.n	800550c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fcbb 	bl	8005e80 <USBD_CtlError>
      break;
 800550a:	bf00      	nop
  }

  return ret;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop

08005518 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800552e:	2b20      	cmp	r3, #32
 8005530:	d003      	beq.n	800553a <USBD_StdItfReq+0x22>
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d001      	beq.n	800553a <USBD_StdItfReq+0x22>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d12a      	bne.n	8005590 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005540:	3b01      	subs	r3, #1
 8005542:	2b02      	cmp	r3, #2
 8005544:	d81d      	bhi.n	8005582 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	889b      	ldrh	r3, [r3, #4]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	d813      	bhi.n	8005578 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
 800555e:	4603      	mov	r3, r0
 8005560:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	88db      	ldrh	r3, [r3, #6]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d110      	bne.n	800558c <USBD_StdItfReq+0x74>
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10d      	bne.n	800558c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fd4d 	bl	8006010 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005576:	e009      	b.n	800558c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fc80 	bl	8005e80 <USBD_CtlError>
          break;
 8005580:	e004      	b.n	800558c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fc7b 	bl	8005e80 <USBD_CtlError>
          break;
 800558a:	e000      	b.n	800558e <USBD_StdItfReq+0x76>
          break;
 800558c:	bf00      	nop
      }
      break;
 800558e:	e004      	b.n	800559a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fc74 	bl	8005e80 <USBD_CtlError>
      break;
 8005598:	bf00      	nop
  }

  return USBD_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	889b      	ldrh	r3, [r3, #4]
 80055b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d004      	beq.n	80055ce <USBD_StdEPReq+0x2a>
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d002      	beq.n	80055ce <USBD_StdEPReq+0x2a>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <USBD_StdEPReq+0x3a>
 80055cc:	e13d      	b.n	800584a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
      break;
 80055dc:	e13a      	b.n	8005854 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d10a      	bne.n	8005600 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]

        return ret;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	e12a      	b.n	8005856 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d03e      	beq.n	8005686 <USBD_StdEPReq+0xe2>
 8005608:	2b03      	cmp	r3, #3
 800560a:	d002      	beq.n	8005612 <USBD_StdEPReq+0x6e>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d070      	beq.n	80056f2 <USBD_StdEPReq+0x14e>
 8005610:	e115      	b.n	800583e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005618:	2b02      	cmp	r3, #2
 800561a:	d002      	beq.n	8005622 <USBD_StdEPReq+0x7e>
 800561c:	2b03      	cmp	r3, #3
 800561e:	d015      	beq.n	800564c <USBD_StdEPReq+0xa8>
 8005620:	e02b      	b.n	800567a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005622:	7bbb      	ldrb	r3, [r7, #14]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00c      	beq.n	8005642 <USBD_StdEPReq+0x9e>
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d009      	beq.n	8005642 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800562e:	7bbb      	ldrb	r3, [r7, #14]
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 f88e 	bl	8006754 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005638:	2180      	movs	r1, #128	; 0x80
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 f88a 	bl	8006754 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005640:	e020      	b.n	8005684 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fc1b 	bl	8005e80 <USBD_CtlError>
              break;
 800564a:	e01b      	b.n	8005684 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	885b      	ldrh	r3, [r3, #2]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10e      	bne.n	8005672 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005654:	7bbb      	ldrb	r3, [r7, #14]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00b      	beq.n	8005672 <USBD_StdEPReq+0xce>
 800565a:	7bbb      	ldrb	r3, [r7, #14]
 800565c:	2b80      	cmp	r3, #128	; 0x80
 800565e:	d008      	beq.n	8005672 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	88db      	ldrh	r3, [r3, #6]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005668:	7bbb      	ldrb	r3, [r7, #14]
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 f871 	bl	8006754 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fccc 	bl	8006010 <USBD_CtlSendStatus>

              break;
 8005678:	e004      	b.n	8005684 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fbff 	bl	8005e80 <USBD_CtlError>
              break;
 8005682:	bf00      	nop
          }
          break;
 8005684:	e0e0      	b.n	8005848 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568c:	2b02      	cmp	r3, #2
 800568e:	d002      	beq.n	8005696 <USBD_StdEPReq+0xf2>
 8005690:	2b03      	cmp	r3, #3
 8005692:	d015      	beq.n	80056c0 <USBD_StdEPReq+0x11c>
 8005694:	e026      	b.n	80056e4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005696:	7bbb      	ldrb	r3, [r7, #14]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00c      	beq.n	80056b6 <USBD_StdEPReq+0x112>
 800569c:	7bbb      	ldrb	r3, [r7, #14]
 800569e:	2b80      	cmp	r3, #128	; 0x80
 80056a0:	d009      	beq.n	80056b6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80056a2:	7bbb      	ldrb	r3, [r7, #14]
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 f854 	bl	8006754 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80056ac:	2180      	movs	r1, #128	; 0x80
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f001 f850 	bl	8006754 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056b4:	e01c      	b.n	80056f0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fbe1 	bl	8005e80 <USBD_CtlError>
              break;
 80056be:	e017      	b.n	80056f0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	885b      	ldrh	r3, [r3, #2]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d112      	bne.n	80056ee <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80056c8:	7bbb      	ldrb	r3, [r7, #14]
 80056ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d004      	beq.n	80056dc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80056d2:	7bbb      	ldrb	r3, [r7, #14]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 f85b 	bl	8006792 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fc97 	bl	8006010 <USBD_CtlSendStatus>
              }
              break;
 80056e2:	e004      	b.n	80056ee <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80056e4:	6839      	ldr	r1, [r7, #0]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fbca 	bl	8005e80 <USBD_CtlError>
              break;
 80056ec:	e000      	b.n	80056f0 <USBD_StdEPReq+0x14c>
              break;
 80056ee:	bf00      	nop
          }
          break;
 80056f0:	e0aa      	b.n	8005848 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d002      	beq.n	8005702 <USBD_StdEPReq+0x15e>
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d032      	beq.n	8005766 <USBD_StdEPReq+0x1c2>
 8005700:	e097      	b.n	8005832 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005702:	7bbb      	ldrb	r3, [r7, #14]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <USBD_StdEPReq+0x174>
 8005708:	7bbb      	ldrb	r3, [r7, #14]
 800570a:	2b80      	cmp	r3, #128	; 0x80
 800570c:	d004      	beq.n	8005718 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fbb5 	bl	8005e80 <USBD_CtlError>
                break;
 8005716:	e091      	b.n	800583c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800571c:	2b00      	cmp	r3, #0
 800571e:	da0b      	bge.n	8005738 <USBD_StdEPReq+0x194>
 8005720:	7bbb      	ldrb	r3, [r7, #14]
 8005722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	3310      	adds	r3, #16
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	4413      	add	r3, r2
 8005734:	3304      	adds	r3, #4
 8005736:	e00b      	b.n	8005750 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	3304      	adds	r3, #4
 8005750:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2202      	movs	r2, #2
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fbf8 	bl	8005f54 <USBD_CtlSendData>
              break;
 8005764:	e06a      	b.n	800583c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800576a:	2b00      	cmp	r3, #0
 800576c:	da11      	bge.n	8005792 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800576e:	7bbb      	ldrb	r3, [r7, #14]
 8005770:	f003 020f 	and.w	r2, r3, #15
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	3318      	adds	r3, #24
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d117      	bne.n	80057b8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fb78 	bl	8005e80 <USBD_CtlError>
                  break;
 8005790:	e054      	b.n	800583c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005792:	7bbb      	ldrb	r3, [r7, #14]
 8005794:	f003 020f 	and.w	r2, r3, #15
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	440b      	add	r3, r1
 80057a4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fb65 	bl	8005e80 <USBD_CtlError>
                  break;
 80057b6:	e041      	b.n	800583c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	da0b      	bge.n	80057d8 <USBD_StdEPReq+0x234>
 80057c0:	7bbb      	ldrb	r3, [r7, #14]
 80057c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	3310      	adds	r3, #16
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4413      	add	r3, r2
 80057d4:	3304      	adds	r3, #4
 80057d6:	e00b      	b.n	80057f0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80057d8:	7bbb      	ldrb	r3, [r7, #14]
 80057da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	3304      	adds	r3, #4
 80057f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80057f2:	7bbb      	ldrb	r3, [r7, #14]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <USBD_StdEPReq+0x25a>
 80057f8:	7bbb      	ldrb	r3, [r7, #14]
 80057fa:	2b80      	cmp	r3, #128	; 0x80
 80057fc:	d103      	bne.n	8005806 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e00e      	b.n	8005824 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005806:	7bbb      	ldrb	r3, [r7, #14]
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 ffe0 	bl	80067d0 <USBD_LL_IsStallEP>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2201      	movs	r2, #1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	e002      	b.n	8005824 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2202      	movs	r2, #2
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fb92 	bl	8005f54 <USBD_CtlSendData>
              break;
 8005830:	e004      	b.n	800583c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fb23 	bl	8005e80 <USBD_CtlError>
              break;
 800583a:	bf00      	nop
          }
          break;
 800583c:	e004      	b.n	8005848 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fb1d 	bl	8005e80 <USBD_CtlError>
          break;
 8005846:	bf00      	nop
      }
      break;
 8005848:	e004      	b.n	8005854 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fb17 	bl	8005e80 <USBD_CtlError>
      break;
 8005852:	bf00      	nop
  }

  return ret;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	885b      	ldrh	r3, [r3, #2]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	2b06      	cmp	r3, #6
 8005882:	f200 8128 	bhi.w	8005ad6 <USBD_GetDescriptor+0x276>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <USBD_GetDescriptor+0x2c>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058a9 	.word	0x080058a9
 8005890:	080058c1 	.word	0x080058c1
 8005894:	08005901 	.word	0x08005901
 8005898:	08005ad7 	.word	0x08005ad7
 800589c:	08005ad7 	.word	0x08005ad7
 80058a0:	08005a77 	.word	0x08005a77
 80058a4:	08005aa3 	.word	0x08005aa3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	7c12      	ldrb	r2, [r2, #16]
 80058b4:	f107 0108 	add.w	r1, r7, #8
 80058b8:	4610      	mov	r0, r2
 80058ba:	4798      	blx	r3
 80058bc:	60f8      	str	r0, [r7, #12]
      break;
 80058be:	e112      	b.n	8005ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7c1b      	ldrb	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10d      	bne.n	80058e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	f107 0208 	add.w	r2, r7, #8
 80058d4:	4610      	mov	r0, r2
 80058d6:	4798      	blx	r3
 80058d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3301      	adds	r3, #1
 80058de:	2202      	movs	r2, #2
 80058e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80058e2:	e100      	b.n	8005ae6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	f107 0208 	add.w	r2, r7, #8
 80058f0:	4610      	mov	r0, r2
 80058f2:	4798      	blx	r3
 80058f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	2202      	movs	r2, #2
 80058fc:	701a      	strb	r2, [r3, #0]
      break;
 80058fe:	e0f2      	b.n	8005ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	885b      	ldrh	r3, [r3, #2]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b05      	cmp	r3, #5
 8005908:	f200 80ac 	bhi.w	8005a64 <USBD_GetDescriptor+0x204>
 800590c:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <USBD_GetDescriptor+0xb4>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	0800592d 	.word	0x0800592d
 8005918:	08005961 	.word	0x08005961
 800591c:	08005995 	.word	0x08005995
 8005920:	080059c9 	.word	0x080059c9
 8005924:	080059fd 	.word	0x080059fd
 8005928:	08005a31 	.word	0x08005a31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00b      	beq.n	8005950 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	7c12      	ldrb	r2, [r2, #16]
 8005944:	f107 0108 	add.w	r1, r7, #8
 8005948:	4610      	mov	r0, r2
 800594a:	4798      	blx	r3
 800594c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800594e:	e091      	b.n	8005a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa94 	bl	8005e80 <USBD_CtlError>
            err++;
 8005958:	7afb      	ldrb	r3, [r7, #11]
 800595a:	3301      	adds	r3, #1
 800595c:	72fb      	strb	r3, [r7, #11]
          break;
 800595e:	e089      	b.n	8005a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	7c12      	ldrb	r2, [r2, #16]
 8005978:	f107 0108 	add.w	r1, r7, #8
 800597c:	4610      	mov	r0, r2
 800597e:	4798      	blx	r3
 8005980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005982:	e077      	b.n	8005a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa7a 	bl	8005e80 <USBD_CtlError>
            err++;
 800598c:	7afb      	ldrb	r3, [r7, #11]
 800598e:	3301      	adds	r3, #1
 8005990:	72fb      	strb	r3, [r7, #11]
          break;
 8005992:	e06f      	b.n	8005a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	7c12      	ldrb	r2, [r2, #16]
 80059ac:	f107 0108 	add.w	r1, r7, #8
 80059b0:	4610      	mov	r0, r2
 80059b2:	4798      	blx	r3
 80059b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059b6:	e05d      	b.n	8005a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa60 	bl	8005e80 <USBD_CtlError>
            err++;
 80059c0:	7afb      	ldrb	r3, [r7, #11]
 80059c2:	3301      	adds	r3, #1
 80059c4:	72fb      	strb	r3, [r7, #11]
          break;
 80059c6:	e055      	b.n	8005a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00b      	beq.n	80059ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	7c12      	ldrb	r2, [r2, #16]
 80059e0:	f107 0108 	add.w	r1, r7, #8
 80059e4:	4610      	mov	r0, r2
 80059e6:	4798      	blx	r3
 80059e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059ea:	e043      	b.n	8005a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fa46 	bl	8005e80 <USBD_CtlError>
            err++;
 80059f4:	7afb      	ldrb	r3, [r7, #11]
 80059f6:	3301      	adds	r3, #1
 80059f8:	72fb      	strb	r3, [r7, #11]
          break;
 80059fa:	e03b      	b.n	8005a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	7c12      	ldrb	r2, [r2, #16]
 8005a14:	f107 0108 	add.w	r1, r7, #8
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4798      	blx	r3
 8005a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a1e:	e029      	b.n	8005a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa2c 	bl	8005e80 <USBD_CtlError>
            err++;
 8005a28:	7afb      	ldrb	r3, [r7, #11]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005a2e:	e021      	b.n	8005a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	7c12      	ldrb	r2, [r2, #16]
 8005a48:	f107 0108 	add.w	r1, r7, #8
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4798      	blx	r3
 8005a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a52:	e00f      	b.n	8005a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa12 	bl	8005e80 <USBD_CtlError>
            err++;
 8005a5c:	7afb      	ldrb	r3, [r7, #11]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	72fb      	strb	r3, [r7, #11]
          break;
 8005a62:	e007      	b.n	8005a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa0a 	bl	8005e80 <USBD_CtlError>
          err++;
 8005a6c:	7afb      	ldrb	r3, [r7, #11]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005a72:	e038      	b.n	8005ae6 <USBD_GetDescriptor+0x286>
 8005a74:	e037      	b.n	8005ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	7c1b      	ldrb	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	f107 0208 	add.w	r2, r7, #8
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	4798      	blx	r3
 8005a8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a90:	e029      	b.n	8005ae6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f9f3 	bl	8005e80 <USBD_CtlError>
        err++;
 8005a9a:	7afb      	ldrb	r3, [r7, #11]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	72fb      	strb	r3, [r7, #11]
      break;
 8005aa0:	e021      	b.n	8005ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7c1b      	ldrb	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	f107 0208 	add.w	r2, r7, #8
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4798      	blx	r3
 8005aba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ac4:	e00f      	b.n	8005ae6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f9d9 	bl	8005e80 <USBD_CtlError>
        err++;
 8005ace:	7afb      	ldrb	r3, [r7, #11]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ad4:	e007      	b.n	8005ae6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f9d1 	bl	8005e80 <USBD_CtlError>
      err++;
 8005ade:	7afb      	ldrb	r3, [r7, #11]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ae4:	bf00      	nop
  }

  if (err != 0U)
 8005ae6:	7afb      	ldrb	r3, [r7, #11]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11c      	bne.n	8005b26 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005aec:	893b      	ldrh	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d011      	beq.n	8005b16 <USBD_GetDescriptor+0x2b6>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	88db      	ldrh	r3, [r3, #6]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	88da      	ldrh	r2, [r3, #6]
 8005afe:	893b      	ldrh	r3, [r7, #8]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	bf28      	it	cs
 8005b04:	4613      	movcs	r3, r2
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b0a:	893b      	ldrh	r3, [r7, #8]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa1f 	bl	8005f54 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	88db      	ldrh	r3, [r3, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa76 	bl	8006010 <USBD_CtlSendStatus>
 8005b24:	e000      	b.n	8005b28 <USBD_GetDescriptor+0x2c8>
    return;
 8005b26:	bf00      	nop
    }
  }
}
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop

08005b30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	889b      	ldrh	r3, [r3, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d130      	bne.n	8005ba4 <USBD_SetAddress+0x74>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	88db      	ldrh	r3, [r3, #6]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d12c      	bne.n	8005ba4 <USBD_SetAddress+0x74>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	885b      	ldrh	r3, [r3, #2]
 8005b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b50:	d828      	bhi.n	8005ba4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	885b      	ldrh	r3, [r3, #2]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d104      	bne.n	8005b72 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f988 	bl	8005e80 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b70:	e01c      	b.n	8005bac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	7bfa      	ldrb	r2, [r7, #15]
 8005b76:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fe4b 	bl	800681a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fa43 	bl	8006010 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b98:	e008      	b.n	8005bac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba2:	e003      	b.n	8005bac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f96a 	bl	8005e80 <USBD_CtlError>
  }
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	885b      	ldrh	r3, [r3, #2]
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	4b41      	ldr	r3, [pc, #260]	; (8005ccc <USBD_SetConfig+0x118>)
 8005bc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005bc8:	4b40      	ldr	r3, [pc, #256]	; (8005ccc <USBD_SetConfig+0x118>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d904      	bls.n	8005bda <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f954 	bl	8005e80 <USBD_CtlError>
 8005bd8:	e075      	b.n	8005cc6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d002      	beq.n	8005bea <USBD_SetConfig+0x36>
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d023      	beq.n	8005c30 <USBD_SetConfig+0x7c>
 8005be8:	e062      	b.n	8005cb0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005bea:	4b38      	ldr	r3, [pc, #224]	; (8005ccc <USBD_SetConfig+0x118>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01a      	beq.n	8005c28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005bf2:	4b36      	ldr	r3, [pc, #216]	; (8005ccc <USBD_SetConfig+0x118>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2203      	movs	r2, #3
 8005c00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c04:	4b31      	ldr	r3, [pc, #196]	; (8005ccc <USBD_SetConfig+0x118>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff f9f3 	bl	8004ff6 <USBD_SetClassConfig>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d104      	bne.n	8005c20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f931 	bl	8005e80 <USBD_CtlError>
            return;
 8005c1e:	e052      	b.n	8005cc6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f9f5 	bl	8006010 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005c26:	e04e      	b.n	8005cc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f9f1 	bl	8006010 <USBD_CtlSendStatus>
        break;
 8005c2e:	e04a      	b.n	8005cc6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005c30:	4b26      	ldr	r3, [pc, #152]	; (8005ccc <USBD_SetConfig+0x118>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d112      	bne.n	8005c5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005c40:	4b22      	ldr	r3, [pc, #136]	; (8005ccc <USBD_SetConfig+0x118>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005c4a:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <USBD_SetConfig+0x118>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff f9ef 	bl	8005034 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f9da 	bl	8006010 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005c5c:	e033      	b.n	8005cc6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005c5e:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <USBD_SetConfig+0x118>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d01d      	beq.n	8005ca8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff f9dd 	bl	8005034 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <USBD_SetConfig+0x118>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c84:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <USBD_SetConfig+0x118>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff f9b3 	bl	8004ff6 <USBD_SetClassConfig>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d104      	bne.n	8005ca0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f8f1 	bl	8005e80 <USBD_CtlError>
            return;
 8005c9e:	e012      	b.n	8005cc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f9b5 	bl	8006010 <USBD_CtlSendStatus>
        break;
 8005ca6:	e00e      	b.n	8005cc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f9b1 	bl	8006010 <USBD_CtlSendStatus>
        break;
 8005cae:	e00a      	b.n	8005cc6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8e4 	bl	8005e80 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005cb8:	4b04      	ldr	r3, [pc, #16]	; (8005ccc <USBD_SetConfig+0x118>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff f9b8 	bl	8005034 <USBD_ClrClassConfig>
        break;
 8005cc4:	bf00      	nop
    }
  }
}
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	200002d2 	.word	0x200002d2

08005cd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	88db      	ldrh	r3, [r3, #6]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d004      	beq.n	8005cec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f8cb 	bl	8005e80 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005cea:	e021      	b.n	8005d30 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	db17      	blt.n	8005d26 <USBD_GetConfig+0x56>
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	dd02      	ble.n	8005d00 <USBD_GetConfig+0x30>
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d00b      	beq.n	8005d16 <USBD_GetConfig+0x46>
 8005cfe:	e012      	b.n	8005d26 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3308      	adds	r3, #8
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f920 	bl	8005f54 <USBD_CtlSendData>
        break;
 8005d14:	e00c      	b.n	8005d30 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f918 	bl	8005f54 <USBD_CtlSendData>
        break;
 8005d24:	e004      	b.n	8005d30 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f8a9 	bl	8005e80 <USBD_CtlError>
        break;
 8005d2e:	bf00      	nop
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d81e      	bhi.n	8005d8c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	88db      	ldrh	r3, [r3, #6]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d004      	beq.n	8005d60 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f891 	bl	8005e80 <USBD_CtlError>
        break;
 8005d5e:	e01a      	b.n	8005d96 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f043 0202 	orr.w	r2, r3, #2
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	2202      	movs	r2, #2
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8e5 	bl	8005f54 <USBD_CtlSendData>
      break;
 8005d8a:	e004      	b.n	8005d96 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f876 	bl	8005e80 <USBD_CtlError>
      break;
 8005d94:	bf00      	nop
  }
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	885b      	ldrh	r3, [r3, #2]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d106      	bne.n	8005dbe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f929 	bl	8006010 <USBD_CtlSendStatus>
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d80b      	bhi.n	8005df4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	885b      	ldrh	r3, [r3, #2]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d10c      	bne.n	8005dfe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f90f 	bl	8006010 <USBD_CtlSendStatus>
      }
      break;
 8005df2:	e004      	b.n	8005dfe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f842 	bl	8005e80 <USBD_CtlError>
      break;
 8005dfc:	e000      	b.n	8005e00 <USBD_ClrFeature+0x3a>
      break;
 8005dfe:	bf00      	nop
  }
}
 8005e00:	bf00      	nop
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781a      	ldrb	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	785a      	ldrb	r2, [r3, #1]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	3302      	adds	r3, #2
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	3303      	adds	r3, #3
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	021b      	lsls	r3, r3, #8
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	3304      	adds	r3, #4
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	3305      	adds	r3, #5
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	4413      	add	r3, r2
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	3306      	adds	r3, #6
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	3307      	adds	r3, #7
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	4413      	add	r3, r2
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	80da      	strh	r2, [r3, #6]

}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005e8a:	2180      	movs	r1, #128	; 0x80
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fc61 	bl	8006754 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005e92:	2100      	movs	r1, #0
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fc5d 	bl	8006754 <USBD_LL_StallEP>
}
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d032      	beq.n	8005f1e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f834 	bl	8005f26 <USBD_GetLen>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	75fa      	strb	r2, [r7, #23]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	75fa      	strb	r2, [r7, #23]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4413      	add	r3, r2
 8005eea:	2203      	movs	r2, #3
 8005eec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005eee:	e012      	b.n	8005f16 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	60fa      	str	r2, [r7, #12]
 8005ef6:	7dfa      	ldrb	r2, [r7, #23]
 8005ef8:	1c51      	adds	r1, r2, #1
 8005efa:	75f9      	strb	r1, [r7, #23]
 8005efc:	4611      	mov	r1, r2
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	440a      	add	r2, r1
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	75fa      	strb	r2, [r7, #23]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4413      	add	r3, r2
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e8      	bne.n	8005ef0 <USBD_GetString+0x4e>
    }
  }
}
 8005f1e:	bf00      	nop
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005f32:	e005      	b.n	8005f40 <USBD_GetLen+0x1a>
  {
    len++;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	3301      	adds	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f5      	bne.n	8005f34 <USBD_GetLen+0xe>
  }

  return len;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005f70:	88fa      	ldrh	r2, [r7, #6]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 fc6b 	bl	8006858 <USBD_LL_Transmit>

  return USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fc59 	bl	8006858 <USBD_LL_Transmit>

  return USBD_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	2100      	movs	r1, #0
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fc5e 	bl	800689e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	2100      	movs	r1, #0
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fc4c 	bl	800689e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2204      	movs	r2, #4
 800601c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006020:	2300      	movs	r3, #0
 8006022:	2200      	movs	r2, #0
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fc16 	bl	8006858 <USBD_LL_Transmit>

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2205      	movs	r2, #5
 8006042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006046:	2300      	movs	r3, #0
 8006048:	2200      	movs	r2, #0
 800604a:	2100      	movs	r1, #0
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fc26 	bl	800689e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006060:	2200      	movs	r2, #0
 8006062:	4912      	ldr	r1, [pc, #72]	; (80060ac <MX_USB_DEVICE_Init+0x50>)
 8006064:	4812      	ldr	r0, [pc, #72]	; (80060b0 <MX_USB_DEVICE_Init+0x54>)
 8006066:	f7fe ff6c 	bl	8004f42 <USBD_Init>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006070:	f7fa fb46 	bl	8000700 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006074:	490f      	ldr	r1, [pc, #60]	; (80060b4 <MX_USB_DEVICE_Init+0x58>)
 8006076:	480e      	ldr	r0, [pc, #56]	; (80060b0 <MX_USB_DEVICE_Init+0x54>)
 8006078:	f7fe ff8e 	bl	8004f98 <USBD_RegisterClass>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006082:	f7fa fb3d 	bl	8000700 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006086:	490c      	ldr	r1, [pc, #48]	; (80060b8 <MX_USB_DEVICE_Init+0x5c>)
 8006088:	4809      	ldr	r0, [pc, #36]	; (80060b0 <MX_USB_DEVICE_Init+0x54>)
 800608a:	f7fe febf 	bl	8004e0c <USBD_CDC_RegisterInterface>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006094:	f7fa fb34 	bl	8000700 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006098:	4805      	ldr	r0, [pc, #20]	; (80060b0 <MX_USB_DEVICE_Init+0x54>)
 800609a:	f7fe ff96 	bl	8004fca <USBD_Start>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80060a4:	f7fa fb2c 	bl	8000700 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060a8:	bf00      	nop
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000138 	.word	0x20000138
 80060b0:	200005c8 	.word	0x200005c8
 80060b4:	20000024 	.word	0x20000024
 80060b8:	20000128 	.word	0x20000128

080060bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80060c0:	2200      	movs	r2, #0
 80060c2:	4905      	ldr	r1, [pc, #20]	; (80060d8 <CDC_Init_FS+0x1c>)
 80060c4:	4805      	ldr	r0, [pc, #20]	; (80060dc <CDC_Init_FS+0x20>)
 80060c6:	f7fe feb7 	bl	8004e38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80060ca:	4905      	ldr	r1, [pc, #20]	; (80060e0 <CDC_Init_FS+0x24>)
 80060cc:	4803      	ldr	r0, [pc, #12]	; (80060dc <CDC_Init_FS+0x20>)
 80060ce:	f7fe fecc 	bl	8004e6a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80060d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000c74 	.word	0x20000c74
 80060dc:	200005c8 	.word	0x200005c8
 80060e0:	2000088c 	.word	0x2000088c

080060e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80060e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr
	...

080060f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	71fb      	strb	r3, [r7, #7]
 8006100:	4613      	mov	r3, r2
 8006102:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	2b23      	cmp	r3, #35	; 0x23
 8006108:	d84a      	bhi.n	80061a0 <CDC_Control_FS+0xac>
 800610a:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <CDC_Control_FS+0x1c>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	080061a1 	.word	0x080061a1
 8006114:	080061a1 	.word	0x080061a1
 8006118:	080061a1 	.word	0x080061a1
 800611c:	080061a1 	.word	0x080061a1
 8006120:	080061a1 	.word	0x080061a1
 8006124:	080061a1 	.word	0x080061a1
 8006128:	080061a1 	.word	0x080061a1
 800612c:	080061a1 	.word	0x080061a1
 8006130:	080061a1 	.word	0x080061a1
 8006134:	080061a1 	.word	0x080061a1
 8006138:	080061a1 	.word	0x080061a1
 800613c:	080061a1 	.word	0x080061a1
 8006140:	080061a1 	.word	0x080061a1
 8006144:	080061a1 	.word	0x080061a1
 8006148:	080061a1 	.word	0x080061a1
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080061a1 	.word	0x080061a1
 8006154:	080061a1 	.word	0x080061a1
 8006158:	080061a1 	.word	0x080061a1
 800615c:	080061a1 	.word	0x080061a1
 8006160:	080061a1 	.word	0x080061a1
 8006164:	080061a1 	.word	0x080061a1
 8006168:	080061a1 	.word	0x080061a1
 800616c:	080061a1 	.word	0x080061a1
 8006170:	080061a1 	.word	0x080061a1
 8006174:	080061a1 	.word	0x080061a1
 8006178:	080061a1 	.word	0x080061a1
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061a1 	.word	0x080061a1
 8006184:	080061a1 	.word	0x080061a1
 8006188:	080061a1 	.word	0x080061a1
 800618c:	080061a1 	.word	0x080061a1
 8006190:	080061a1 	.word	0x080061a1
 8006194:	080061a1 	.word	0x080061a1
 8006198:	080061a1 	.word	0x080061a1
 800619c:	080061a1 	.word	0x080061a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80061a0:	bf00      	nop
  }

  return (USBD_OK);
 80061a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bc80      	pop	{r7}
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop

080061b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	480c      	ldr	r0, [pc, #48]	; (80061f0 <CDC_Receive_FS+0x40>)
 80061be:	f7fe fe54 	bl	8004e6a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80061c2:	480b      	ldr	r0, [pc, #44]	; (80061f0 <CDC_Receive_FS+0x40>)
 80061c4:	f7fe fe93 	bl	8004eee <USBD_CDC_ReceivePacket>

  memcpy(rf_tx_buffer, Buf, *Len);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4808      	ldr	r0, [pc, #32]	; (80061f4 <CDC_Receive_FS+0x44>)
 80061d2:	f000 fc0b 	bl	80069ec <memcpy>
  rf_tx_buffer_count = *Len;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <CDC_Receive_FS+0x48>)
 80061de:	601a      	str	r2, [r3, #0]
  rx_newData = 1;
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <CDC_Receive_FS+0x4c>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	701a      	strb	r2, [r3, #0]

  //CDC_Transmit_FS(Buf, *Len);
  //HAL_Delay(5);

  return (USBD_OK);
 80061e6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	200005c8 	.word	0x200005c8
 80061f4:	200001c8 	.word	0x200001c8
 80061f8:	200002c8 	.word	0x200002c8
 80061fc:	200002ce 	.word	0x200002ce

08006200 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006210:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <CDC_Transmit_FS+0x48>)
 8006212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006216:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006222:	2301      	movs	r3, #1
 8006224:	e00b      	b.n	800623e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006226:	887b      	ldrh	r3, [r7, #2]
 8006228:	461a      	mov	r2, r3
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4806      	ldr	r0, [pc, #24]	; (8006248 <CDC_Transmit_FS+0x48>)
 800622e:	f7fe fe03 	bl	8004e38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006232:	4805      	ldr	r0, [pc, #20]	; (8006248 <CDC_Transmit_FS+0x48>)
 8006234:	f7fe fe2c 	bl	8004e90 <USBD_CDC_TransmitPacket>
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	200005c8 	.word	0x200005c8

0800624c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	6039      	str	r1, [r7, #0]
 8006256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2212      	movs	r2, #18
 800625c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800625e:	4b03      	ldr	r3, [pc, #12]	; (800626c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000154 	.word	0x20000154

08006270 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	6039      	str	r1, [r7, #0]
 800627a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2204      	movs	r2, #4
 8006280:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006282:	4b03      	ldr	r3, [pc, #12]	; (8006290 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000168 	.word	0x20000168

08006294 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	6039      	str	r1, [r7, #0]
 800629e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d105      	bne.n	80062b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	4907      	ldr	r1, [pc, #28]	; (80062c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80062aa:	4808      	ldr	r0, [pc, #32]	; (80062cc <USBD_FS_ProductStrDescriptor+0x38>)
 80062ac:	f7ff fdf9 	bl	8005ea2 <USBD_GetString>
 80062b0:	e004      	b.n	80062bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	4904      	ldr	r1, [pc, #16]	; (80062c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80062b6:	4805      	ldr	r0, [pc, #20]	; (80062cc <USBD_FS_ProductStrDescriptor+0x38>)
 80062b8:	f7ff fdf3 	bl	8005ea2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80062bc:	4b02      	ldr	r3, [pc, #8]	; (80062c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2000105c 	.word	0x2000105c
 80062cc:	08006a40 	.word	0x08006a40

080062d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	6039      	str	r1, [r7, #0]
 80062da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	4904      	ldr	r1, [pc, #16]	; (80062f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80062e0:	4804      	ldr	r0, [pc, #16]	; (80062f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80062e2:	f7ff fdde 	bl	8005ea2 <USBD_GetString>
  return USBD_StrDesc;
 80062e6:	4b02      	ldr	r3, [pc, #8]	; (80062f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	2000105c 	.word	0x2000105c
 80062f4:	08006a50 	.word	0x08006a50

080062f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	6039      	str	r1, [r7, #0]
 8006302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	221a      	movs	r2, #26
 8006308:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800630a:	f000 f843 	bl	8006394 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800630e:	4b02      	ldr	r3, [pc, #8]	; (8006318 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	2000016c 	.word	0x2000016c

0800631c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	6039      	str	r1, [r7, #0]
 8006326:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d105      	bne.n	800633a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	4907      	ldr	r1, [pc, #28]	; (8006350 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006332:	4808      	ldr	r0, [pc, #32]	; (8006354 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006334:	f7ff fdb5 	bl	8005ea2 <USBD_GetString>
 8006338:	e004      	b.n	8006344 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	4904      	ldr	r1, [pc, #16]	; (8006350 <USBD_FS_ConfigStrDescriptor+0x34>)
 800633e:	4805      	ldr	r0, [pc, #20]	; (8006354 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006340:	f7ff fdaf 	bl	8005ea2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006344:	4b02      	ldr	r3, [pc, #8]	; (8006350 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	2000105c 	.word	0x2000105c
 8006354:	08006a64 	.word	0x08006a64

08006358 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	6039      	str	r1, [r7, #0]
 8006362:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	4907      	ldr	r1, [pc, #28]	; (800638c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800636e:	4808      	ldr	r0, [pc, #32]	; (8006390 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006370:	f7ff fd97 	bl	8005ea2 <USBD_GetString>
 8006374:	e004      	b.n	8006380 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	4904      	ldr	r1, [pc, #16]	; (800638c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800637a:	4805      	ldr	r0, [pc, #20]	; (8006390 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800637c:	f7ff fd91 	bl	8005ea2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006380:	4b02      	ldr	r3, [pc, #8]	; (800638c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	2000105c 	.word	0x2000105c
 8006390:	08006a70 	.word	0x08006a70

08006394 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <Get_SerialNum+0x44>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063a0:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <Get_SerialNum+0x48>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80063a6:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <Get_SerialNum+0x4c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4413      	add	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063ba:	2208      	movs	r2, #8
 80063bc:	4909      	ldr	r1, [pc, #36]	; (80063e4 <Get_SerialNum+0x50>)
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f814 	bl	80063ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80063c4:	2204      	movs	r2, #4
 80063c6:	4908      	ldr	r1, [pc, #32]	; (80063e8 <Get_SerialNum+0x54>)
 80063c8:	68b8      	ldr	r0, [r7, #8]
 80063ca:	f000 f80f 	bl	80063ec <IntToUnicode>
  }
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	1ffff7e8 	.word	0x1ffff7e8
 80063dc:	1ffff7ec 	.word	0x1ffff7ec
 80063e0:	1ffff7f0 	.word	0x1ffff7f0
 80063e4:	2000016e 	.word	0x2000016e
 80063e8:	2000017e 	.word	0x2000017e

080063ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]
 8006402:	e027      	b.n	8006454 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	0f1b      	lsrs	r3, r3, #28
 8006408:	2b09      	cmp	r3, #9
 800640a:	d80b      	bhi.n	8006424 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	0f1b      	lsrs	r3, r3, #28
 8006410:	b2da      	uxtb	r2, r3
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	4619      	mov	r1, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	440b      	add	r3, r1
 800641c:	3230      	adds	r2, #48	; 0x30
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e00a      	b.n	800643a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	0f1b      	lsrs	r3, r3, #28
 8006428:	b2da      	uxtb	r2, r3
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	4619      	mov	r1, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	440b      	add	r3, r1
 8006434:	3237      	adds	r2, #55	; 0x37
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	3301      	adds	r3, #1
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	4413      	add	r3, r2
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	3301      	adds	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
 8006454:	7dfa      	ldrb	r2, [r7, #23]
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	429a      	cmp	r2, r3
 800645a:	d3d3      	bcc.n	8006404 <IntToUnicode+0x18>
  }
}
 800645c:	bf00      	nop
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr
	...

08006468 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a0d      	ldr	r2, [pc, #52]	; (80064ac <HAL_PCD_MspInit+0x44>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d113      	bne.n	80064a2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <HAL_PCD_MspInit+0x48>)
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	4a0c      	ldr	r2, [pc, #48]	; (80064b0 <HAL_PCD_MspInit+0x48>)
 8006480:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006484:	61d3      	str	r3, [r2, #28]
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <HAL_PCD_MspInit+0x48>)
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006492:	2200      	movs	r2, #0
 8006494:	2100      	movs	r1, #0
 8006496:	2014      	movs	r0, #20
 8006498:	f7fa fead 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800649c:	2014      	movs	r0, #20
 800649e:	f7fa fec6 	bl	800122e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40005c00 	.word	0x40005c00
 80064b0:	40021000 	.word	0x40021000

080064b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f7fe fdc5 	bl	800505a <USBD_LL_SetupStage>
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80064ea:	78fb      	ldrb	r3, [r7, #3]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	015b      	lsls	r3, r3, #5
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	4619      	mov	r1, r3
 80064fc:	f7fe fdf8 	bl	80050f0 <USBD_LL_DataOutStage>
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	015b      	lsls	r3, r3, #5
 8006520:	4413      	add	r3, r2
 8006522:	333c      	adds	r3, #60	; 0x3c
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	4619      	mov	r1, r3
 800652a:	f7fe fe52 	bl	80051d2 <USBD_LL_DataInStage>
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe ff62 	bl	800540e <USBD_LL_SOF>
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800655a:	2301      	movs	r3, #1
 800655c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d001      	beq.n	800656a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006566:	f7fa f8cb 	bl	8000700 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006570:	7bfa      	ldrb	r2, [r7, #15]
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f7fe ff12 	bl	800539e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fecb 	bl	800531c <USBD_LL_Reset>
}
 8006586:	bf00      	nop
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe ff0c 	bl	80053bc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80065ac:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <HAL_PCD_SuspendCallback+0x30>)
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	4a03      	ldr	r2, [pc, #12]	; (80065c0 <HAL_PCD_SuspendCallback+0x30>)
 80065b2:	f043 0306 	orr.w	r3, r3, #6
 80065b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	e000ed00 	.word	0xe000ed00

080065c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe ff06 	bl	80053e4 <USBD_LL_Resume>
}
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80065e8:	4a28      	ldr	r2, [pc, #160]	; (800668c <USBD_LL_Init+0xac>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a26      	ldr	r2, [pc, #152]	; (800668c <USBD_LL_Init+0xac>)
 80065f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80065f8:	4b24      	ldr	r3, [pc, #144]	; (800668c <USBD_LL_Init+0xac>)
 80065fa:	4a25      	ldr	r2, [pc, #148]	; (8006690 <USBD_LL_Init+0xb0>)
 80065fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80065fe:	4b23      	ldr	r3, [pc, #140]	; (800668c <USBD_LL_Init+0xac>)
 8006600:	2208      	movs	r2, #8
 8006602:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006604:	4b21      	ldr	r3, [pc, #132]	; (800668c <USBD_LL_Init+0xac>)
 8006606:	2202      	movs	r2, #2
 8006608:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800660a:	4b20      	ldr	r3, [pc, #128]	; (800668c <USBD_LL_Init+0xac>)
 800660c:	2200      	movs	r2, #0
 800660e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006610:	4b1e      	ldr	r3, [pc, #120]	; (800668c <USBD_LL_Init+0xac>)
 8006612:	2200      	movs	r2, #0
 8006614:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006616:	4b1d      	ldr	r3, [pc, #116]	; (800668c <USBD_LL_Init+0xac>)
 8006618:	2200      	movs	r2, #0
 800661a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800661c:	481b      	ldr	r0, [pc, #108]	; (800668c <USBD_LL_Init+0xac>)
 800661e:	f7fa ffc2 	bl	80015a6 <HAL_PCD_Init>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006628:	f7fa f86a 	bl	8000700 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006632:	2318      	movs	r3, #24
 8006634:	2200      	movs	r2, #0
 8006636:	2100      	movs	r1, #0
 8006638:	f7fb fe5a 	bl	80022f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006642:	2358      	movs	r3, #88	; 0x58
 8006644:	2200      	movs	r2, #0
 8006646:	2180      	movs	r1, #128	; 0x80
 8006648:	f7fb fe52 	bl	80022f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006652:	23c0      	movs	r3, #192	; 0xc0
 8006654:	2200      	movs	r2, #0
 8006656:	2181      	movs	r1, #129	; 0x81
 8006658:	f7fb fe4a 	bl	80022f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006662:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006666:	2200      	movs	r2, #0
 8006668:	2101      	movs	r1, #1
 800666a:	f7fb fe41 	bl	80022f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006678:	2200      	movs	r2, #0
 800667a:	2182      	movs	r1, #130	; 0x82
 800667c:	f7fb fe38 	bl	80022f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	2000125c 	.word	0x2000125c
 8006690:	40005c00 	.word	0x40005c00

08006694 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fb f85c 	bl	8001768 <HAL_PCD_Start>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f948 	bl	800694c <USBD_Get_USB_Status>
 80066bc:	4603      	mov	r3, r0
 80066be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	4608      	mov	r0, r1
 80066d4:	4611      	mov	r1, r2
 80066d6:	461a      	mov	r2, r3
 80066d8:	4603      	mov	r3, r0
 80066da:	70fb      	strb	r3, [r7, #3]
 80066dc:	460b      	mov	r3, r1
 80066de:	70bb      	strb	r3, [r7, #2]
 80066e0:	4613      	mov	r3, r2
 80066e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066f2:	78bb      	ldrb	r3, [r7, #2]
 80066f4:	883a      	ldrh	r2, [r7, #0]
 80066f6:	78f9      	ldrb	r1, [r7, #3]
 80066f8:	f7fb f98f 	bl	8001a1a <HAL_PCD_EP_Open>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f922 	bl	800694c <USBD_Get_USB_Status>
 8006708:	4603      	mov	r3, r0
 800670a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800670c:	7bbb      	ldrb	r3, [r7, #14]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006730:	78fa      	ldrb	r2, [r7, #3]
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f7fb f9d0 	bl	8001ada <HAL_PCD_EP_Close>
 800673a:	4603      	mov	r3, r0
 800673c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	4618      	mov	r0, r3
 8006742:	f000 f903 	bl	800694c <USBD_Get_USB_Status>
 8006746:	4603      	mov	r3, r0
 8006748:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800674a:	7bbb      	ldrb	r3, [r7, #14]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	4611      	mov	r1, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f7fb fa7a 	bl	8001c6c <HAL_PCD_EP_SetStall>
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f8e4 	bl	800694c <USBD_Get_USB_Status>
 8006784:	4603      	mov	r3, r0
 8006786:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006788:	7bbb      	ldrb	r3, [r7, #14]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	460b      	mov	r3, r1
 800679c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fb fab5 	bl	8001d20 <HAL_PCD_EP_ClrStall>
 80067b6:	4603      	mov	r3, r0
 80067b8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 f8c5 	bl	800694c <USBD_Get_USB_Status>
 80067c2:	4603      	mov	r3, r0
 80067c4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067e2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80067e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da08      	bge.n	80067fe <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	015b      	lsls	r3, r3, #5
 80067f6:	4413      	add	r3, r2
 80067f8:	332a      	adds	r3, #42	; 0x2a
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	e008      	b.n	8006810 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	015b      	lsls	r3, r3, #5
 8006808:	4413      	add	r3, r2
 800680a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800680e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	4611      	mov	r1, r2
 8006838:	4618      	mov	r0, r3
 800683a:	f7fb f8c9 	bl	80019d0 <HAL_PCD_SetAddress>
 800683e:	4603      	mov	r3, r0
 8006840:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 f881 	bl	800694c <USBD_Get_USB_Status>
 800684a:	4603      	mov	r3, r0
 800684c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800684e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	607a      	str	r2, [r7, #4]
 8006862:	461a      	mov	r2, r3
 8006864:	460b      	mov	r3, r1
 8006866:	72fb      	strb	r3, [r7, #11]
 8006868:	4613      	mov	r3, r2
 800686a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800687a:	893b      	ldrh	r3, [r7, #8]
 800687c:	7af9      	ldrb	r1, [r7, #11]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	f7fb f9bb 	bl	8001bfa <HAL_PCD_EP_Transmit>
 8006884:	4603      	mov	r3, r0
 8006886:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	4618      	mov	r0, r3
 800688c:	f000 f85e 	bl	800694c <USBD_Get_USB_Status>
 8006890:	4603      	mov	r3, r0
 8006892:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006894:	7dbb      	ldrb	r3, [r7, #22]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b086      	sub	sp, #24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	461a      	mov	r2, r3
 80068aa:	460b      	mov	r3, r1
 80068ac:	72fb      	strb	r3, [r7, #11]
 80068ae:	4613      	mov	r3, r2
 80068b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80068c0:	893b      	ldrh	r3, [r7, #8]
 80068c2:	7af9      	ldrb	r1, [r7, #11]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	f7fb f94a 	bl	8001b5e <HAL_PCD_EP_Receive>
 80068ca:	4603      	mov	r3, r0
 80068cc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f83b 	bl	800694c <USBD_Get_USB_Status>
 80068d6:	4603      	mov	r3, r0
 80068d8:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80068da:	7dbb      	ldrb	r3, [r7, #22]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fb f969 	bl	8001bd2 <HAL_PCD_EP_GetRxCount>
 8006900:	4603      	mov	r3, r0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006914:	4b02      	ldr	r3, [pc, #8]	; (8006920 <USBD_static_malloc+0x14>)
}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr
 8006920:	200002d4 	.word	0x200002d4

08006924 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]

}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	bc80      	pop	{r7}
 8006934:	4770      	bx	lr

08006936 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr

0800694c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800695a:	79fb      	ldrb	r3, [r7, #7]
 800695c:	2b03      	cmp	r3, #3
 800695e:	d817      	bhi.n	8006990 <USBD_Get_USB_Status+0x44>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <USBD_Get_USB_Status+0x1c>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	08006979 	.word	0x08006979
 800696c:	0800697f 	.word	0x0800697f
 8006970:	08006985 	.word	0x08006985
 8006974:	0800698b 	.word	0x0800698b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
    break;
 800697c:	e00b      	b.n	8006996 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800697e:	2302      	movs	r3, #2
 8006980:	73fb      	strb	r3, [r7, #15]
    break;
 8006982:	e008      	b.n	8006996 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006984:	2301      	movs	r3, #1
 8006986:	73fb      	strb	r3, [r7, #15]
    break;
 8006988:	e005      	b.n	8006996 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800698a:	2302      	movs	r3, #2
 800698c:	73fb      	strb	r3, [r7, #15]
    break;
 800698e:	e002      	b.n	8006996 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006990:	2302      	movs	r3, #2
 8006992:	73fb      	strb	r3, [r7, #15]
    break;
 8006994:	bf00      	nop
  }
  return usb_status;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop

080069a4 <__libc_init_array>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	2500      	movs	r5, #0
 80069a8:	4e0c      	ldr	r6, [pc, #48]	; (80069dc <__libc_init_array+0x38>)
 80069aa:	4c0d      	ldr	r4, [pc, #52]	; (80069e0 <__libc_init_array+0x3c>)
 80069ac:	1ba4      	subs	r4, r4, r6
 80069ae:	10a4      	asrs	r4, r4, #2
 80069b0:	42a5      	cmp	r5, r4
 80069b2:	d109      	bne.n	80069c8 <__libc_init_array+0x24>
 80069b4:	f000 f82e 	bl	8006a14 <_init>
 80069b8:	2500      	movs	r5, #0
 80069ba:	4e0a      	ldr	r6, [pc, #40]	; (80069e4 <__libc_init_array+0x40>)
 80069bc:	4c0a      	ldr	r4, [pc, #40]	; (80069e8 <__libc_init_array+0x44>)
 80069be:	1ba4      	subs	r4, r4, r6
 80069c0:	10a4      	asrs	r4, r4, #2
 80069c2:	42a5      	cmp	r5, r4
 80069c4:	d105      	bne.n	80069d2 <__libc_init_array+0x2e>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069cc:	4798      	blx	r3
 80069ce:	3501      	adds	r5, #1
 80069d0:	e7ee      	b.n	80069b0 <__libc_init_array+0xc>
 80069d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069d6:	4798      	blx	r3
 80069d8:	3501      	adds	r5, #1
 80069da:	e7f2      	b.n	80069c2 <__libc_init_array+0x1e>
 80069dc:	08006a90 	.word	0x08006a90
 80069e0:	08006a90 	.word	0x08006a90
 80069e4:	08006a90 	.word	0x08006a90
 80069e8:	08006a94 	.word	0x08006a94

080069ec <memcpy>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	1e43      	subs	r3, r0, #1
 80069f0:	440a      	add	r2, r1
 80069f2:	4291      	cmp	r1, r2
 80069f4:	d100      	bne.n	80069f8 <memcpy+0xc>
 80069f6:	bd10      	pop	{r4, pc}
 80069f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a00:	e7f7      	b.n	80069f2 <memcpy+0x6>

08006a02 <memset>:
 8006a02:	4603      	mov	r3, r0
 8006a04:	4402      	add	r2, r0
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d100      	bne.n	8006a0c <memset+0xa>
 8006a0a:	4770      	bx	lr
 8006a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a10:	e7f9      	b.n	8006a06 <memset+0x4>
	...

08006a14 <_init>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr

08006a20 <_fini>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	bf00      	nop
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr
