
nrf-ShieldHost-STM_LED_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006974  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006a80  08006a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae4  08006ae4  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  08006ae4  08006ae4  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ae4  08006ae4  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae8  08006ae8  00016ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08006aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001340  20000188  08006c74  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c8  08006c74  000214c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016655  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003212  00000000  00000000  00036806  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d58  00000000  00000000  00039a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  0003a770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f6c  00000000  00000000  0003b340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e172  00000000  00000000  000522ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f9a9  00000000  00000000  0006041e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cfdc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000341c  00000000  00000000  000cfe44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a68 	.word	0x08006a68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08006a68 	.word	0x08006a68

0800014c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000186:	bf00      	nop
     __ASM volatile ("NOP");
 8000188:	bf00      	nop
  __ASM volatile ("NOP");
 800018a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
  }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <init_led>:
#include "ledControl.h"

void init_led(uint16_t pin_R, GPIO_TypeDef* port_R, uint16_t pin_G, GPIO_TypeDef* port_G, uint16_t pin_B, GPIO_TypeDef* port_B)
{
 80001ac:	b480      	push	{r7}
 80001ae:	b085      	sub	sp, #20
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60b9      	str	r1, [r7, #8]
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	4603      	mov	r3, r0
 80001b8:	81fb      	strh	r3, [r7, #14]
 80001ba:	4613      	mov	r3, r2
 80001bc:	81bb      	strh	r3, [r7, #12]

}
 80001be:	bf00      	nop
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b093      	sub	sp, #76	; 0x4c
 80001cc:	af12      	add	r7, sp, #72	; 0x48
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fee1 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f853 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8e3 	bl	80003a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001da:	f000 f8ab 	bl	8000334 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001de:	f005 ff67 	bl	80060b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init ();
 80001e2:	f7ff ffb3 	bl	800014c <DWT_Delay_Init>
  init_led(LED_R_Pin, GPIOB, LED_G_Pin, GPIOB,LED_B_Pin, GPIOB);
 80001e6:	4b1d      	ldr	r3, [pc, #116]	; (800025c <main+0x94>)
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	2302      	movs	r3, #2
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	4b1b      	ldr	r3, [pc, #108]	; (800025c <main+0x94>)
 80001f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001f4:	4919      	ldr	r1, [pc, #100]	; (800025c <main+0x94>)
 80001f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80001fa:	f7ff ffd7 	bl	80001ac <init_led>

  nRFint_guard = 0;		// Do not execute interruptions until the nRF initalization is complete
 80001fe:	4b18      	ldr	r3, [pc, #96]	; (8000260 <main+0x98>)
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
  rf_tx_buffer_count = 0;
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <main+0x9c>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
  rf_tx_SendMsg = 0;
 800020a:	4b17      	ldr	r3, [pc, #92]	; (8000268 <main+0xa0>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]
  rfBridgeON = 0;   	// Don't transfer data via RF until the Handshake HOST <-> STM is complete
 8000210:	4b16      	ldr	r3, [pc, #88]	; (800026c <main+0xa4>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]

  nRF24L01_STM32(hspi1); // Set the SPI parameters for the nRF library
 8000216:	4c16      	ldr	r4, [pc, #88]	; (8000270 <main+0xa8>)
 8000218:	4668      	mov	r0, sp
 800021a:	f104 0310 	add.w	r3, r4, #16
 800021e:	2248      	movs	r2, #72	; 0x48
 8000220:	4619      	mov	r1, r3
 8000222:	f006 fc0d 	bl	8006a40 <memcpy>
 8000226:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800022a:	f000 faa9 	bl	8000780 <nRF24L01_STM32>

  // Initiate the nRF with the channel, data rate and tx power parameters
  init(nRF_Canal, RF_DATA_RATE_1Mbps, RF_TX_POWER_0dBm, autoAck_enabled);
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <main+0xac>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2203      	movs	r2, #3
 8000234:	2100      	movs	r1, #0
 8000236:	205c      	movs	r0, #92	; 0x5c
 8000238:	f000 faba 	bl	80007b0 <init>
  rx_newPayload = 0;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <main+0xb0>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
  nRFint_guard = 1; //Liberar execução da interrupção externa
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <main+0x98>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  get_Msg_fromHost();	// Read the messages from the host received via USB
 8000248:	f000 f980 	bl	800054c <get_Msg_fromHost>

	  IRQ_read();
 800024c:	f000 f938 	bl	80004c0 <IRQ_read>


	  tx_task();	// If there is message from the Host, read correctly by get_Msg_fromHost(), it's
 8000250:	f000 f9e6 	bl	8000620 <tx_task>
	  	  	  	  	//  sent to the MIP via RF

	  rx_task();  	// Verifies if package arrived from the MIP (via RF) and send it to the Host via COM port.
 8000254:	f000 f95a 	bl	800050c <rx_task>
	  get_Msg_fromHost();	// Read the messages from the host received via USB
 8000258:	e7f6      	b.n	8000248 <main+0x80>
 800025a:	bf00      	nop
 800025c:	40010c00 	.word	0x40010c00
 8000260:	200001c4 	.word	0x200001c4
 8000264:	200002c8 	.word	0x200002c8
 8000268:	200002cc 	.word	0x200002cc
 800026c:	200002cd 	.word	0x200002cd
 8000270:	2000056c 	.word	0x2000056c
 8000274:	20000000 	.word	0x20000000
 8000278:	200001c6 	.word	0x200001c6

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b094      	sub	sp, #80	; 0x50
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f006 fbe3 	bl	8006a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 f872 	bl	80023bc <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002de:	f000 fa27 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f8:	f107 0314 	add.w	r3, r7, #20
 80002fc:	2101      	movs	r1, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fadc 	bl	80028bc <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800030a:	f000 fa11 	bl	8000730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800030e:	2310      	movs	r3, #16
 8000310:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000316:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4618      	mov	r0, r3
 800031c:	f002 fc42 	bl	8002ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000326:	f000 fa03 	bl	8000730 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3750      	adds	r7, #80	; 0x50
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_SPI1_Init+0x64>)
 800033a:	4a18      	ldr	r2, [pc, #96]	; (800039c <MX_SPI1_Init+0x68>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_SPI1_Init+0x64>)
 8000340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_SPI1_Init+0x64>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_SPI1_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_SPI1_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_SPI1_Init+0x64>)
 8000360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_SPI1_Init+0x64>)
 8000368:	2210      	movs	r2, #16
 800036a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_SPI1_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_SPI1_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_SPI1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_SPI1_Init+0x64>)
 8000380:	220a      	movs	r2, #10
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_SPI1_Init+0x64>)
 8000386:	f002 fcc3 	bl	8002d10 <HAL_SPI_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000390:	f000 f9ce 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000056c 	.word	0x2000056c
 800039c:	40013000 	.word	0x40013000

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b3e      	ldr	r3, [pc, #248]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a3d      	ldr	r2, [pc, #244]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0310 	and.w	r3, r3, #16
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003cc:	4b38      	ldr	r3, [pc, #224]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a37      	ldr	r2, [pc, #220]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b35      	ldr	r3, [pc, #212]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0320 	and.w	r3, r3, #32
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <MX_GPIO_Init+0x110>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a2b      	ldr	r2, [pc, #172]	; (80004b0 <MX_GPIO_Init+0x110>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <MX_GPIO_Init+0x110>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041a:	4826      	ldr	r0, [pc, #152]	; (80004b4 <MX_GPIO_Init+0x114>)
 800041c:	f001 f8bd 	bl	800159a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CSN_GPIO_Port, RF_CSN_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2110      	movs	r1, #16
 8000424:	4824      	ldr	r0, [pc, #144]	; (80004b8 <MX_GPIO_Init+0x118>)
 8000426:	f001 f8b8 	bl	800159a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_CE_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin 
 800042a:	2200      	movs	r2, #0
 800042c:	f640 7103 	movw	r1, #3843	; 0xf03
 8000430:	4822      	ldr	r0, [pc, #136]	; (80004bc <MX_GPIO_Init+0x11c>)
 8000432:	f001 f8b2 	bl	800159a <HAL_GPIO_WritePin>
                          |LED_VERDE_Pin|LED_VERMELHO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2302      	movs	r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4819      	ldr	r0, [pc, #100]	; (80004b4 <MX_GPIO_Init+0x114>)
 8000450:	f000 ff32 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 8000454:	2308      	movs	r3, #8
 8000456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4814      	ldr	r0, [pc, #80]	; (80004b8 <MX_GPIO_Init+0x118>)
 8000468:	f000 ff26 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_CSN_Pin */
  GPIO_InitStruct.Pin = RF_CSN_Pin;
 800046c:	2310      	movs	r3, #16
 800046e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000470:	2301      	movs	r3, #1
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	2302      	movs	r3, #2
 800047a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_CSN_GPIO_Port, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	480d      	ldr	r0, [pc, #52]	; (80004b8 <MX_GPIO_Init+0x118>)
 8000484:	f000 ff18 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CE_Pin LED_B_Pin LED_G_Pin LED_R_Pin 
                           LED_VERDE_Pin LED_VERMELHO_Pin */
  GPIO_InitStruct.Pin = RF_CE_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin 
 8000488:	f640 7303 	movw	r3, #3843	; 0xf03
 800048c:	613b      	str	r3, [r7, #16]
                          |LED_VERDE_Pin|LED_VERMELHO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2302      	movs	r3, #2
 8000498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <MX_GPIO_Init+0x11c>)
 80004a2:	f000 ff09 	bl	80012b8 <HAL_GPIO_Init>

}
 80004a6:	bf00      	nop
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40011000 	.word	0x40011000
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40010c00 	.word	0x40010c00

080004c0 <IRQ_read>:
  }
}*/


void IRQ_read()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c8:	480a      	ldr	r0, [pc, #40]	; (80004f4 <IRQ_read+0x34>)
 80004ca:	f001 f87e 	bl	80015ca <HAL_GPIO_TogglePin>
	if( (nRFint_guard > 0) && (HAL_GPIO_ReadPin(RF_IRQ_GPIO_Port, RF_IRQ_Pin) == 0) )
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <IRQ_read+0x38>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d00b      	beq.n	80004ee <IRQ_read+0x2e>
 80004d6:	2108      	movs	r1, #8
 80004d8:	4808      	ldr	r0, [pc, #32]	; (80004fc <IRQ_read+0x3c>)
 80004da:	f001 f847 	bl	800156c <HAL_GPIO_ReadPin>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d104      	bne.n	80004ee <IRQ_read+0x2e>
	{
		//HAL_Delay(5);
		RF_IRQ(rx_buf, &rx_payloadWidth, &rx_newPayload);
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <IRQ_read+0x40>)
 80004e6:	4907      	ldr	r1, [pc, #28]	; (8000504 <IRQ_read+0x44>)
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <IRQ_read+0x48>)
 80004ea:	f000 fb91 	bl	8000c10 <RF_IRQ>
	}
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40011000 	.word	0x40011000
 80004f8:	200001c4 	.word	0x200001c4
 80004fc:	40010800 	.word	0x40010800
 8000500:	200001c6 	.word	0x200001c6
 8000504:	200001c5 	.word	0x200001c5
 8000508:	2000054c 	.word	0x2000054c

0800050c <rx_task>:

/**
 * Verifica se algum pacote foi recebido pela interrupção e envia ao Host.
 */
void rx_task()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    //Verificar se chegou (recebeu) um novo pacote pelo canal RF.
    //(O MIP enviou um pacote para o HOST).
    if (rx_newPayload > 0)  //newPayload setada em IRQ de chegada de novo pacote (RX)
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <rx_task+0x34>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d010      	beq.n	800053a <rx_task+0x2e>
    {

        rx_newPayload = 0; //sdinalizar payload recebida
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <rx_task+0x34>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]

        if(rx_payloadWidth > 0) //Se a interrupção foi gerado por algum ruído etc, não teremos dados no payload
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <rx_task+0x38>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d009      	beq.n	800053a <rx_task+0x2e>
        {
          //Enviar pacote recebido para o código do HOST (Visual Studio) via serial COMM (USB)

        	CDC_Transmit_FS(rx_buf, rx_payloadWidth);
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <rx_task+0x38>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b29b      	uxth	r3, r3
 800052c:	4619      	mov	r1, r3
 800052e:	4806      	ldr	r0, [pc, #24]	; (8000548 <rx_task+0x3c>)
 8000530:	f005 fe90 	bl	8006254 <CDC_Transmit_FS>
        	HAL_Delay(5);
 8000534:	2005      	movs	r0, #5
 8000536:	f000 fd8f 	bl	8001058 <HAL_Delay>
        }

    }
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200001c6 	.word	0x200001c6
 8000544:	200001c5 	.word	0x200001c5
 8000548:	2000054c 	.word	0x2000054c

0800054c <get_Msg_fromHost>:
 * it is done in this function and it activates the rx_tx_SendMsg flag that allows redirectioning the messages from
 * the nRF to the Host. If the handshake its already been done, it reads the message from the host (ended with '\0')
 * via COM port and puts it in the RF transmission buffer to the MIP.
 */
void get_Msg_fromHost()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0

    // The rx_newData variable is modified in the callback function called when new data
	//  comes through the serial port (CDC_Receive_FS)

    //Se não estiver enviando mensagem do Buffer TX para o HOST:
    if ((rx_newData == 1) && (rf_tx_SendMsg == 0))
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <get_Msg_fromHost+0xc0>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d154      	bne.n	8000604 <get_Msg_fromHost+0xb8>
 800055a:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <get_Msg_fromHost+0xc4>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d150      	bne.n	8000604 <get_Msg_fromHost+0xb8>
    {
    	int i, rc;
    	rx_newData = 0;
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <get_Msg_fromHost+0xc0>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
    	//memcpy(rf_tx_buffer, buf, len); // Salva os dados do vetor buf em rf_tx_buffer
    	//rf_tx_buffer_count = len;		// Salva a qte de bytes de len em rf_tx_buffer_count

    	// Pega o último byte de rf_tx_buffer e salva em rc
        rc = rf_tx_buffer[rf_tx_buffer_count - 1];
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <get_Msg_fromHost+0xc8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	4a2a      	ldr	r2, [pc, #168]	; (8000618 <get_Msg_fromHost+0xcc>)
 8000570:	5cd3      	ldrb	r3, [r2, r3]
 8000572:	603b      	str	r3, [r7, #0]

        //O último caractere (rc) é o indicador de final de mensagem ('\0')?
        if (rc == endMsgChar)
 8000574:	2300      	movs	r3, #0
 8000576:	461a      	mov	r2, r3
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	4293      	cmp	r3, r2
 800057c:	d142      	bne.n	8000604 <get_Msg_fromHost+0xb8>
        {

            //A mensagem termina com '\0' -- terminador de mensagens enviadas pelo HOST;

            //Estamos em fase de handshake initial Host <-> STM?
            if(rfBridgeON)
 800057e:	4b27      	ldr	r3, [pc, #156]	; (800061c <get_Msg_fromHost+0xd0>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d003      	beq.n	800058e <get_Msg_fromHost+0x42>
            	//CDC_Transmit_FS(rf_tx_buffer, rf_tx_buffer_count);
				//HAL_Delay(10);
              //NÃO - Arduino é apenas um ponte entre HOST e Transceiver RF.
              //Portanto, o que chega ao uC deve ser retransmitido ao MIP via RF.
              // ==> Sinalizar execução do estado para transmissão desta msg para o MIP via RF.
              rf_tx_SendMsg = 1;
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <get_Msg_fromHost+0xc4>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
              return;
 800058c:	e03a      	b.n	8000604 <get_Msg_fromHost+0xb8>
                //      2 - Ao receber o primeiro MIPCOM_READY ("RDY") o STM retorna pela COM para o HOST "RDYOK" - O Host irá
                //          ler ou tentar ler esta mensagem (que pode estar corrompida ou nem mesmo chegar ao Host (C#).
                //
                //Neste primeiro momento, a mensagem em rf_tx_buffer pode conter apenas lixo, conter a mensagem com lixo antes de 'RDY'
                //ou conter apenas "RDY".
                if(rf_tx_buffer_count > 4) //Se conter mais que 4 elementos ['R','D','Y','\0'] remover elementos excedentes no inicio.
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <get_Msg_fromHost+0xc8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b04      	cmp	r3, #4
 8000594:	dd17      	ble.n	80005c6 <get_Msg_fromHost+0x7a>
                {
                    for(i = 0; i < 4; i++)
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	e00e      	b.n	80005ba <get_Msg_fromHost+0x6e>
                      rf_tx_buffer[i] = rf_tx_buffer[(rf_tx_buffer_count-4) + i];
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <get_Msg_fromHost+0xc8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1f1a      	subs	r2, r3, #4
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <get_Msg_fromHost+0xcc>)
 80005a8:	5cd1      	ldrb	r1, [r2, r3]
 80005aa:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <get_Msg_fromHost+0xcc>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	460a      	mov	r2, r1
 80005b2:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < 4; i++)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3301      	adds	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	dded      	ble.n	800059c <get_Msg_fromHost+0x50>
                    rf_tx_buffer_count = 4;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <get_Msg_fromHost+0xc8>)
 80005c2:	2204      	movs	r2, #4
 80005c4:	601a      	str	r2, [r3, #0]
                }
                //A mensagem é "RDY\0" ?
                if( (rf_tx_buffer[0] == 'R') && (rf_tx_buffer[1] == 'D') && (rf_tx_buffer[2] == 'Y') )
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <get_Msg_fromHost+0xcc>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b52      	cmp	r3, #82	; 0x52
 80005cc:	d114      	bne.n	80005f8 <get_Msg_fromHost+0xac>
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <get_Msg_fromHost+0xcc>)
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	2b44      	cmp	r3, #68	; 0x44
 80005d4:	d110      	bne.n	80005f8 <get_Msg_fromHost+0xac>
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <get_Msg_fromHost+0xcc>)
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	2b59      	cmp	r3, #89	; 0x59
 80005dc:	d10c      	bne.n	80005f8 <get_Msg_fromHost+0xac>
                {
                  //Ecoar para o Host

                	CDC_Transmit_FS(rf_tx_buffer, rf_tx_buffer_count);
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <get_Msg_fromHost+0xc8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	480c      	ldr	r0, [pc, #48]	; (8000618 <get_Msg_fromHost+0xcc>)
 80005e8:	f005 fe34 	bl	8006254 <CDC_Transmit_FS>
                	HAL_Delay(5);
 80005ec:	2005      	movs	r0, #5
 80005ee:	f000 fd33 	bl	8001058 <HAL_Delay>

                  rfBridgeON = 1; //De agora em diante, todos os bytes recebidos do Host serão enviados ao MIP por RF.
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <get_Msg_fromHost+0xd0>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
                  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
                }
                //Caso a mensagem tenha sido enviada para o Host (acima) ou não (deve ser ignorada):
                rf_tx_buffer_count = 0; //reiniciar leitura de novas mensagens;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <get_Msg_fromHost+0xc8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
                rf_tx_SendMsg = 0; //a mensagem recebida não deve ser enviada por RF
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <get_Msg_fromHost+0xc4>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200002ce 	.word	0x200002ce
 8000610:	200002cc 	.word	0x200002cc
 8000614:	200002c8 	.word	0x200002c8
 8000618:	200001c8 	.word	0x200001c8
 800061c:	200002cd 	.word	0x200002cd

08000620 <tx_task>:

/**
 * Verifies if there is a message to be transmitted to the MIP via RF and sends it in packages of 32 bytes or less
 */
void tx_task()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
  uint32_t data_size, index_atual;

  //Transmissão/Recepção de dados via RF liberada? E
  //Existe mensagem para ser enviada para o MIP via RF?
  if ((rfBridgeON == 0) || (rf_tx_SendMsg == 0))
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <tx_task+0x8c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d03a      	beq.n	80006a4 <tx_task+0x84>
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <tx_task+0x90>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d036      	beq.n	80006a4 <tx_task+0x84>
    return;
  data_size = rf_tx_buffer_count;
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <tx_task+0x94>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	60bb      	str	r3, [r7, #8]
  rf_tx_buffer_count = 0;
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <tx_task+0x94>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]

  index_atual = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  while (index_atual < data_size) // Verifica se todos os dados contidos já foram enviados
 8000646:	e025      	b.n	8000694 <tx_task+0x74>
  {
	uint32_t actual_length = data_size - index_atual;
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	607b      	str	r3, [r7, #4]

    //Enquanto tiver algum para escrever
	// Caso a mensagem possua menos, de 32 bytes ele envia apenas os bytes necessários
    if (actual_length < 32)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b1f      	cmp	r3, #31
 8000654:	d812      	bhi.n	800067c <tx_task+0x5c>
    {
      //Se existem menos de 32 bytes para serem enviados
      rfSendBuffer(&rf_tx_buffer[index_atual], (uint8_t)actual_length);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <tx_task+0x98>)
 800065a:	4413      	add	r3, r2
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f82a 	bl	80006bc <rfSendBuffer>
      HAL_Delay(1); //Aguardar transmissão -- max 32 bytes
 8000668:	2001      	movs	r0, #1
 800066a:	f000 fcf5 	bl	8001058 <HAL_Delay>
      waitForIRQ();
 800066e:	f000 f84f 	bl	8000710 <waitForIRQ>
      index_atual += actual_length;
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	e00b      	b.n	8000694 <tx_task+0x74>
    }
    else
    {
      //Se existem pelo menos 32 bytes para serem escritos, escreve um pacote
      rfSendBuffer(&rf_tx_buffer[index_atual], 32);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <tx_task+0x98>)
 8000680:	4413      	add	r3, r2
 8000682:	2120      	movs	r1, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 f819 	bl	80006bc <rfSendBuffer>
      waitForIRQ();
 800068a:	f000 f841 	bl	8000710 <waitForIRQ>
      index_atual += 32;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3320      	adds	r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
  while (index_atual < data_size) // Verifica se todos os dados contidos já foram enviados
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	429a      	cmp	r2, r3
 800069a:	d3d5      	bcc.n	8000648 <tx_task+0x28>
    }
  }
  //Sinalizar mensagem transmitida
  rf_tx_SendMsg = 0;
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <tx_task+0x90>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	e000      	b.n	80006a6 <tx_task+0x86>
    return;
 80006a4:	bf00      	nop
}
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200002cd 	.word	0x200002cd
 80006b0:	200002cc 	.word	0x200002cc
 80006b4:	200002c8 	.word	0x200002c8
 80006b8:	200001c8 	.word	0x200001c8

080006bc <rfSendBuffer>:
 *
 * @param buffer2send	Buffer to be sent to the MIP via RF
 * @param buffer_size	Size of buffer to be sent to the MIP via RF
 */
void rfSendBuffer(uint8_t *buffer2send, uint8_t buffer_size)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
  uint8_t send_index = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
  
  // Escreve no buffer de saída (tx_buf) os bytes a serem enviados
  for (int i = 0; i < buffer_size; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	e00e      	b.n	80006f0 <rfSendBuffer+0x34>
  {
    tx_buf[i] = buffer2send[i];
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	7819      	ldrb	r1, [r3, #0]
 80006da:	4a0c      	ldr	r2, [pc, #48]	; (800070c <rfSendBuffer+0x50>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4413      	add	r3, r2
 80006e0:	460a      	mov	r2, r1
 80006e2:	701a      	strb	r2, [r3, #0]
    send_index += 1;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	3301      	adds	r3, #1
 80006e8:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < buffer_size; i++)
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	dbec      	blt.n	80006d2 <rfSendBuffer+0x16>
  }
  //Enviar via RF
  TX_Mode(tx_buf, send_index);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <rfSendBuffer+0x50>)
 80006fe:	f000 faf5 	bl	8000cec <TX_Mode>
  //HAL_Delay(5);
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200001a4 	.word	0x200001a4

08000710 <waitForIRQ>:
/**
 *
 *
 */
void waitForIRQ()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(RF_IRQ_GPIO_Port, RF_IRQ_Pin) != 0);
 8000714:	bf00      	nop
 8000716:	2108      	movs	r1, #8
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <waitForIRQ+0x1c>)
 800071a:	f000 ff27 	bl	800156c <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1f8      	bne.n	8000716 <waitForIRQ+0x6>
	IRQ_read();
 8000724:	f7ff fecc 	bl	80004c0 <IRQ_read>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40010800 	.word	0x40010800

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <DWT_Delay_us+0x3c>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800074a:	f002 fa03 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 800074e:	4602      	mov	r2, r0
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <DWT_Delay_us+0x40>)
 8000752:	fba3 2302 	umull	r2, r3, r3, r2
 8000756:	0c9b      	lsrs	r3, r3, #18
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	fb02 f303 	mul.w	r3, r2, r3
 800075e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000760:	bf00      	nop
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <DWT_Delay_us+0x3c>)
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	1ad2      	subs	r2, r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	429a      	cmp	r2, r3
 800076e:	d3f8      	bcc.n	8000762 <DWT_Delay_us+0x26>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	e0001000 	.word	0xe0001000
 800077c:	431bde83 	.word	0x431bde83

08000780 <nRF24L01_STM32>:
/**
 * Construtor using the default pins
 * @param spi its an SPI_HandleTypeDef object that contains the SPI informations
 **/
void nRF24L01_STM32(SPI_HandleTypeDef spi)
{
 8000780:	b084      	sub	sp, #16
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
 8000786:	f107 0c08 	add.w	ip, r7, #8
 800078a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    _spi = spi;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <nRF24L01_STM32+0x2c>)
 8000790:	4618      	mov	r0, r3
 8000792:	f107 0108 	add.w	r1, r7, #8
 8000796:	2358      	movs	r3, #88	; 0x58
 8000798:	461a      	mov	r2, r3
 800079a:	f006 f951 	bl	8006a40 <memcpy>
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007a6:	b004      	add	sp, #16
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	200004f4 	.word	0x200004f4

080007b0 <init>:
 * @param rf_data_rate	The radio's data rate in Mbps
 * @param rf_pwr		The radio's power in dB
 */

void init(uint8_t rf_channel, rf_data_rate_t rf_data_rate, rf_tx_power_t rf_pwr, uint8_t _autoAck_enable)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	4608      	mov	r0, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	4623      	mov	r3, r4
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	4603      	mov	r3, r0
 80007c4:	71bb      	strb	r3, [r7, #6]
 80007c6:	460b      	mov	r3, r1
 80007c8:	717b      	strb	r3, [r7, #5]
 80007ca:	4613      	mov	r3, r2
 80007cc:	713b      	strb	r3, [r7, #4]
	// Setup values of the registers
	uint8_t rf_setup_byte;
	uint8_t setup_aw_value = 0x03;	//Setup of Address Widths ('11' - 5 bytes)
 80007ce:	2303      	movs	r3, #3
 80007d0:	75bb      	strb	r3, [r7, #22]
	uint8_t en_aa_value;			//Auto Acknowledgment Function on pipe 0
	uint8_t en_rxaddr_value = 0x01;	//Enabled RX Addresses (only pipe 0)
 80007d2:	2301      	movs	r3, #1
 80007d4:	753b      	strb	r3, [r7, #20]
	uint8_t setup_retr_value;		//Setup of Automatic Retransmission
	uint8_t dypnd_value = 0x3f;		//Enable dynamic payload length
 80007d6:	233f      	movs	r3, #63	; 0x3f
 80007d8:	74bb      	strb	r3, [r7, #18]
	uint8_t feature_value;			//Feature Register
	uint8_t zero = 0x00;			// 0
 80007da:	2300      	movs	r3, #0
 80007dc:	743b      	strb	r3, [r7, #16]
	uint8_t nrf_status_value = 0x70;// Status
 80007de:	2370      	movs	r3, #112	; 0x70
 80007e0:	73fb      	strb	r3, [r7, #15]

	autoAck_enable = _autoAck_enable;
 80007e2:	4a65      	ldr	r2, [pc, #404]	; (8000978 <init+0x1c8>)
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	7013      	strb	r3, [r2, #0]

    //uint8_t addr_host[TX_RX_ADDR_WIDTH] = {0xE7,0xE7,0xE7,0xE7,0xE7};

    //Aguardar sequencia de power-up _ start do CI (~12ms) 
    HAL_Delay(20);
 80007e8:	2014      	movs	r0, #20
 80007ea:	f000 fc35 	bl	8001058 <HAL_Delay>

    //rx_newPayload = 0;      // Init with no new payload
    //rx_payloadWidth = 0;    // It has no length
    status = 0;             // Stores the STATUS register status
 80007ee:	4b63      	ldr	r3, [pc, #396]	; (800097c <init+0x1cc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
    TX_OK = 0;              // initiates in stand-by
 80007f4:	4b62      	ldr	r3, [pc, #392]	; (8000980 <init+0x1d0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
    RX_OK = 0;              // "
 80007fa:	4b62      	ldr	r3, [pc, #392]	; (8000984 <init+0x1d4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]

    // Set CSN high, no SPI transaction yet
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2110      	movs	r1, #16
 8000804:	4860      	ldr	r0, [pc, #384]	; (8000988 <init+0x1d8>)
 8000806:	f000 fec8 	bl	800159a <HAL_GPIO_WritePin>
 
    // Disable RX TX
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2108      	movs	r1, #8
 800080e:	485e      	ldr	r0, [pc, #376]	; (8000988 <init+0x1d8>)
 8000810:	f000 fec3 	bl	800159a <HAL_GPIO_WritePin>
    //Configuração:

    //W_REGISTER=001A AAAA: Read command and status registers. AAAAA = 5 bit Register Map Address

    // SETUP_AW register: Setup of Address Widths - (common for all data pipes)  
    SPI_Write_Reg(SETUP_AW, &setup_aw_value); //RX/TX Address field width 5 bytes
 8000814:	f107 0316 	add.w	r3, r7, #22
 8000818:	4619      	mov	r1, r3
 800081a:	2003      	movs	r0, #3
 800081c:	f000 f8b8 	bl	8000990 <SPI_Write_Reg>
    // Configuration register é definido quando entra no modo RX ou TX (ver funções para cada modo)

    // EN_RXADDR register: Enable Pipe0 (only pipe0)
    SPI_Write_Reg(EN_RXADDR, &en_rxaddr_value);    // Enable Pipe 0 e 1
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	2002      	movs	r0, #2
 8000828:	f000 f8b2 	bl	8000990 <SPI_Write_Reg>

    if(autoAck_enable > 0)
 800082c:	4b52      	ldr	r3, [pc, #328]	; (8000978 <init+0x1c8>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d018      	beq.n	8000866 <init+0xb6>
    {
    	en_aa_value = 0x3f;			// Enabled Auto Acknowledgment on pipe 0 e 1
 8000834:	233f      	movs	r3, #63	; 0x3f
 8000836:	757b      	strb	r3, [r7, #21]
		setup_retr_value = 0x1A;	// Enabled retransmission (5 max with 500 us interval)
 8000838:	231a      	movs	r3, #26
 800083a:	74fb      	strb	r3, [r7, #19]
		feature_value = 0x04;
 800083c:	2304      	movs	r3, #4
 800083e:	747b      	strb	r3, [r7, #17]

    	// EN_AA register: Enable Auto Acknowledgment: Pipe 0
    	SPI_Write_Reg(EN_AA, &en_aa_value);
 8000840:	f107 0315 	add.w	r3, r7, #21
 8000844:	4619      	mov	r1, r3
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f8a2 	bl	8000990 <SPI_Write_Reg>

    	// SETUP_RETR register: Time to automatic retransmission selected: 500us, retransmission enabled
		SPI_Write_Reg(SETUP_RETR, &setup_retr_value);
 800084c:	f107 0313 	add.w	r3, r7, #19
 8000850:	4619      	mov	r1, r3
 8000852:	2004      	movs	r0, #4
 8000854:	f000 f89c 	bl	8000990 <SPI_Write_Reg>

		// Ativa Payload dinamico, ACK sem payload e desativa o comando W_TX_PAYLOAD_NOACK
		SPI_Write_Reg(FEATURE, &feature_value);
 8000858:	f107 0311 	add.w	r3, r7, #17
 800085c:	4619      	mov	r1, r3
 800085e:	201d      	movs	r0, #29
 8000860:	f000 f896 	bl	8000990 <SPI_Write_Reg>
 8000864:	e017      	b.n	8000896 <init+0xe6>
    }
    else
    {
    	en_aa_value = 0x00;			// Disabled Auto Acknowledgment
 8000866:	2300      	movs	r3, #0
 8000868:	757b      	strb	r3, [r7, #21]
		setup_retr_value = 0x00;	// Disabled retransmission
 800086a:	2300      	movs	r3, #0
 800086c:	74fb      	strb	r3, [r7, #19]
		feature_value = 0x05;
 800086e:	2305      	movs	r3, #5
 8000870:	747b      	strb	r3, [r7, #17]

    	// EN_AA register: Disable Auto Acknowledgment
		SPI_Write_Reg(EN_AA, &en_aa_value);        // Disable Auto Acknowledgment: All pipes
 8000872:	f107 0315 	add.w	r3, r7, #21
 8000876:	4619      	mov	r1, r3
 8000878:	2001      	movs	r0, #1
 800087a:	f000 f889 	bl	8000990 <SPI_Write_Reg>

		// SETUP_RETR register: Time to automatic retransmission selected: 250us, retransmission disabled
		SPI_Write_Reg(SETUP_RETR, &setup_retr_value);
 800087e:	f107 0313 	add.w	r3, r7, #19
 8000882:	4619      	mov	r1, r3
 8000884:	2004      	movs	r0, #4
 8000886:	f000 f883 	bl	8000990 <SPI_Write_Reg>

		// Ativa Payload dinamico, ACK sem payload e ativa o comando W_TX_PAYLOAD_NOACK
		SPI_Write_Reg(FEATURE, &feature_value);
 800088a:	f107 0311 	add.w	r3, r7, #17
 800088e:	4619      	mov	r1, r3
 8000890:	201d      	movs	r0, #29
 8000892:	f000 f87d 	bl	8000990 <SPI_Write_Reg>
    }


    // RF_CH register: Select RF channel
    SPI_Write_Reg(RF_CH, &rf_channel);          // Select RF channel: Fo = 2,490 GHz + rf_channel
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	4619      	mov	r1, r3
 800089a:	2005      	movs	r0, #5
 800089c:	f000 f878 	bl	8000990 <SPI_Write_Reg>

    //RF SETUP
    //Ajustar potência de saída em modo TX (bits 2:1)
    //  bit 0 = 1 (setup LNA gain)
    rf_setup_byte = 0x01; //0000 0001
 80008a0:	2301      	movs	r3, #1
 80008a2:	75fb      	strb	r3, [r7, #23]
    switch (rf_pwr) 
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d827      	bhi.n	80008fa <init+0x14a>
 80008aa:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <init+0x100>)
 80008ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b0:	080008c1 	.word	0x080008c1
 80008b4:	080008cd 	.word	0x080008cd
 80008b8:	080008d9 	.word	0x080008d9
 80008bc:	080008ef 	.word	0x080008ef
    {     
        case RF_TX_POWER_NEGATIVE_18dBm: //bits 2:1 = 00
            rf_setup_byte &= 0xF9; //1111 1001
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	f023 0306 	bic.w	r3, r3, #6
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	75fb      	strb	r3, [r7, #23]
        break;
 80008ca:	e017      	b.n	80008fc <init+0x14c>

        case RF_TX_POWER_NEGATIVE_12dBm: //bits 2:1 = 01
            rf_setup_byte |= 0x02;//0000 0010
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	75fb      	strb	r3, [r7, #23]
            //rf_setup_byte &= 0xFB;//1111 1011
        break;
 80008d6:	e011      	b.n	80008fc <init+0x14c>

        case RF_TX_POWER_NEGATIVE_6dBm: //bits 2:1 = 10
            rf_setup_byte &= 0xFD;//1111 1101
 80008d8:	7dfb      	ldrb	r3, [r7, #23]
 80008da:	f023 0302 	bic.w	r3, r3, #2
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	75fb      	strb	r3, [r7, #23]
            rf_setup_byte |= 0x04;//0000 0100
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	75fb      	strb	r3, [r7, #23]
        break;
 80008ec:	e006      	b.n	80008fc <init+0x14c>

        case RF_TX_POWER_0dBm: //bits 2:1 = 11
            rf_setup_byte |= 0x06;//0000 0110
 80008ee:	7dfb      	ldrb	r3, [r7, #23]
 80008f0:	f043 0306 	orr.w	r3, r3, #6
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	75fb      	strb	r3, [r7, #23]
        break;
 80008f8:	e000      	b.n	80008fc <init+0x14c>

        default: 
        break;      
 80008fa:	bf00      	nop
        }
        //Ajustar Air Data Rate (bit 3)
        switch (rf_data_rate) 
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <init+0x158>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d003      	beq.n	800090e <init+0x15e>
 8000906:	e008      	b.n	800091a <init+0x16a>
        {
        case RF_DATA_RATE_1Mbps: //bit 3 = 0
            rf_setup_byte |= 0x00;//0000 0000
 8000908:	7dfb      	ldrb	r3, [r7, #23]
 800090a:	75fb      	strb	r3, [r7, #23]
        break;
 800090c:	e005      	b.n	800091a <init+0x16a>
        case RF_DATA_RATE_2Mbps: //bit 3 = 1
            rf_setup_byte |= 0x08;//0000 1000
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	b2db      	uxtb	r3, r3
 8000916:	75fb      	strb	r3, [r7, #23]
        break;
 8000918:	bf00      	nop
        }

    SPI_Write_Reg(RF_SETUP, &rf_setup_byte);     // TX_PWR:0dBm, Datarate:1Mbps, LNA:HCURR
 800091a:	f107 0317 	add.w	r3, r7, #23
 800091e:	4619      	mov	r1, r3
 8000920:	2006      	movs	r0, #6
 8000922:	f000 f835 	bl	8000990 <SPI_Write_Reg>

    /**
     * SET THE TX_ADDR EQUAL AS THE RX_ADDR_P0 IN ORDER TO USE THE AUTO ACK
     **/
    //Transmiter Address.
    SPI_Write_Buf_Reg(TX_ADDR, ADDR_HOST_P0_AND_TX, TX_RX_ADDR_WIDTH);
 8000926:	2205      	movs	r2, #5
 8000928:	4918      	ldr	r1, [pc, #96]	; (800098c <init+0x1dc>)
 800092a:	2010      	movs	r0, #16
 800092c:	f000 f85c 	bl	80009e8 <SPI_Write_Buf_Reg>
    //Receiver Address - Pipe 0
    SPI_Write_Buf_Reg(RX_ADDR_P0, ADDR_HOST_P0_AND_TX, TX_RX_ADDR_WIDTH);
 8000930:	2205      	movs	r2, #5
 8000932:	4916      	ldr	r1, [pc, #88]	; (800098c <init+0x1dc>)
 8000934:	200a      	movs	r0, #10
 8000936:	f000 f857 	bl	80009e8 <SPI_Write_Buf_Reg>

    //Receiver Address - Pipe 1 => * just for test purposes *
    //SPI_Write_Buf_Reg(RX_ADDR_P1, ADDR_HOST_P1, TX_RX_ADDR_WIDTH);

    // Ativa Payload dinamico em data pipe 0 e 1
    SPI_Write_Reg(DYNPD, &dypnd_value);        // Ativa Payload dinâmico em data pipe 0
 800093a:	f107 0312 	add.w	r3, r7, #18
 800093e:	4619      	mov	r1, r3
 8000940:	201c      	movs	r0, #28
 8000942:	f000 f825 	bl	8000990 <SPI_Write_Reg>
    //After the packet is validated, Enhanched ShockBurst™ disassembles the packet and loads the payload into
    //the RX FIFO, and assert the RX_DR IRQ (active low)
    //A interrupção é associada ao handler RF_IRQ (nesta classe), no código principal (rf_shield_Host.cpp).

    // Clears the TX and RX FIFO
    SPI_Write(FLUSH_TX, &zero);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	20e1      	movs	r0, #225	; 0xe1
 800094e:	f000 f89f 	bl	8000a90 <SPI_Write>
    SPI_Write(FLUSH_RX, &zero);
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4619      	mov	r1, r3
 8000958:	20e2      	movs	r0, #226	; 0xe2
 800095a:	f000 f899 	bl	8000a90 <SPI_Write>

    // Writes in the STATUS register
    SPI_Write_Reg(NRF_STATUS, &nrf_status_value);
 800095e:	f107 030f 	add.w	r3, r7, #15
 8000962:	4619      	mov	r1, r3
 8000964:	2007      	movs	r0, #7
 8000966:	f000 f813 	bl	8000990 <SPI_Write_Reg>

    //Default: Stay in RX Mode waiting for data from MIP
    RX_Mode();
 800096a:	f000 f92f 	bl	8000bcc <RX_Mode>

}
 800096e:	bf00      	nop
 8000970:	371c      	adds	r7, #28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	bf00      	nop
 8000978:	200002d2 	.word	0x200002d2
 800097c:	200002cf 	.word	0x200002cf
 8000980:	200002d0 	.word	0x200002d0
 8000984:	200002d1 	.word	0x200002d1
 8000988:	40010800 	.word	0x40010800
 800098c:	20000004 	.word	0x20000004

08000990 <SPI_Write_Reg>:
 * Writes a value in a register
 * @param reg   Register adress
 * @param value Value to be written
 **/
void SPI_Write_Reg(uint8_t reg, uint8_t * value)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
    uint16_t size = sizeof(*value);
 800099c:	2301      	movs	r3, #1
 800099e:	81fb      	strh	r3, [r7, #14]
    reg = (uint8_t) W_REGISTER + reg;
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	3320      	adds	r3, #32
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 80009a8:	2200      	movs	r2, #0
 80009aa:	2110      	movs	r1, #16
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <SPI_Write_Reg+0x50>)
 80009ae:	f000 fdf4 	bl	800159a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY);                    // select register
 80009b2:	1df9      	adds	r1, r7, #7
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	2201      	movs	r2, #1
 80009ba:	480a      	ldr	r0, [pc, #40]	; (80009e4 <SPI_Write_Reg+0x54>)
 80009bc:	f002 fa09 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 80009c0:	89fa      	ldrh	r2, [r7, #14]
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	6839      	ldr	r1, [r7, #0]
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <SPI_Write_Reg+0x54>)
 80009ca:	f002 fa02 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 80009ce:	2201      	movs	r2, #1
 80009d0:	2110      	movs	r1, #16
 80009d2:	4803      	ldr	r0, [pc, #12]	; (80009e0 <SPI_Write_Reg+0x50>)
 80009d4:	f000 fde1 	bl	800159a <HAL_GPIO_WritePin>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40010800 	.word	0x40010800
 80009e4:	200004f4 	.word	0x200004f4

080009e8 <SPI_Write_Buf_Reg>:
 * @param reg   Register adress
 * @param value Value to be written
 * @param size  Buffer size
 **/
void SPI_Write_Buf_Reg(uint8_t reg, uint8_t *value, uint16_t size)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	80bb      	strh	r3, [r7, #4]
    reg = (uint8_t) W_REGISTER + reg;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	3320      	adds	r3, #32
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <SPI_Write_Buf_Reg+0x50>)
 8000a06:	f000 fdc8 	bl	800159a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &reg, sizeof(reg), HAL_MAX_DELAY);                    // select register
 8000a0a:	1df9      	adds	r1, r7, #7
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a10:	2201      	movs	r2, #1
 8000a12:	480a      	ldr	r0, [pc, #40]	; (8000a3c <SPI_Write_Buf_Reg+0x54>)
 8000a14:	f002 f9dd 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 8000a18:	88ba      	ldrh	r2, [r7, #4]
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	4806      	ldr	r0, [pc, #24]	; (8000a3c <SPI_Write_Buf_Reg+0x54>)
 8000a22:	f002 f9d6 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000a26:	2201      	movs	r2, #1
 8000a28:	2110      	movs	r1, #16
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <SPI_Write_Buf_Reg+0x50>)
 8000a2c:	f000 fdb5 	bl	800159a <HAL_GPIO_WritePin>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	200004f4 	.word	0x200004f4

08000a40 <SPI_Write_Buf>:
 * @param reg   Register adress
 * @param value Value to be written
 * @param size  Buffer size
 **/
void SPI_Write_Buf(uint8_t command, uint8_t *value, uint16_t size)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	80bb      	strh	r3, [r7, #4]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000a50:	2200      	movs	r2, #0
 8000a52:	2110      	movs	r1, #16
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <SPI_Write_Buf+0x48>)
 8000a56:	f000 fda0 	bl	800159a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY);                    // select register
 8000a5a:	1df9      	adds	r1, r7, #7
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	2201      	movs	r2, #1
 8000a62:	480a      	ldr	r0, [pc, #40]	; (8000a8c <SPI_Write_Buf+0x4c>)
 8000a64:	f002 f9b5 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 8000a68:	88ba      	ldrh	r2, [r7, #4]
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	6839      	ldr	r1, [r7, #0]
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <SPI_Write_Buf+0x4c>)
 8000a72:	f002 f9ae 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000a76:	2201      	movs	r2, #1
 8000a78:	2110      	movs	r1, #16
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <SPI_Write_Buf+0x48>)
 8000a7c:	f000 fd8d 	bl	800159a <HAL_GPIO_WritePin>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	200004f4 	.word	0x200004f4

08000a90 <SPI_Write>:
 * Send a command that need a value to be written
 * @param command   SPI command
 * @param value     Value to be written
 **/
void SPI_Write(uint8_t command, uint8_t * value)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
    uint16_t size = sizeof(*value);
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <SPI_Write+0x48>)
 8000aa6:	f000 fd78 	bl	800159a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY);                    // select register
 8000aaa:	1df9      	adds	r1, r7, #7
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	480a      	ldr	r0, [pc, #40]	; (8000adc <SPI_Write+0x4c>)
 8000ab4:	f002 f98d 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&_spi, value, size, HAL_MAX_DELAY);                   // ..and write value to it..
 8000ab8:	89fa      	ldrh	r2, [r7, #14]
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	6839      	ldr	r1, [r7, #0]
 8000ac0:	4806      	ldr	r0, [pc, #24]	; (8000adc <SPI_Write+0x4c>)
 8000ac2:	f002 f986 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2110      	movs	r1, #16
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <SPI_Write+0x48>)
 8000acc:	f000 fd65 	bl	800159a <HAL_GPIO_WritePin>
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40010800 	.word	0x40010800
 8000adc:	200004f4 	.word	0x200004f4

08000ae0 <SPI_Read>:
 * Reads a value returned by a command
 * @param command   SPI command
 * @return The byte returned by the command
 **/
uint8_t SPI_Read(uint8_t command)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
    uint8_t reading = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000aee:	2200      	movs	r2, #0
 8000af0:	2110      	movs	r1, #16
 8000af2:	480e      	ldr	r0, [pc, #56]	; (8000b2c <SPI_Read+0x4c>)
 8000af4:	f000 fd51 	bl	800159a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, sizeof(command), HAL_MAX_DELAY); 	  // Transmits the command
 8000af8:	1df9      	adds	r1, r7, #7
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	2201      	movs	r2, #1
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <SPI_Read+0x50>)
 8000b02:	f002 f966 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, &reading, sizeof(command), HAL_MAX_DELAY);	  // Saves the response in 'reading'
 8000b06:	f107 010f 	add.w	r1, r7, #15
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4807      	ldr	r0, [pc, #28]	; (8000b30 <SPI_Read+0x50>)
 8000b12:	f002 fa92 	bl	800303a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000b16:	2201      	movs	r2, #1
 8000b18:	2110      	movs	r1, #16
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <SPI_Read+0x4c>)
 8000b1c:	f000 fd3d 	bl	800159a <HAL_GPIO_WritePin>

    return reading;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	200004f4 	.word	0x200004f4

08000b34 <SPI_Read_Status>:
 * Reads the STATUS register
 * @return the STATUS register content
 */

uint8_t SPI_Read_Status()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af02      	add	r7, sp, #8
    uint8_t reg_read = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	71fb      	strb	r3, [r7, #7]
    uint8_t nop = NOP;
 8000b3e:	23ff      	movs	r3, #255	; 0xff
 8000b40:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);    // CSN low, initiate SPI transaction
 8000b42:	2200      	movs	r2, #0
 8000b44:	2110      	movs	r1, #16
 8000b46:	480b      	ldr	r0, [pc, #44]	; (8000b74 <SPI_Read_Status+0x40>)
 8000b48:	f000 fd27 	bl	800159a <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive (&_spi, &nop, &reg_read, 1, HAL_MAX_DELAY);
 8000b4c:	1dfa      	adds	r2, r7, #7
 8000b4e:	1db9      	adds	r1, r7, #6
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2301      	movs	r3, #1
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <SPI_Read_Status+0x44>)
 8000b5a:	f002 fb77 	bl	800324c <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);      // CSN high again, ends SPI transaction
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2110      	movs	r1, #16
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <SPI_Read_Status+0x40>)
 8000b64:	f000 fd19 	bl	800159a <HAL_GPIO_WritePin>

    return reg_read;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010800 	.word	0x40010800
 8000b78:	200004f4 	.word	0x200004f4

08000b7c <SPI_Read_Buf>:
 * Sends a command and reads a buffer of bytes
 * @param command   SPI command
 * @param dataBuf   Buffer to store the data
 **/
void SPI_Read_Buf(uint8_t command, uint8_t *dataBuf, uint16_t size)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	80bb      	strh	r3, [r7, #4]
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_RESET);  // CSN low, initiate SPI transaction
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2110      	movs	r1, #16
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <SPI_Read_Buf+0x48>)
 8000b92:	f000 fd02 	bl	800159a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&_spi, &command, 1, HAL_MAX_DELAY);           		// select register
 8000b96:	1df9      	adds	r1, r7, #7
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <SPI_Read_Buf+0x4c>)
 8000ba0:	f002 f917 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_SPI_Receive (&_spi, dataBuf, size, HAL_MAX_DELAY);              // read register
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <SPI_Read_Buf+0x4c>)
 8000bae:	f002 fa44 	bl	800303a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_RF_CSN_GPIO_Port, _RF_CSN_Pin, GPIO_PIN_SET);    // CSN high again, ends SPI transaction
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <SPI_Read_Buf+0x48>)
 8000bb8:	f000 fcef 	bl	800159a <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	200004f4 	.word	0x200004f4

08000bcc <RX_Mode>:

/**
 * Changes the nRF state to RX, which it awaits a payload to be received
 **/
void RX_Mode(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
    //rx_newPayload = 0;
    //status = 0;
	HAL_Delay(5);
 8000bd2:	2005      	movs	r0, #5
 8000bd4:	f000 fa40 	bl	8001058 <HAL_Delay>
    RX_OK = 0;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <RX_Mode+0x3c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]

    uint8_t config_value = 0x1F;
 8000bde:	231f      	movs	r3, #31
 8000be0:	71fb      	strb	r3, [r7, #7]
    //The RX mode is an active mode where the nRF24L01 radio is a receiver. To enter this mode, the
    //nRF24L01 must have the PWR_UP bit set high, PRIM_RX bit set high and the CE pin set high.

    //Make sure you sett CE = 0 first, so the chip is in Standby mode before you change radio mode. 
    //CE (active high and is used to activate the chip in RX or TX mode) - 0: Desativa o transceiver para programação
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET); 
 8000be2:	2200      	movs	r2, #0
 8000be4:	2108      	movs	r1, #8
 8000be6:	4809      	ldr	r0, [pc, #36]	; (8000c0c <RX_Mode+0x40>)
 8000be8:	f000 fcd7 	bl	800159a <HAL_GPIO_WritePin>
    // b4. MASK_MAX_RT  = 1: Disabled - Reflect MAX_RT as active low on RFIRQ
    // b3. EN_CRC       = 1: Enable CRC - Forced high if one of the bits in the EN_AA is high
    // b2. CRCO         = 1: CRC encoding 2 bytes
    // b1. PWR_UP       = 1: POWER UP
    // b0. PRIM_RX      = 1: RX/TX control with RX (sets the nRF24L01 in transmit/receive)
    SPI_Write_Reg(CONFIG, &config_value);
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fecd 	bl	8000990 <SPI_Write_Reg>

    //CE (active high and is used to activate the chip in RX or TX mode) - a: Ativa o transceiver para RX
    HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_SET); 
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <RX_Mode+0x40>)
 8000bfc:	f000 fccd 	bl	800159a <HAL_GPIO_WritePin>
  
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200002d1 	.word	0x200002d1
 8000c0c:	40010800 	.word	0x40010800

08000c10 <RF_IRQ>:
/**
 * Function called when an IRQ occurs. After verifying the nRF state it saves the paylod (RX mode) or 
 *  flushes the TX FIFO after a successful transmission
 **/
void RF_IRQ(uint8_t *buf, uint8_t *size, uint8_t *newPayload)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
    
	DWT_Delay_us(400); // Delay to give NRf time to transmit the ACK packet
 8000c1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c20:	f7ff fd8c 	bl	800073c <DWT_Delay_us>
    //HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
    // Read STATUS register
    status = SPI_Read_Status();
 8000c24:	f7ff ff86 	bl	8000b34 <SPI_Read_Status>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <RF_IRQ+0xcc>)
 8000c2e:	701a      	strb	r2, [r3, #0]

    //HAL_GPIO_TogglePin(_RF_LED_GPIO_Port, _RF_LED_Pin);

    if(status & RX_DR)
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <RF_IRQ+0xcc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d01f      	beq.n	8000c7c <RF_IRQ+0x6c>
    { 
        // if received data ready (RX_DR) interrupt
        RX_OK = 1;
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <RF_IRQ+0xd0>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
        *size = SPI_Read(R_RX_PLD_WIDTH);  // Retorna o número de bytes no payload recebido
 8000c42:	2060      	movs	r0, #96	; 0x60
 8000c44:	f7ff ff4c 	bl	8000ae0 <SPI_Read>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	701a      	strb	r2, [r3, #0]
        SPI_Read_Buf(R_RX_PAYLOAD, buf, *size);  // read receive payload from RX_FIFO buffer
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	68f9      	ldr	r1, [r7, #12]
 8000c5a:	2061      	movs	r0, #97	; 0x61
 8000c5c:	f7ff ff8e 	bl	8000b7c <SPI_Read_Buf>

        if(*size > 32)  //Não pode conter mais que 32 bytes
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b20      	cmp	r3, #32
 8000c66:	d902      	bls.n	8000c6e <RF_IRQ+0x5e>
        {
            *size = 0;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
        }
        SPI_Write(FLUSH_RX, 0x00); //Limpar o buffer RX (os dados recebidos estão em rx_buf).
 8000c6e:	2100      	movs	r1, #0
 8000c70:	20e2      	movs	r0, #226	; 0xe2
 8000c72:	f7ff ff0d 	bl	8000a90 <SPI_Write>

        *newPayload = 1;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
    }

    

    //se o pacote foi reconhecido pelo receptor (funciona com TX-ACK)
    if(status & TX_DS)
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <RF_IRQ+0xcc>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	f003 0320 	and.w	r3, r3, #32
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00b      	beq.n	8000ca0 <RF_IRQ+0x90>
    {
        //Completou TX ?
        TX_OK = 1;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <RF_IRQ+0xd4>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
        //RX_Mode();
        SPI_Write(FLUSH_TX,0); //limpar o buffer TX
 8000c8e:	2100      	movs	r1, #0
 8000c90:	20e1      	movs	r0, #225	; 0xe1
 8000c92:	f7ff fefd 	bl	8000a90 <SPI_Write>
        HAL_GPIO_TogglePin(LED_Port, LED_VERDE);
 8000c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <RF_IRQ+0xd8>)
 8000c9c:	f000 fc95 	bl	80015ca <HAL_GPIO_TogglePin>

    }
    
    // If the maximum number of retransmissions was reached
    if(status & MAX_RT)
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <RF_IRQ+0xcc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d008      	beq.n	8000cbe <RF_IRQ+0xae>
    {
    	//
    	SPI_Write(FLUSH_TX,0); //limpar o buffer TX
 8000cac:	2100      	movs	r1, #0
 8000cae:	20e1      	movs	r0, #225	; 0xe1
 8000cb0:	f7ff feee 	bl	8000a90 <SPI_Write>
    	HAL_GPIO_TogglePin(LED_Port, LED_VERMELHO);
 8000cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <RF_IRQ+0xd8>)
 8000cba:	f000 fc86 	bl	80015ca <HAL_GPIO_TogglePin>

    }

    RX_Mode();
 8000cbe:	f7ff ff85 	bl	8000bcc <RX_Mode>

    //Reset status
    uint8_t sta_val = 0x70;
 8000cc2:	2370      	movs	r3, #112	; 0x70
 8000cc4:	75fb      	strb	r3, [r7, #23]
    SPI_Write_Reg(NRF_STATUS, &sta_val);
 8000cc6:	f107 0317 	add.w	r3, r7, #23
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2007      	movs	r0, #7
 8000cce:	f7ff fe5f 	bl	8000990 <SPI_Write_Reg>



}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200002cf 	.word	0x200002cf
 8000ce0:	200002d1 	.word	0x200002d1
 8000ce4:	200002d0 	.word	0x200002d0
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <TX_Mode>:
 * @param buf The payload to be transmitted
 * @param payloadLength The payload's length
 */

void TX_Mode(uint8_t* buf, uint8_t payloadLength)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
	  TX_OK = 0; //Iniciando transmissão (Na IRQ é setada para 1, indicando fim de transmissão)
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <TX_Mode+0x88>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
	  //To enter this mode, the nRF24L01 must have the PWR_UP bit set high, PRIM_RX bit set low,
	  //a payload in the TX FIFO and, a high pulse on the CE for more than 10μs.

	  //Make sure you sett CE = 0 first, so the chip is in Standby mode before you change radio mode.
	  //CE (active high and is used to activate the chip in RX or TX mode) - 0: Desativa o transceiver para programação
	  HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2108      	movs	r1, #8
 8000d02:	481d      	ldr	r0, [pc, #116]	; (8000d78 <TX_Mode+0x8c>)
 8000d04:	f000 fc49 	bl	800159a <HAL_GPIO_WritePin>
	  // b4. MASK_MAX_RT 	= 0 or 1: 0 Reflect MAX_RT as active low on RFIRQ or 1 to disable this IRQ
	  // b3. EN_CRC 		= 1: Enable CRC - Forced high if one of the bits in the EN_AA is high
	  // b2. CRCO 			= 1: CRC encoding 2 bytes
	  // b1. PWR_UP 		= 1: POWER UP
	  // b0. PRIM_RX 		= 0: RX/TX control with TX (sets the nRF24L01 in transmit/receive)
	  uint8_t config = 0x0E; // 0000 1110
 8000d08:	230e      	movs	r3, #14
 8000d0a:	73fb      	strb	r3, [r7, #15]

	  // Disables the MAX_RT IRQ if the Auto Acknowledgment is disabled
	  if(autoAck_enable == 0)
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <TX_Mode+0x90>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <TX_Mode+0x32>
	  {
		  config |= 0x10; // 0000 1110 | 0001 0000 = 0001 1110
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	73fb      	strb	r3, [r7, #15]
	  }

	  SPI_Write_Reg(CONFIG, &config);
 8000d1e:	f107 030f 	add.w	r3, r7, #15
 8000d22:	4619      	mov	r1, r3
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fe33 	bl	8000990 <SPI_Write_Reg>

	  //enviar (transmitir) endereço do receptor para o qual a mensagem será enviada (o outro nRF24L01)
	  //SPI_Write_Buf_Reg(TX_ADDR, ADDR_HOST_P0_AND_TX, TX_RX_ADDR_WIDTH);

	  //Envia o payload para o transceiver.
	  if(autoAck_enable)
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <TX_Mode+0x90>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d007      	beq.n	8000d42 <TX_Mode+0x56>
		  SPI_Write_Buf(W_TX_PAYLOAD, buf, payloadLength); // Writes data to TX payload
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	20a0      	movs	r0, #160	; 0xa0
 8000d3c:	f7ff fe80 	bl	8000a40 <SPI_Write_Buf>
 8000d40:	e006      	b.n	8000d50 <TX_Mode+0x64>
	  else
		  SPI_Write_Buf(W_TX_PAYLOAD_NOACK, buf, payloadLength); // Writes data to TX payload without Acknowledgment
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	20b0      	movs	r0, #176	; 0xb0
 8000d4c:	f7ff fe78 	bl	8000a40 <SPI_Write_Buf>

	  //Iniciar transmissão - ativar TX-RF
	  // Set CE pin high to enable TX Mode
	  //	CE (active high and is used to activate the chip in RX or TX mode)
	  // 	- a: Ativa o transceiver para RX
	  HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2108      	movs	r1, #8
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <TX_Mode+0x8c>)
 8000d56:	f000 fc20 	bl	800159a <HAL_GPIO_WritePin>
	            //Com data rate de 1Mbps ==> 1us por bit;
	            //Pacote transmitido: Preambulo (1 byte) + endereço (5bytes) + controle (9bits) + payload (até 32 bytes)
	            //                    + CRC (2 bytes) ==> Total 329 bits (pacote maximo) ==> ou seja 329useg
	            //    adicionando os tempos de wakeup etc, teríamos +- 1mseg... vou usar 2mseg por segurança aqui...

	  DWT_Delay_us(15);
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	f7ff fcee 	bl	800073c <DWT_Delay_us>
	  HAL_GPIO_WritePin(_RF_CE_GPIO_Port, _RF_CE_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2108      	movs	r1, #8
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <TX_Mode+0x8c>)
 8000d66:	f000 fc18 	bl	800159a <HAL_GPIO_WritePin>
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200002d0 	.word	0x200002d0
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	200002d2 	.word	0x200002d2

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_MspInit+0x5c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_MspInit+0x5c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_MspInit+0x5c>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_MspInit+0x5c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_MspInit+0x5c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_MspInit+0x5c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_MspInit+0x60>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_MspInit+0x60>)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d12f      	bne.n	8000e64 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MOSI_Pin;
 8000e34:	23a0      	movs	r3, #160	; 0xa0
 8000e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <HAL_SPI_MspInit+0x90>)
 8000e48:	f000 fa36 	bl	80012b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_MISO_Pin;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RF_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <HAL_SPI_MspInit+0x90>)
 8000e60:	f000 fa2a 	bl	80012b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40013000 	.word	0x40013000
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010800 	.word	0x40010800

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <MemManage_Handler+0x4>

08000e90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <BusFault_Handler+0x4>

08000e96 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <UsageFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f8ac 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ed2:	f000 fc99 	bl	8001808 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000125c 	.word	0x2000125c

08000ee0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <SystemInit+0x5c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <SystemInit+0x5c>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <SystemInit+0x5c>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4911      	ldr	r1, [pc, #68]	; (8000f3c <SystemInit+0x5c>)
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <SystemInit+0x60>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <SystemInit+0x5c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <SystemInit+0x5c>)
 8000f02:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <SystemInit+0x5c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SystemInit+0x5c>)
 8000f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f16:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <SystemInit+0x5c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <SystemInit+0x5c>)
 8000f1e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000f22:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SystemInit+0x5c>)
 8000f26:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000f2a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SystemInit+0x64>)
 8000f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f32:	609a      	str	r2, [r3, #8]
#endif 
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	f8ff0000 	.word	0xf8ff0000
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f4a:	e003      	b.n	8000f54 <LoopCopyDataInit>

08000f4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f52:	3104      	adds	r1, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f5c:	d3f6      	bcc.n	8000f4c <CopyDataInit>
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f60:	e002      	b.n	8000f68 <LoopFillZerobss>

08000f62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f64:	f842 3b04 	str.w	r3, [r2], #4

08000f68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f6c:	d3f9      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f6e:	f7ff ffb7 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f005 fd41 	bl	80069f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f76:	f7ff f927 	bl	80001c8 <main>
  bx lr
 8000f7a:	4770      	bx	lr
  ldr r3, =_sidata
 8000f7c:	08006aec 	.word	0x08006aec
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f84:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 8000f88:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 8000f8c:	200014c8 	.word	0x200014c8

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x28>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x28>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f945 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fee6 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f95d 	bl	800129e <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f925 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000000c 	.word	0x2000000c
 8001018:	20000014 	.word	0x20000014
 800101c:	20000010 	.word	0x20000010

08001020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_IncTick+0x1c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x20>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a03      	ldr	r2, [pc, #12]	; (8001040 <HAL_IncTick+0x20>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	20000014 	.word	0x20000014
 8001040:	200005c4 	.word	0x200005c4

08001044 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <HAL_GetTick+0x10>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	200005c4 	.word	0x200005c4

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff fff0 	bl	8001044 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_Delay+0x40>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffe0 	bl	8001044 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000014 	.word	0x20000014

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4906      	ldr	r1, [pc, #24]	; (8001134 <__NVIC_EnableIRQ+0x34>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff90 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff2d 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff42 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff90 	bl	800118c <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff35 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffa2 	bl	80011f0 <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b08b      	sub	sp, #44	; 0x2c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	e127      	b.n	800151c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012cc:	2201      	movs	r2, #1
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 8116 	bne.w	8001516 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d034      	beq.n	800135c <HAL_GPIO_Init+0xa4>
 80012f2:	2b12      	cmp	r3, #18
 80012f4:	d80d      	bhi.n	8001312 <HAL_GPIO_Init+0x5a>
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d02b      	beq.n	8001352 <HAL_GPIO_Init+0x9a>
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d804      	bhi.n	8001308 <HAL_GPIO_Init+0x50>
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d031      	beq.n	8001366 <HAL_GPIO_Init+0xae>
 8001302:	2b01      	cmp	r3, #1
 8001304:	d01c      	beq.n	8001340 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001306:	e048      	b.n	800139a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001308:	2b03      	cmp	r3, #3
 800130a:	d043      	beq.n	8001394 <HAL_GPIO_Init+0xdc>
 800130c:	2b11      	cmp	r3, #17
 800130e:	d01b      	beq.n	8001348 <HAL_GPIO_Init+0x90>
          break;
 8001310:	e043      	b.n	800139a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001312:	4a89      	ldr	r2, [pc, #548]	; (8001538 <HAL_GPIO_Init+0x280>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d026      	beq.n	8001366 <HAL_GPIO_Init+0xae>
 8001318:	4a87      	ldr	r2, [pc, #540]	; (8001538 <HAL_GPIO_Init+0x280>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d806      	bhi.n	800132c <HAL_GPIO_Init+0x74>
 800131e:	4a87      	ldr	r2, [pc, #540]	; (800153c <HAL_GPIO_Init+0x284>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d020      	beq.n	8001366 <HAL_GPIO_Init+0xae>
 8001324:	4a86      	ldr	r2, [pc, #536]	; (8001540 <HAL_GPIO_Init+0x288>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01d      	beq.n	8001366 <HAL_GPIO_Init+0xae>
          break;
 800132a:	e036      	b.n	800139a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800132c:	4a85      	ldr	r2, [pc, #532]	; (8001544 <HAL_GPIO_Init+0x28c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0xae>
 8001332:	4a85      	ldr	r2, [pc, #532]	; (8001548 <HAL_GPIO_Init+0x290>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d016      	beq.n	8001366 <HAL_GPIO_Init+0xae>
 8001338:	4a84      	ldr	r2, [pc, #528]	; (800154c <HAL_GPIO_Init+0x294>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0xae>
          break;
 800133e:	e02c      	b.n	800139a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	623b      	str	r3, [r7, #32]
          break;
 8001346:	e028      	b.n	800139a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	3304      	adds	r3, #4
 800134e:	623b      	str	r3, [r7, #32]
          break;
 8001350:	e023      	b.n	800139a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	3308      	adds	r3, #8
 8001358:	623b      	str	r3, [r7, #32]
          break;
 800135a:	e01e      	b.n	800139a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	330c      	adds	r3, #12
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e019      	b.n	800139a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800136e:	2304      	movs	r3, #4
 8001370:	623b      	str	r3, [r7, #32]
          break;
 8001372:	e012      	b.n	800139a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800137c:	2308      	movs	r3, #8
 800137e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	611a      	str	r2, [r3, #16]
          break;
 8001386:	e008      	b.n	800139a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	2308      	movs	r3, #8
 800138a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	615a      	str	r2, [r3, #20]
          break;
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
          break;
 8001398:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2bff      	cmp	r3, #255	; 0xff
 800139e:	d801      	bhi.n	80013a4 <HAL_GPIO_Init+0xec>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	e001      	b.n	80013a8 <HAL_GPIO_Init+0xf0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3304      	adds	r3, #4
 80013a8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2bff      	cmp	r3, #255	; 0xff
 80013ae:	d802      	bhi.n	80013b6 <HAL_GPIO_Init+0xfe>
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x104>
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	3b08      	subs	r3, #8
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	210f      	movs	r1, #15
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	401a      	ands	r2, r3
 80013ce:	6a39      	ldr	r1, [r7, #32]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	431a      	orrs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8096 	beq.w	8001516 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ea:	4b59      	ldr	r3, [pc, #356]	; (8001550 <HAL_GPIO_Init+0x298>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4a58      	ldr	r2, [pc, #352]	; (8001550 <HAL_GPIO_Init+0x298>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6193      	str	r3, [r2, #24]
 80013f6:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_GPIO_Init+0x298>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001402:	4a54      	ldr	r2, [pc, #336]	; (8001554 <HAL_GPIO_Init+0x29c>)
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_GPIO_Init+0x2a0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0x19e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4a      	ldr	r2, [pc, #296]	; (800155c <HAL_GPIO_Init+0x2a4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00d      	beq.n	8001452 <HAL_GPIO_Init+0x19a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a49      	ldr	r2, [pc, #292]	; (8001560 <HAL_GPIO_Init+0x2a8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d007      	beq.n	800144e <HAL_GPIO_Init+0x196>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a48      	ldr	r2, [pc, #288]	; (8001564 <HAL_GPIO_Init+0x2ac>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_GPIO_Init+0x192>
 8001446:	2303      	movs	r3, #3
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x1a0>
 800144a:	2304      	movs	r3, #4
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x1a0>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x1a0>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x1a0>
 8001456:	2300      	movs	r3, #0
 8001458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001468:	493a      	ldr	r1, [pc, #232]	; (8001554 <HAL_GPIO_Init+0x29c>)
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4938      	ldr	r1, [pc, #224]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	43db      	mvns	r3, r3
 8001498:	4933      	ldr	r1, [pc, #204]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 800149a:	4013      	ands	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	492e      	ldr	r1, [pc, #184]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
 80014b6:	e006      	b.n	80014c6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	43db      	mvns	r3, r3
 80014c0:	4929      	ldr	r1, [pc, #164]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	4924      	ldr	r1, [pc, #144]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
 80014de:	e006      	b.n	80014ee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	491f      	ldr	r1, [pc, #124]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	491a      	ldr	r1, [pc, #104]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	60cb      	str	r3, [r1, #12]
 8001506:	e006      	b.n	8001516 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	43db      	mvns	r3, r3
 8001510:	4915      	ldr	r1, [pc, #84]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001512:	4013      	ands	r3, r2
 8001514:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f aed0 	bne.w	80012cc <HAL_GPIO_Init+0x14>
  }
}
 800152c:	bf00      	nop
 800152e:	372c      	adds	r7, #44	; 0x2c
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	10210000 	.word	0x10210000
 800153c:	10110000 	.word	0x10110000
 8001540:	10120000 	.word	0x10120000
 8001544:	10310000 	.word	0x10310000
 8001548:	10320000 	.word	0x10320000
 800154c:	10220000 	.word	0x10220000
 8001550:	40021000 	.word	0x40021000
 8001554:	40010000 	.word	0x40010000
 8001558:	40010800 	.word	0x40010800
 800155c:	40010c00 	.word	0x40010c00
 8001560:	40011000 	.word	0x40011000
 8001564:	40011400 	.word	0x40011400
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e001      	b.n	800158e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	807b      	strh	r3, [r7, #2]
 80015a6:	4613      	mov	r3, r2
 80015a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015aa:	787b      	ldrb	r3, [r7, #1]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b0:	887a      	ldrh	r2, [r7, #2]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015b6:	e003      	b.n	80015c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015b8:	887b      	ldrh	r3, [r7, #2]
 80015ba:	041a      	lsls	r2, r3, #16
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	611a      	str	r2, [r3, #16]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	611a      	str	r2, [r3, #16]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fc:	b08b      	sub	sp, #44	; 0x2c
 80015fe:	af06      	add	r7, sp, #24
 8001600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0d3      	b.n	80017b4 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d106      	bne.n	8001626 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f004 ff4b 	bl	80064bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2203      	movs	r2, #3
 800162a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f002 f8ad 	bl	8003792 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	687e      	ldr	r6, [r7, #4]
 8001640:	466d      	mov	r5, sp
 8001642:	f106 0410 	add.w	r4, r6, #16
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	602b      	str	r3, [r5, #0]
 800164e:	1d33      	adds	r3, r6, #4
 8001650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001652:	6838      	ldr	r0, [r7, #0]
 8001654:	f002 f876 	bl	8003744 <USB_CoreInit>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2202      	movs	r2, #2
 8001662:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0a4      	b.n	80017b4 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f002 f8aa 	bl	80037ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e035      	b.n	80016e8 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	015b      	lsls	r3, r3, #5
 8001682:	4413      	add	r3, r2
 8001684:	3329      	adds	r3, #41	; 0x29
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	4413      	add	r3, r2
 8001692:	3328      	adds	r3, #40	; 0x28
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	b291      	uxth	r1, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	4413      	add	r3, r2
 80016a4:	3336      	adds	r3, #54	; 0x36
 80016a6:	460a      	mov	r2, r1
 80016a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	015b      	lsls	r3, r3, #5
 80016b0:	4413      	add	r3, r2
 80016b2:	332b      	adds	r3, #43	; 0x2b
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	015b      	lsls	r3, r3, #5
 80016be:	4413      	add	r3, r2
 80016c0:	3338      	adds	r3, #56	; 0x38
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	4413      	add	r3, r2
 80016ce:	333c      	adds	r3, #60	; 0x3c
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	3302      	adds	r3, #2
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	4413      	add	r3, r2
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	3301      	adds	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d3c4      	bcc.n	800167c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e031      	b.n	800175c <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	015b      	lsls	r3, r3, #5
 80016fe:	4413      	add	r3, r2
 8001700:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	015b      	lsls	r3, r3, #5
 800170e:	4413      	add	r3, r2
 8001710:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	015b      	lsls	r3, r3, #5
 800171e:	4413      	add	r3, r2
 8001720:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	015b      	lsls	r3, r3, #5
 800172e:	4413      	add	r3, r2
 8001730:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	015b      	lsls	r3, r3, #5
 800173e:	4413      	add	r3, r2
 8001740:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	330a      	adds	r3, #10
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	4413      	add	r3, r2
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	3301      	adds	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d3c8      	bcc.n	80016f8 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	687e      	ldr	r6, [r7, #4]
 800176e:	466d      	mov	r5, sp
 8001770:	f106 0410 	add.w	r4, r6, #16
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	602b      	str	r3, [r5, #0]
 800177c:	1d33      	adds	r3, r6, #4
 800177e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f002 f82e 	bl	80037e2 <USB_DevInit>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e00d      	b.n	80017b4 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 f86c 	bl	800488a <USB_DevDisconnect>

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_PCD_Start+0x16>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e016      	b.n	8001800 <HAL_PCD_Start+0x44>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017da:	2101      	movs	r1, #1
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f005 f8d4 	bl	800698a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 f845 	bl	8004876 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f001 ffb7 	bl	8003764 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f842 	bl	800489e <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001824:	d102      	bne.n	800182c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 faf2 	bl	8001e10 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 f834 	bl	800489e <USB_ReadInterrupts>
 8001836:	4603      	mov	r3, r0
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001840:	d112      	bne.n	8001868 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001854:	b292      	uxth	r2, r2
 8001856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f004 fea3 	bl	80065a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f8de 	bl	8001a24 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 f816 	bl	800489e <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800187c:	d10b      	bne.n	8001896 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001886:	b29a      	uxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001890:	b292      	uxth	r2, r2
 8001892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f002 ffff 	bl	800489e <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018aa:	d10b      	bne.n	80018c4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018be:	b292      	uxth	r2, r2
 80018c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 ffe8 	bl	800489e <USB_ReadInterrupts>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d8:	d126      	bne.n	8001928 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0204 	bic.w	r2, r2, #4
 80018ec:	b292      	uxth	r2, r2
 80018ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0208 	bic.w	r2, r2, #8
 8001904:	b292      	uxth	r2, r2
 8001906:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f004 fe84 	bl	8006618 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001922:	b292      	uxth	r2, r2
 8001924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f002 ffb6 	bl	800489e <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800193c:	d13d      	bne.n	80019ba <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001946:	b29a      	uxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0208 	orr.w	r2, r2, #8
 8001950:	b292      	uxth	r2, r2
 8001952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001968:	b292      	uxth	r2, r2
 800196a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0204 	orr.w	r2, r2, #4
 8001980:	b292      	uxth	r2, r2
 8001982:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f002 ff87 	bl	800489e <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800199a:	d10b      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f004 fe15 	bl	80065e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 ff6d 	bl	800489e <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ce:	d10e      	bne.n	80019ee <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d8:	b29a      	uxth	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019e2:	b292      	uxth	r2, r2
 80019e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f004 fdce 	bl	800658a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 ff53 	bl	800489e <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a02:	d10b      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a16:	b292      	uxth	r2, r2
 8001a18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_PCD_SetAddress+0x1a>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e013      	b.n	8001a66 <HAL_PCD_SetAddress+0x42>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	78fa      	ldrb	r2, [r7, #3]
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fefa 	bl	8004850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	4608      	mov	r0, r1
 8001a78:	4611      	mov	r1, r2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	70fb      	strb	r3, [r7, #3]
 8001a80:	460b      	mov	r3, r1
 8001a82:	803b      	strh	r3, [r7, #0]
 8001a84:	4613      	mov	r3, r2
 8001a86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da0b      	bge.n	8001aac <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	3328      	adds	r3, #40	; 0x28
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	705a      	strb	r2, [r3, #1]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	015b      	lsls	r3, r3, #5
 8001ab4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ad0:	883a      	ldrh	r2, [r7, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	78ba      	ldrb	r2, [r7, #2]
 8001ada:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	785b      	ldrb	r3, [r3, #1]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aee:	78bb      	ldrb	r3, [r7, #2]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d102      	bne.n	8001afa <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_PCD_EP_Open+0x9a>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e00e      	b.n	8001b26 <HAL_PCD_EP_Open+0xb8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 fe88 	bl	800382c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001b24:	7afb      	ldrb	r3, [r7, #11]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da0b      	bge.n	8001b5a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	015b      	lsls	r3, r3, #5
 8001b4a:	3328      	adds	r3, #40	; 0x28
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	705a      	strb	r2, [r3, #1]
 8001b58:	e00b      	b.n	8001b72 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	015b      	lsls	r3, r3, #5
 8001b62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_PCD_EP_Close+0x5e>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e00e      	b.n	8001baa <HAL_PCD_EP_Close+0x7c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68f9      	ldr	r1, [r7, #12]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 f934 	bl	8003e08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	015b      	lsls	r3, r3, #5
 8001bca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2200      	movs	r2, #0
 8001bea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bec:	7afb      	ldrb	r3, [r7, #11]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6979      	ldr	r1, [r7, #20]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fa93 	bl	8004134 <USB_EPStartXfer>
 8001c0e:	e005      	b.n	8001c1c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fa8c 	bl	8004134 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	330a      	adds	r3, #10
 8001c3c:	015b      	lsls	r3, r3, #5
 8001c3e:	4413      	add	r3, r2
 8001c40:	3304      	adds	r3, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	015b      	lsls	r3, r3, #5
 8001c66:	3328      	adds	r3, #40	; 0x28
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2201      	movs	r2, #1
 8001c84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d106      	bne.n	8001caa <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6979      	ldr	r1, [r7, #20]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 fa46 	bl	8004134 <USB_EPStartXfer>
 8001ca8:	e005      	b.n	8001cb6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6979      	ldr	r1, [r7, #20]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fa3f 	bl	8004134 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 0207 	and.w	r2, r3, #7
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d901      	bls.n	8001cde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e046      	b.n	8001d6c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da0b      	bge.n	8001cfe <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	015b      	lsls	r3, r3, #5
 8001cee:	3328      	adds	r3, #40	; 0x28
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	705a      	strb	r2, [r3, #1]
 8001cfc:	e009      	b.n	8001d12 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	015b      	lsls	r3, r3, #5
 8001d02:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_PCD_EP_SetStall+0x72>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e01c      	b.n	8001d6c <HAL_PCD_EP_SetStall+0xac>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68f9      	ldr	r1, [r7, #12]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 fcaf 	bl	80046a4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d108      	bne.n	8001d62 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f002 fdad 	bl	80048bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d901      	bls.n	8001d92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e03a      	b.n	8001e08 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	da0b      	bge.n	8001db2 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	015b      	lsls	r3, r3, #5
 8001da2:	3328      	adds	r3, #40	; 0x28
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	705a      	strb	r2, [r3, #1]
 8001db0:	e00b      	b.n	8001dca <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	015b      	lsls	r3, r3, #5
 8001dba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_PCD_EP_ClrStall+0x76>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e00e      	b.n	8001e08 <HAL_PCD_EP_ClrStall+0x94>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68f9      	ldr	r1, [r7, #12]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fc95 	bl	8004728 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e18:	e282      	b.n	8002320 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e22:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e24:	8afb      	ldrh	r3, [r7, #22]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001e2e:	7d7b      	ldrb	r3, [r7, #21]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f040 8142 	bne.w	80020ba <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e36:	8afb      	ldrh	r3, [r7, #22]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d151      	bne.n	8001ee4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e50:	b29c      	uxth	r4, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3328      	adds	r3, #40	; 0x28
 8001e66:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f004 fb59 	bl	800655c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8234 	beq.w	8002320 <PCD_EP_ISR_Handler+0x510>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 822f 	bne.w	8002320 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b292      	uxth	r2, r2
 8001ed6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ee2:	e21d      	b.n	8002320 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eea:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ef4:	8a7b      	ldrh	r3, [r7, #18]
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d033      	beq.n	8001f66 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	3306      	adds	r3, #6
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f002 fd0c 	bl	800495a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f4e:	4013      	ands	r3, r2
 8001f50:	b29c      	uxth	r4, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f004 fad2 	bl	8006508 <HAL_PCD_SetupStageCallback>
 8001f64:	e1dc      	b.n	8002320 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f280 81d8 	bge.w	8002320 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29c      	uxth	r4, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3306      	adds	r3, #6
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d019      	beq.n	8001ff4 <PCD_EP_ISR_Handler+0x1e4>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d015      	beq.n	8001ff4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6959      	ldr	r1, [r3, #20]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	f002 fcbe 	bl	800495a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	441a      	add	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fec:	2100      	movs	r1, #0
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f004 fa9c 	bl	800652c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461c      	mov	r4, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002002:	b29b      	uxth	r3, r3
 8002004:	441c      	add	r4, r3
 8002006:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800200a:	461c      	mov	r4, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10e      	bne.n	8002032 <PCD_EP_ISR_Handler+0x222>
 8002014:	8823      	ldrh	r3, [r4, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800201c:	b29b      	uxth	r3, r3
 800201e:	8023      	strh	r3, [r4, #0]
 8002020:	8823      	ldrh	r3, [r4, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800202c:	b29b      	uxth	r3, r3
 800202e:	8023      	strh	r3, [r4, #0]
 8002030:	e02d      	b.n	800208e <PCD_EP_ISR_Handler+0x27e>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b3e      	cmp	r3, #62	; 0x3e
 8002038:	d812      	bhi.n	8002060 <PCD_EP_ISR_Handler+0x250>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <PCD_EP_ISR_Handler+0x244>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	3301      	adds	r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	b29b      	uxth	r3, r3
 8002058:	029b      	lsls	r3, r3, #10
 800205a:	b29b      	uxth	r3, r3
 800205c:	8023      	strh	r3, [r4, #0]
 800205e:	e016      	b.n	800208e <PCD_EP_ISR_Handler+0x27e>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <PCD_EP_ISR_Handler+0x26a>
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	3b01      	subs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	b29b      	uxth	r3, r3
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	b29b      	uxth	r3, r3
 8002082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800208a:	b29b      	uxth	r3, r3
 800208c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	b29c      	uxth	r4, r3
 80020a0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80020a4:	b29c      	uxth	r4, r3
 80020a6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80020aa:	b29c      	uxth	r4, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4ba2      	ldr	r3, [pc, #648]	; (800233c <PCD_EP_ISR_Handler+0x52c>)
 80020b2:	4323      	orrs	r3, r4
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	8013      	strh	r3, [r2, #0]
 80020b8:	e132      	b.n	8002320 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	7d7b      	ldrb	r3, [r7, #21]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f280 80d1 	bge.w	8002276 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	7d7b      	ldrb	r3, [r7, #21]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020e8:	4013      	ands	r3, r2
 80020ea:	b29c      	uxth	r4, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	7d7b      	ldrb	r3, [r7, #21]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80020fc:	b292      	uxth	r2, r2
 80020fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002100:	7d7b      	ldrb	r3, [r7, #21]
 8002102:	015b      	lsls	r3, r3, #5
 8002104:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	7b1b      	ldrb	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d121      	bne.n	800215a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	3306      	adds	r3, #6
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800213e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002140:	8bfb      	ldrh	r3, [r7, #30]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d072      	beq.n	800222c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6959      	ldr	r1, [r3, #20]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	88da      	ldrh	r2, [r3, #6]
 8002152:	8bfb      	ldrh	r3, [r7, #30]
 8002154:	f002 fc01 	bl	800495a <USB_ReadPMA>
 8002158:	e068      	b.n	800222c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d021      	beq.n	80021b8 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	3302      	adds	r3, #2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800219c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800219e:	8bfb      	ldrh	r3, [r7, #30]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d02a      	beq.n	80021fa <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6959      	ldr	r1, [r3, #20]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	891a      	ldrh	r2, [r3, #8]
 80021b0:	8bfb      	ldrh	r3, [r7, #30]
 80021b2:	f002 fbd2 	bl	800495a <USB_ReadPMA>
 80021b6:	e020      	b.n	80021fa <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	3306      	adds	r3, #6
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80021e2:	8bfb      	ldrh	r3, [r7, #30]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6959      	ldr	r1, [r3, #20]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	895a      	ldrh	r2, [r3, #10]
 80021f4:	8bfb      	ldrh	r3, [r7, #30]
 80021f6:	f002 fbb0 	bl	800495a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002214:	b29c      	uxth	r4, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	441a      	add	r2, r3
 8002224:	4b46      	ldr	r3, [pc, #280]	; (8002340 <PCD_EP_ISR_Handler+0x530>)
 8002226:	4323      	orrs	r3, r4
 8002228:	b29b      	uxth	r3, r3
 800222a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	8bfb      	ldrh	r3, [r7, #30]
 8002232:	441a      	add	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	8bfb      	ldrh	r3, [r7, #30]
 800223e:	441a      	add	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <PCD_EP_ISR_Handler+0x446>
 800224c:	8bfa      	ldrh	r2, [r7, #30]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	d206      	bcs.n	8002264 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4619      	mov	r1, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f004 f965 	bl	800652c <HAL_PCD_DataOutStageCallback>
 8002262:	e008      	b.n	8002276 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	7819      	ldrb	r1, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fc9e 	bl	8001bb2 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002276:	8a7b      	ldrh	r3, [r7, #18]
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b00      	cmp	r3, #0
 800227e:	d04f      	beq.n	8002320 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002280:	7d7b      	ldrb	r3, [r7, #21]
 8002282:	015b      	lsls	r3, r3, #5
 8002284:	3328      	adds	r3, #40	; 0x28
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	7d7b      	ldrb	r3, [r7, #21]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a4:	b29c      	uxth	r4, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	7d7b      	ldrb	r3, [r7, #21]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80022b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	3302      	adds	r3, #2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	441a      	add	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f004 f928 	bl	800655c <HAL_PCD_DataInStageCallback>
 800230c:	e008      	b.n	8002320 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	7819      	ldrb	r1, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fc97 	bl	8001c4e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002328:	b29b      	uxth	r3, r3
 800232a:	b21b      	sxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	f6ff ad74 	blt.w	8001e1a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3724      	adds	r7, #36	; 0x24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}
 800233c:	ffff8080 	.word	0xffff8080
 8002340:	ffff80c0 	.word	0xffff80c0

08002344 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	4613      	mov	r3, r2
 8002354:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002356:	897b      	ldrh	r3, [r7, #10]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002362:	897b      	ldrh	r3, [r7, #10]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	015b      	lsls	r3, r3, #5
 800236a:	3328      	adds	r3, #40	; 0x28
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e006      	b.n	8002382 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002374:	897b      	ldrh	r3, [r7, #10]
 8002376:	015b      	lsls	r3, r3, #5
 8002378:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002382:	893b      	ldrh	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2200      	movs	r2, #0
 800238c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	b29a      	uxth	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	80da      	strh	r2, [r3, #6]
 8002396:	e00b      	b.n	80023b0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2201      	movs	r2, #1
 800239c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e26c      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8087 	beq.w	80024ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023dc:	4b92      	ldr	r3, [pc, #584]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d00c      	beq.n	8002402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e8:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d112      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
 80023f4:	4b8c      	ldr	r3, [pc, #560]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d10b      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d06c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x12c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d168      	bne.n	80024e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e246      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x76>
 8002424:	4b80      	ldr	r3, [pc, #512]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7f      	ldr	r2, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e02e      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x98>
 800243a:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b78      	ldr	r3, [pc, #480]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a77      	ldr	r2, [pc, #476]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0xbc>
 800245e:	4b72      	ldr	r3, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a71      	ldr	r2, [pc, #452]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002478:	4b6b      	ldr	r3, [pc, #428]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6a      	ldr	r2, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b68      	ldr	r3, [pc, #416]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a67      	ldr	r2, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fdd4 	bl	8001044 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fdd0 	bl	8001044 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1fa      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xe4>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fdc0 	bl	8001044 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fdbc 	bl	8001044 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1e6      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x10c>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f6:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002502:	4b49      	ldr	r3, [pc, #292]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1ba      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4939      	ldr	r1, [pc, #228]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_RCC_OscConfig+0x270>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fd75 	bl	8001044 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fd71 	bl	8001044 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e19b      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_OscConfig+0x270>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fd54 	bl	8001044 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe fd50 	bl	8001044 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e17a      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d03a      	beq.n	8002640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d019      	beq.n	8002606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d8:	f7fe fd34 	bl	8001044 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe fd30 	bl	8001044 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e15a      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025fe:	2001      	movs	r0, #1
 8002600:	f000 fab2 	bl	8002b68 <RCC_Delay>
 8002604:	e01c      	b.n	8002640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe fd1a 	bl	8001044 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002612:	e00f      	b.n	8002634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fd16 	bl	8001044 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d908      	bls.n	8002634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e140      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	42420000 	.word	0x42420000
 8002630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	4b9e      	ldr	r3, [pc, #632]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e9      	bne.n	8002614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80a6 	beq.w	800279a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b94      	ldr	r3, [pc, #592]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a93      	ldr	r2, [pc, #588]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b91      	ldr	r3, [pc, #580]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b8e      	ldr	r3, [pc, #568]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b8b      	ldr	r3, [pc, #556]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a8a      	ldr	r2, [pc, #552]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe fcd7 	bl	8001044 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe fcd3 	bl	8001044 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0fd      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b81      	ldr	r3, [pc, #516]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x312>
 80026c0:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a7a      	ldr	r2, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6213      	str	r3, [r2, #32]
 80026cc:	e02d      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x334>
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a72      	ldr	r2, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	e01c      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x356>
 80026f8:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a6c      	ldr	r2, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 8002712:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a66      	ldr	r2, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fc87 	bl	8001044 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fc83 	bl	8001044 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0ab      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ee      	beq.n	800273a <HAL_RCC_OscConfig+0x37e>
 800275c:	e014      	b.n	8002788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe fc71 	bl	8001044 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fc6d 	bl	8001044 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e095      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ee      	bne.n	8002766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8081 	beq.w	80028a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b42      	ldr	r3, [pc, #264]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d061      	beq.n	8002874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d146      	bne.n	8002846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <HAL_RCC_OscConfig+0x4fc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe fc41 	bl	8001044 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe fc3d 	bl	8001044 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e067      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ec:	d108      	bne.n	8002800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	492d      	ldr	r1, [pc, #180]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a19      	ldr	r1, [r3, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	430b      	orrs	r3, r1
 8002812:	4927      	ldr	r1, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x4fc>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fc11 	bl	8001044 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fc0d 	bl	8001044 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e037      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x46a>
 8002844:	e02f      	b.n	80028a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCC_OscConfig+0x4fc>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fbfa 	bl	8001044 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fbf6 	bl	8001044 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e020      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x498>
 8002872:	e018      	b.n	80028a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e013      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	429a      	cmp	r2, r3
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42420060 	.word	0x42420060

080028bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4965      	ldr	r1, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800293a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e073      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4936      	ldr	r1, [pc, #216]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7fe fb4a 	bl	8001044 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe fb46 	bl	8001044 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d210      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4922      	ldr	r1, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4601      	mov	r1, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1cc>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe faa8 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08006ad4 	.word	0x08006ad4
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20000010 	.word	0x20000010

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b490      	push	{r4, r7}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a98:	1d3c      	adds	r4, r7, #4
 8002a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x46>
 8002ace:	e02d      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ad2:	623b      	str	r3, [r7, #32]
      break;
 8002ad4:	e02d      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ae8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0c5b      	lsrs	r3, r3, #17
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b02:	4413      	add	r3, r2
 8002b04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b0e:	fb02 f203 	mul.w	r2, r2, r3
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	e004      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	623b      	str	r3, [r7, #32]
      break;
 8002b2a:	e002      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b2e:	623b      	str	r3, [r7, #32]
      break;
 8002b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b32:	6a3b      	ldr	r3, [r7, #32]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc90      	pop	{r4, r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	08006a80 	.word	0x08006a80
 8002b44:	08006a90 	.word	0x08006a90
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	003d0900 	.word	0x003d0900

08002b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	2000000c 	.word	0x2000000c

08002b68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <RCC_Delay+0x34>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <RCC_Delay+0x38>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0a5b      	lsrs	r3, r3, #9
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b84:	bf00      	nop
  }
  while (Delay --);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1e5a      	subs	r2, r3, #1
 8002b8a:	60fa      	str	r2, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f9      	bne.n	8002b84 <RCC_Delay+0x1c>
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000000c 	.word	0x2000000c
 8002ba0:	10624dd3 	.word	0x10624dd3

08002ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d07d      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc4:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	61d3      	str	r3, [r2, #28]
 8002bdc:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d118      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf8:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a42      	ldr	r2, [pc, #264]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fa1e 	bl	8001044 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	e008      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fe fa1a 	bl	8001044 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e06d      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02e      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d027      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c48:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c52:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c58:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c5e:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d014      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe f9e9 	bl	8001044 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fe f9e5 	bl	8001044 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e036      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ee      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4917      	ldr	r1, [pc, #92]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	490b      	ldr	r1, [pc, #44]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4904      	ldr	r1, [pc, #16]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	42420440 	.word	0x42420440

08002d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e053      	b.n	8002dca <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d106      	bne.n	8002d42 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe f851 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d58:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	ea42 0103 	orr.w	r1, r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	0c1a      	lsrs	r2, r3, #16
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f002 0204 	and.w	r2, r2, #4
 8002da8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b088      	sub	sp, #32
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_SPI_Transmit+0x22>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e11e      	b.n	8003032 <HAL_SPI_Transmit+0x260>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dfc:	f7fe f922 	bl	8001044 <HAL_GetTick>
 8002e00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d002      	beq.n	8002e18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
 8002e14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e16:	e103      	b.n	8003020 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_Transmit+0x52>
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e28:	e0fa      	b.n	8003020 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	d107      	bne.n	8002e82 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d007      	beq.n	8002ea0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea8:	d14b      	bne.n	8002f42 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_SPI_Transmit+0xe6>
 8002eb2:	8afb      	ldrh	r3, [r7, #22]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d13e      	bne.n	8002f36 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	881a      	ldrh	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	1c9a      	adds	r2, r3, #2
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002edc:	e02b      	b.n	8002f36 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d112      	bne.n	8002f12 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	881a      	ldrh	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	1c9a      	adds	r2, r3, #2
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f10:	e011      	b.n	8002f36 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f12:	f7fe f897 	bl	8001044 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d803      	bhi.n	8002f2a <HAL_SPI_Transmit+0x158>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d102      	bne.n	8002f30 <HAL_SPI_Transmit+0x15e>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f34:	e074      	b.n	8003020 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ce      	bne.n	8002ede <HAL_SPI_Transmit+0x10c>
 8002f40:	e04c      	b.n	8002fdc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_SPI_Transmit+0x17e>
 8002f4a:	8afb      	ldrh	r3, [r7, #22]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d140      	bne.n	8002fd2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	7812      	ldrb	r2, [r2, #0]
 8002f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f76:	e02c      	b.n	8002fd2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d113      	bne.n	8002fae <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	330c      	adds	r3, #12
 8002f90:	7812      	ldrb	r2, [r2, #0]
 8002f92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fac:	e011      	b.n	8002fd2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fae:	f7fe f849 	bl	8001044 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d803      	bhi.n	8002fc6 <HAL_SPI_Transmit+0x1f4>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d102      	bne.n	8002fcc <HAL_SPI_Transmit+0x1fa>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fd0:	e026      	b.n	8003020 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1cd      	bne.n	8002f78 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	6839      	ldr	r1, [r7, #0]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fb91 	bl	8003708 <SPI_EndRxTxTransaction>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e000      	b.n	8003020 <HAL_SPI_Transmit+0x24e>
  }

error:
 800301e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003030:	7ffb      	ldrb	r3, [r7, #31]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b088      	sub	sp, #32
 800303e:	af02      	add	r7, sp, #8
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003056:	d112      	bne.n	800307e <HAL_SPI_Receive+0x44>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10e      	bne.n	800307e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2204      	movs	r2, #4
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f8e9 	bl	800324c <HAL_SPI_TransmitReceive>
 800307a:	4603      	mov	r3, r0
 800307c:	e0e2      	b.n	8003244 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_SPI_Receive+0x52>
 8003088:	2302      	movs	r3, #2
 800308a:	e0db      	b.n	8003244 <HAL_SPI_Receive+0x20a>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003094:	f7fd ffd6 	bl	8001044 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d002      	beq.n	80030ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030aa:	e0c2      	b.n	8003232 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_SPI_Receive+0x7e>
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030bc:	e0b9      	b.n	8003232 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2204      	movs	r2, #4
 80030c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003104:	d107      	bne.n	8003116 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d007      	beq.n	8003134 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d162      	bne.n	8003202 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800313c:	e02e      	b.n	800319c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d115      	bne.n	8003178 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f103 020c 	add.w	r2, r3, #12
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003176:	e011      	b.n	800319c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003178:	f7fd ff64 	bl	8001044 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d803      	bhi.n	8003190 <HAL_SPI_Receive+0x156>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318e:	d102      	bne.n	8003196 <HAL_SPI_Receive+0x15c>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	75fb      	strb	r3, [r7, #23]
          goto error;
 800319a:	e04a      	b.n	8003232 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1cb      	bne.n	800313e <HAL_SPI_Receive+0x104>
 80031a6:	e031      	b.n	800320c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d113      	bne.n	80031de <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	b292      	uxth	r2, r2
 80031c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	1c9a      	adds	r2, r3, #2
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031dc:	e011      	b.n	8003202 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031de:	f7fd ff31 	bl	8001044 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d803      	bhi.n	80031f6 <HAL_SPI_Receive+0x1bc>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d102      	bne.n	80031fc <HAL_SPI_Receive+0x1c2>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003200:	e017      	b.n	8003232 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1cd      	bne.n	80031a8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	6839      	ldr	r1, [r7, #0]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fa27 	bl	8003664 <SPI_EndRxTransaction>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
 800322e:	e000      	b.n	8003232 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003230:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	; 0x30
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800325a:	2301      	movs	r3, #1
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x26>
 800326e:	2302      	movs	r3, #2
 8003270:	e18a      	b.n	8003588 <HAL_SPI_TransmitReceive+0x33c>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800327a:	f7fd fee3 	bl	8001044 <HAL_GetTick>
 800327e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003298:	2b01      	cmp	r3, #1
 800329a:	d00f      	beq.n	80032bc <HAL_SPI_TransmitReceive+0x70>
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032a2:	d107      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d103      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x68>
 80032ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d003      	beq.n	80032bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
 80032b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032ba:	e15b      	b.n	8003574 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_SPI_TransmitReceive+0x82>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HAL_SPI_TransmitReceive+0x82>
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032d4:	e14e      	b.n	8003574 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d003      	beq.n	80032ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2205      	movs	r2, #5
 80032e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	887a      	ldrh	r2, [r7, #2]
 80032fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	887a      	ldrh	r2, [r7, #2]
 8003312:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d007      	beq.n	800333e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003346:	d178      	bne.n	800343a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_SPI_TransmitReceive+0x10a>
 8003350:	8b7b      	ldrh	r3, [r7, #26]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d166      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	1c9a      	adds	r2, r3, #2
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800337a:	e053      	b.n	8003424 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	d11b      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x176>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d016      	beq.n	80033c2 <HAL_SPI_TransmitReceive+0x176>
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d113      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d119      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x1b8>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d014      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	b292      	uxth	r2, r2
 80033e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	1c9a      	adds	r2, r3, #2
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003400:	2301      	movs	r3, #1
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003404:	f7fd fe1e 	bl	8001044 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003410:	429a      	cmp	r2, r3
 8003412:	d807      	bhi.n	8003424 <HAL_SPI_TransmitReceive+0x1d8>
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d003      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003422:	e0a7      	b.n	8003574 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1a6      	bne.n	800337c <HAL_SPI_TransmitReceive+0x130>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1a1      	bne.n	800337c <HAL_SPI_TransmitReceive+0x130>
 8003438:	e07c      	b.n	8003534 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_SPI_TransmitReceive+0x1fc>
 8003442:	8b7b      	ldrh	r3, [r7, #26]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d16b      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	7812      	ldrb	r2, [r2, #0]
 8003454:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800346e:	e057      	b.n	8003520 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	d11c      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x26c>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d017      	beq.n	80034b8 <HAL_SPI_TransmitReceive+0x26c>
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d114      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	7812      	ldrb	r2, [r2, #0]
 800349a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d119      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x2ae>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d014      	beq.n	80034fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034f6:	2301      	movs	r3, #1
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034fa:	f7fd fda3 	bl	8001044 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003506:	429a      	cmp	r2, r3
 8003508:	d803      	bhi.n	8003512 <HAL_SPI_TransmitReceive+0x2c6>
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d102      	bne.n	8003518 <HAL_SPI_TransmitReceive+0x2cc>
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800351e:	e029      	b.n	8003574 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1a2      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x224>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d19d      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f8e5 	bl	8003708 <SPI_EndRxTxTransaction>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003550:	e010      	b.n	8003574 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	e000      	b.n	8003574 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003572:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003584:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003588:	4618      	mov	r0, r3
 800358a:	3730      	adds	r7, #48	; 0x30
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035a0:	e04c      	b.n	800363c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d048      	beq.n	800363c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035aa:	f7fd fd4b 	bl	8001044 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d902      	bls.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d13d      	bne.n	800363c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d8:	d111      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e2:	d004      	beq.n	80035ee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ec:	d107      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003606:	d10f      	bne.n	8003628 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003626:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e00f      	b.n	800365c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	429a      	cmp	r2, r3
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d1a3      	bne.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003678:	d111      	bne.n	800369e <SPI_EndRxTransaction+0x3a>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003682:	d004      	beq.n	800368e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368c:	d107      	bne.n	800369e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a6:	d117      	bne.n	80036d8 <SPI_EndRxTransaction+0x74>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b0:	d112      	bne.n	80036d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2101      	movs	r1, #1
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff ff67 	bl	8003590 <SPI_WaitFlagStateUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01a      	beq.n	80036fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e013      	b.n	8003700 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2200      	movs	r2, #0
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff ff54 	bl	8003590 <SPI_WaitFlagStateUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e000      	b.n	8003700 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2200      	movs	r2, #0
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff ff36 	bl	8003590 <SPI_WaitFlagStateUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e000      	b.n	800373c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003744:	b084      	sub	sp, #16
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	f107 0014 	add.w	r0, r7, #20
 8003752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	b004      	add	sp, #16
 8003762:	4770      	bx	lr

08003764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800376c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003770:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003778:	b29a      	uxth	r2, r3
 800377a:	89fb      	ldrh	r3, [r7, #14]
 800377c:	4313      	orrs	r3, r2
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800379a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800379e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	b21a      	sxth	r2, r3
 80037aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	b21b      	sxth	r3, r3
 80037b2:	4013      	ands	r3, r2
 80037b4:	b21b      	sxth	r3, r3
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037e2:	b084      	sub	sp, #16
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	f107 0014 	add.w	r0, r7, #20
 80037f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ffa5 	bl	8003764 <USB_EnableGlobalInt>

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003826:	b004      	add	sp, #16
 8003828:	4770      	bx	lr
	...

0800382c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800382c:	b490      	push	{r4, r7}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800384c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003850:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	78db      	ldrb	r3, [r3, #3]
 8003856:	2b03      	cmp	r3, #3
 8003858:	d819      	bhi.n	800388e <USB_ActivateEndpoint+0x62>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <USB_ActivateEndpoint+0x34>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003871 	.word	0x08003871
 8003864:	08003885 	.word	0x08003885
 8003868:	08003895 	.word	0x08003895
 800386c:	0800387b 	.word	0x0800387b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003870:	89bb      	ldrh	r3, [r7, #12]
 8003872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003876:	81bb      	strh	r3, [r7, #12]
      break;
 8003878:	e00d      	b.n	8003896 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800387a:	89bb      	ldrh	r3, [r7, #12]
 800387c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003880:	81bb      	strh	r3, [r7, #12]
      break;
 8003882:	e008      	b.n	8003896 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003884:	89bb      	ldrh	r3, [r7, #12]
 8003886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800388a:	81bb      	strh	r3, [r7, #12]
      break;
 800388c:	e003      	b.n	8003896 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
      break;
 8003892:	e000      	b.n	8003896 <USB_ActivateEndpoint+0x6a>
      break;
 8003894:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	441a      	add	r2, r3
 80038a0:	89bb      	ldrh	r3, [r7, #12]
 80038a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b29c      	uxth	r4, r3
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	4b8a      	ldr	r3, [pc, #552]	; (8003b0c <USB_ActivateEndpoint+0x2e0>)
 80038e4:	4323      	orrs	r3, r4
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	7b1b      	ldrb	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 8112 	bne.w	8003b18 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d067      	beq.n	80039cc <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038fc:	687c      	ldr	r4, [r7, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	441c      	add	r4, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	4423      	add	r3, r4
 8003910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003914:	461c      	mov	r4, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	88db      	ldrh	r3, [r3, #6]
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	b29b      	uxth	r3, r3
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	b29b      	uxth	r3, r3
 8003922:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29c      	uxth	r4, r3
 8003932:	4623      	mov	r3, r4
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d014      	beq.n	8003966 <USB_ActivateEndpoint+0x13a>
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	b29c      	uxth	r4, r3
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	4b6c      	ldr	r3, [pc, #432]	; (8003b10 <USB_ActivateEndpoint+0x2e4>)
 8003960:	4323      	orrs	r3, r4
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	78db      	ldrb	r3, [r3, #3]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d018      	beq.n	80039a0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003984:	b29c      	uxth	r4, r3
 8003986:	f084 0320 	eor.w	r3, r4, #32
 800398a:	b29c      	uxth	r4, r3
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	441a      	add	r2, r3
 8003996:	4b5d      	ldr	r3, [pc, #372]	; (8003b0c <USB_ActivateEndpoint+0x2e0>)
 8003998:	4323      	orrs	r3, r4
 800399a:	b29b      	uxth	r3, r3
 800399c:	8013      	strh	r3, [r2, #0]
 800399e:	e22b      	b.n	8003df8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b6:	b29c      	uxth	r4, r3
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	4b52      	ldr	r3, [pc, #328]	; (8003b0c <USB_ActivateEndpoint+0x2e0>)
 80039c4:	4323      	orrs	r3, r4
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	8013      	strh	r3, [r2, #0]
 80039ca:	e215      	b.n	8003df8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039cc:	687c      	ldr	r4, [r7, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	441c      	add	r4, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	4423      	add	r3, r4
 80039e0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039e4:	461c      	mov	r4, r3
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	88db      	ldrh	r3, [r3, #6]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80039f4:	687c      	ldr	r4, [r7, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	441c      	add	r4, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	4423      	add	r3, r4
 8003a08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a0c:	461c      	mov	r4, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10e      	bne.n	8003a34 <USB_ActivateEndpoint+0x208>
 8003a16:	8823      	ldrh	r3, [r4, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	8023      	strh	r3, [r4, #0]
 8003a22:	8823      	ldrh	r3, [r4, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	8023      	strh	r3, [r4, #0]
 8003a32:	e02d      	b.n	8003a90 <USB_ActivateEndpoint+0x264>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b3e      	cmp	r3, #62	; 0x3e
 8003a3a:	d812      	bhi.n	8003a62 <USB_ActivateEndpoint+0x236>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <USB_ActivateEndpoint+0x22a>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	029b      	lsls	r3, r3, #10
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8023      	strh	r3, [r4, #0]
 8003a60:	e016      	b.n	8003a90 <USB_ActivateEndpoint+0x264>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <USB_ActivateEndpoint+0x250>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	029b      	lsls	r3, r3, #10
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	b29c      	uxth	r4, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d014      	beq.n	8003ad2 <USB_ActivateEndpoint+0x2a6>
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	b29c      	uxth	r4, r3
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	441a      	add	r2, r3
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <USB_ActivateEndpoint+0x2e8>)
 8003acc:	4323      	orrs	r3, r4
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	b29c      	uxth	r4, r3
 8003aea:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003aee:	b29c      	uxth	r4, r3
 8003af0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003af4:	b29c      	uxth	r4, r3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	441a      	add	r2, r3
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <USB_ActivateEndpoint+0x2e0>)
 8003b02:	4323      	orrs	r3, r4
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	8013      	strh	r3, [r2, #0]
 8003b08:	e176      	b.n	8003df8 <USB_ActivateEndpoint+0x5cc>
 8003b0a:	bf00      	nop
 8003b0c:	ffff8080 	.word	0xffff8080
 8003b10:	ffff80c0 	.word	0xffff80c0
 8003b14:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	b29c      	uxth	r4, r3
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	441a      	add	r2, r3
 8003b3a:	4b96      	ldr	r3, [pc, #600]	; (8003d94 <USB_ActivateEndpoint+0x568>)
 8003b3c:	4323      	orrs	r3, r4
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003b42:	687c      	ldr	r4, [r7, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	441c      	add	r4, r3
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	4423      	add	r3, r4
 8003b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b5a:	461c      	mov	r4, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	891b      	ldrh	r3, [r3, #8]
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8023      	strh	r3, [r4, #0]
 8003b6a:	687c      	ldr	r4, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	441c      	add	r4, r3
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	4423      	add	r3, r4
 8003b7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b82:	461c      	mov	r4, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	895b      	ldrh	r3, [r3, #10]
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 8088 	bne.w	8003cac <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29c      	uxth	r4, r3
 8003baa:	4623      	mov	r3, r4
 8003bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d014      	beq.n	8003bde <USB_ActivateEndpoint+0x3b2>
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	b29c      	uxth	r4, r3
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	4b70      	ldr	r3, [pc, #448]	; (8003d98 <USB_ActivateEndpoint+0x56c>)
 8003bd8:	4323      	orrs	r3, r4
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29c      	uxth	r4, r3
 8003bec:	4623      	mov	r3, r4
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d014      	beq.n	8003c20 <USB_ActivateEndpoint+0x3f4>
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0c:	b29c      	uxth	r4, r3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	441a      	add	r2, r3
 8003c18:	4b60      	ldr	r3, [pc, #384]	; (8003d9c <USB_ActivateEndpoint+0x570>)
 8003c1a:	4323      	orrs	r3, r4
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	b29c      	uxth	r4, r3
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	4b56      	ldr	r3, [pc, #344]	; (8003d9c <USB_ActivateEndpoint+0x570>)
 8003c44:	4323      	orrs	r3, r4
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c60:	b29c      	uxth	r4, r3
 8003c62:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c66:	b29c      	uxth	r4, r3
 8003c68:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c6c:	b29c      	uxth	r4, r3
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	441a      	add	r2, r3
 8003c78:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <USB_ActivateEndpoint+0x574>)
 8003c7a:	4323      	orrs	r3, r4
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c96:	b29c      	uxth	r4, r3
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <USB_ActivateEndpoint+0x574>)
 8003ca4:	4323      	orrs	r3, r4
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8013      	strh	r3, [r2, #0]
 8003caa:	e0a5      	b.n	8003df8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29c      	uxth	r4, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d014      	beq.n	8003cee <USB_ActivateEndpoint+0x4c2>
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	b29c      	uxth	r4, r3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	441a      	add	r2, r3
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <USB_ActivateEndpoint+0x56c>)
 8003ce8:	4323      	orrs	r3, r4
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29c      	uxth	r4, r3
 8003cfc:	4623      	mov	r3, r4
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d014      	beq.n	8003d30 <USB_ActivateEndpoint+0x504>
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1c:	b29c      	uxth	r4, r3
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	441a      	add	r2, r3
 8003d28:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <USB_ActivateEndpoint+0x570>)
 8003d2a:	4323      	orrs	r3, r4
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	b29c      	uxth	r4, r3
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <USB_ActivateEndpoint+0x56c>)
 8003d54:	4323      	orrs	r3, r4
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	78db      	ldrb	r3, [r3, #3]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d020      	beq.n	8003da4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d78:	b29c      	uxth	r4, r3
 8003d7a:	f084 0320 	eor.w	r3, r4, #32
 8003d7e:	b29c      	uxth	r4, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <USB_ActivateEndpoint+0x574>)
 8003d8c:	4323      	orrs	r3, r4
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	8013      	strh	r3, [r2, #0]
 8003d92:	e01c      	b.n	8003dce <USB_ActivateEndpoint+0x5a2>
 8003d94:	ffff8180 	.word	0xffff8180
 8003d98:	ffffc080 	.word	0xffffc080
 8003d9c:	ffff80c0 	.word	0xffff80c0
 8003da0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dba:	b29c      	uxth	r4, r3
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	441a      	add	r2, r3
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <USB_ActivateEndpoint+0x5d8>)
 8003dc8:	4323      	orrs	r3, r4
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	b29c      	uxth	r4, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <USB_ActivateEndpoint+0x5d8>)
 8003df2:	4323      	orrs	r3, r4
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc90      	pop	{r4, r7}
 8003e02:	4770      	bx	lr
 8003e04:	ffff8080 	.word	0xffff8080

08003e08 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e08:	b490      	push	{r4, r7}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	7b1b      	ldrb	r3, [r3, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d171      	bne.n	8003efe <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d036      	beq.n	8003e90 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29c      	uxth	r4, r3
 8003e30:	4623      	mov	r3, r4
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d014      	beq.n	8003e64 <USB_DeactivateEndpoint+0x5c>
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e50:	b29c      	uxth	r4, r3
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	441a      	add	r2, r3
 8003e5c:	4b6b      	ldr	r3, [pc, #428]	; (800400c <USB_DeactivateEndpoint+0x204>)
 8003e5e:	4323      	orrs	r3, r4
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e7a:	b29c      	uxth	r4, r3
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	4b62      	ldr	r3, [pc, #392]	; (8004010 <USB_DeactivateEndpoint+0x208>)
 8003e88:	4323      	orrs	r3, r4
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	8013      	strh	r3, [r2, #0]
 8003e8e:	e144      	b.n	800411a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29c      	uxth	r4, r3
 8003e9e:	4623      	mov	r3, r4
 8003ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d014      	beq.n	8003ed2 <USB_DeactivateEndpoint+0xca>
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	b29c      	uxth	r4, r3
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	4b52      	ldr	r3, [pc, #328]	; (8004014 <USB_DeactivateEndpoint+0x20c>)
 8003ecc:	4323      	orrs	r3, r4
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee8:	b29c      	uxth	r4, r3
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	441a      	add	r2, r3
 8003ef4:	4b46      	ldr	r3, [pc, #280]	; (8004010 <USB_DeactivateEndpoint+0x208>)
 8003ef6:	4323      	orrs	r3, r4
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	8013      	strh	r3, [r2, #0]
 8003efc:	e10d      	b.n	800411a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 8088 	bne.w	8004018 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29c      	uxth	r4, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d014      	beq.n	8003f4a <USB_DeactivateEndpoint+0x142>
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	b29c      	uxth	r4, r3
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	4b34      	ldr	r3, [pc, #208]	; (8004014 <USB_DeactivateEndpoint+0x20c>)
 8003f44:	4323      	orrs	r3, r4
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29c      	uxth	r4, r3
 8003f58:	4623      	mov	r3, r4
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d014      	beq.n	8003f8c <USB_DeactivateEndpoint+0x184>
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	b29c      	uxth	r4, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <USB_DeactivateEndpoint+0x204>)
 8003f86:	4323      	orrs	r3, r4
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	b29c      	uxth	r4, r3
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	4b17      	ldr	r3, [pc, #92]	; (800400c <USB_DeactivateEndpoint+0x204>)
 8003fb0:	4323      	orrs	r3, r4
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	b29c      	uxth	r4, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <USB_DeactivateEndpoint+0x208>)
 8003fda:	4323      	orrs	r3, r4
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff6:	b29c      	uxth	r4, r3
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	441a      	add	r2, r3
 8004002:	4b03      	ldr	r3, [pc, #12]	; (8004010 <USB_DeactivateEndpoint+0x208>)
 8004004:	4323      	orrs	r3, r4
 8004006:	b29b      	uxth	r3, r3
 8004008:	8013      	strh	r3, [r2, #0]
 800400a:	e086      	b.n	800411a <USB_DeactivateEndpoint+0x312>
 800400c:	ffff80c0 	.word	0xffff80c0
 8004010:	ffff8080 	.word	0xffff8080
 8004014:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29c      	uxth	r4, r3
 8004026:	4623      	mov	r3, r4
 8004028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d014      	beq.n	800405a <USB_DeactivateEndpoint+0x252>
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	b29c      	uxth	r4, r3
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	4b35      	ldr	r3, [pc, #212]	; (8004128 <USB_DeactivateEndpoint+0x320>)
 8004054:	4323      	orrs	r3, r4
 8004056:	b29b      	uxth	r3, r3
 8004058:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b29c      	uxth	r4, r3
 8004068:	4623      	mov	r3, r4
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d014      	beq.n	800409c <USB_DeactivateEndpoint+0x294>
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	b29c      	uxth	r4, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	4b25      	ldr	r3, [pc, #148]	; (800412c <USB_DeactivateEndpoint+0x324>)
 8004096:	4323      	orrs	r3, r4
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	b29c      	uxth	r4, r3
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <USB_DeactivateEndpoint+0x320>)
 80040c0:	4323      	orrs	r3, r4
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040dc:	b29c      	uxth	r4, r3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	441a      	add	r2, r3
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <USB_DeactivateEndpoint+0x328>)
 80040ea:	4323      	orrs	r3, r4
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	b29c      	uxth	r4, r3
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <USB_DeactivateEndpoint+0x328>)
 8004114:	4323      	orrs	r3, r4
 8004116:	b29b      	uxth	r3, r3
 8004118:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bc90      	pop	{r4, r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	ffffc080 	.word	0xffffc080
 800412c:	ffff80c0 	.word	0xffff80c0
 8004130:	ffff8080 	.word	0xffff8080

08004134 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b08d      	sub	sp, #52	; 0x34
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b01      	cmp	r3, #1
 8004144:	f040 8160 	bne.w	8004408 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d909      	bls.n	8004168 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	1ad2      	subs	r2, r2, r3
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	619a      	str	r2, [r3, #24]
 8004166:	e005      	b.n	8004174 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2200      	movs	r2, #0
 8004172:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	7b1b      	ldrb	r3, [r3, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d119      	bne.n	80041b0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6959      	ldr	r1, [r3, #20]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	88da      	ldrh	r2, [r3, #6]
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	b29b      	uxth	r3, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fba2 	bl	80048d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800418e:	687c      	ldr	r4, [r7, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004196:	b29b      	uxth	r3, r3
 8004198:	441c      	add	r4, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	4423      	add	r3, r4
 80041a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041a6:	461c      	mov	r4, r3
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8023      	strh	r3, [r4, #0]
 80041ae:	e10f      	b.n	80043d0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d065      	beq.n	8004292 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041c6:	687c      	ldr	r4, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	785b      	ldrb	r3, [r3, #1]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d148      	bne.n	8004262 <USB_EPStartXfer+0x12e>
 80041d0:	687c      	ldr	r4, [r7, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d8:	b29b      	uxth	r3, r3
 80041da:	441c      	add	r4, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	4423      	add	r3, r4
 80041e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041e8:	461c      	mov	r4, r3
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10e      	bne.n	800420e <USB_EPStartXfer+0xda>
 80041f0:	8823      	ldrh	r3, [r4, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	8023      	strh	r3, [r4, #0]
 80041fc:	8823      	ldrh	r3, [r4, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004208:	b29b      	uxth	r3, r3
 800420a:	8023      	strh	r3, [r4, #0]
 800420c:	e03d      	b.n	800428a <USB_EPStartXfer+0x156>
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	2b3e      	cmp	r3, #62	; 0x3e
 8004212:	d810      	bhi.n	8004236 <USB_EPStartXfer+0x102>
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <USB_EPStartXfer+0xf6>
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	3301      	adds	r3, #1
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	b29b      	uxth	r3, r3
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	b29b      	uxth	r3, r3
 8004232:	8023      	strh	r3, [r4, #0]
 8004234:	e029      	b.n	800428a <USB_EPStartXfer+0x156>
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <USB_EPStartXfer+0x118>
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	3b01      	subs	r3, #1
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	b29b      	uxth	r3, r3
 8004250:	029b      	lsls	r3, r3, #10
 8004252:	b29b      	uxth	r3, r3
 8004254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425c:	b29b      	uxth	r3, r3
 800425e:	8023      	strh	r3, [r4, #0]
 8004260:	e013      	b.n	800428a <USB_EPStartXfer+0x156>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d10f      	bne.n	800428a <USB_EPStartXfer+0x156>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004270:	b29b      	uxth	r3, r3
 8004272:	441c      	add	r4, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	4423      	add	r3, r4
 800427c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	895b      	ldrh	r3, [r3, #10]
 800428e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004290:	e063      	b.n	800435a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d148      	bne.n	800432c <USB_EPStartXfer+0x1f8>
 800429a:	687c      	ldr	r4, [r7, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	441c      	add	r4, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4423      	add	r3, r4
 80042ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042b2:	461c      	mov	r4, r3
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10e      	bne.n	80042d8 <USB_EPStartXfer+0x1a4>
 80042ba:	8823      	ldrh	r3, [r4, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	8023      	strh	r3, [r4, #0]
 80042c6:	8823      	ldrh	r3, [r4, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8023      	strh	r3, [r4, #0]
 80042d6:	e03d      	b.n	8004354 <USB_EPStartXfer+0x220>
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	2b3e      	cmp	r3, #62	; 0x3e
 80042dc:	d810      	bhi.n	8004300 <USB_EPStartXfer+0x1cc>
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <USB_EPStartXfer+0x1c0>
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	3301      	adds	r3, #1
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	029b      	lsls	r3, r3, #10
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	8023      	strh	r3, [r4, #0]
 80042fe:	e029      	b.n	8004354 <USB_EPStartXfer+0x220>
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <USB_EPStartXfer+0x1e2>
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	3b01      	subs	r3, #1
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	b29b      	uxth	r3, r3
 800431a:	029b      	lsls	r3, r3, #10
 800431c:	b29b      	uxth	r3, r3
 800431e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004326:	b29b      	uxth	r3, r3
 8004328:	8023      	strh	r3, [r4, #0]
 800432a:	e013      	b.n	8004354 <USB_EPStartXfer+0x220>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10f      	bne.n	8004354 <USB_EPStartXfer+0x220>
 8004334:	687c      	ldr	r4, [r7, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433c:	b29b      	uxth	r3, r3
 800433e:	441c      	add	r4, r3
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	4423      	add	r3, r4
 8004348:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800434c:	461c      	mov	r4, r3
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	b29b      	uxth	r3, r3
 8004352:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	891b      	ldrh	r3, [r3, #8]
 8004358:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6959      	ldr	r1, [r3, #20]
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	b29b      	uxth	r3, r3
 8004362:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fab4 	bl	80048d2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	785b      	ldrb	r3, [r3, #1]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d115      	bne.n	800439e <USB_EPStartXfer+0x26a>
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004388:	b29c      	uxth	r4, r3
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	441a      	add	r2, r3
 8004394:	4b9a      	ldr	r3, [pc, #616]	; (8004600 <USB_EPStartXfer+0x4cc>)
 8004396:	4323      	orrs	r3, r4
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]
 800439c:	e018      	b.n	80043d0 <USB_EPStartXfer+0x29c>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	785b      	ldrb	r3, [r3, #1]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d114      	bne.n	80043d0 <USB_EPStartXfer+0x29c>
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	b29c      	uxth	r4, r3
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	4b8e      	ldr	r3, [pc, #568]	; (8004604 <USB_EPStartXfer+0x4d0>)
 80043ca:	4323      	orrs	r3, r4
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e6:	b29c      	uxth	r4, r3
 80043e8:	f084 0310 	eor.w	r3, r4, #16
 80043ec:	b29c      	uxth	r4, r3
 80043ee:	f084 0320 	eor.w	r3, r4, #32
 80043f2:	b29c      	uxth	r4, r3
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	4b82      	ldr	r3, [pc, #520]	; (8004608 <USB_EPStartXfer+0x4d4>)
 8004400:	4323      	orrs	r3, r4
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]
 8004406:	e146      	b.n	8004696 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	429a      	cmp	r2, r3
 8004412:	d909      	bls.n	8004428 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	1ad2      	subs	r2, r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	619a      	str	r2, [r3, #24]
 8004426:	e005      	b.n	8004434 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2200      	movs	r2, #0
 8004432:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	7b1b      	ldrb	r3, [r3, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d148      	bne.n	80044ce <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800443c:	687c      	ldr	r4, [r7, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004444:	b29b      	uxth	r3, r3
 8004446:	441c      	add	r4, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	4423      	add	r3, r4
 8004450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004454:	461c      	mov	r4, r3
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10e      	bne.n	800447a <USB_EPStartXfer+0x346>
 800445c:	8823      	ldrh	r3, [r4, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004464:	b29b      	uxth	r3, r3
 8004466:	8023      	strh	r3, [r4, #0]
 8004468:	8823      	ldrh	r3, [r4, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004474:	b29b      	uxth	r3, r3
 8004476:	8023      	strh	r3, [r4, #0]
 8004478:	e0f2      	b.n	8004660 <USB_EPStartXfer+0x52c>
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	2b3e      	cmp	r3, #62	; 0x3e
 800447e:	d810      	bhi.n	80044a2 <USB_EPStartXfer+0x36e>
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <USB_EPStartXfer+0x362>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	3301      	adds	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	b29b      	uxth	r3, r3
 800449a:	029b      	lsls	r3, r3, #10
 800449c:	b29b      	uxth	r3, r3
 800449e:	8023      	strh	r3, [r4, #0]
 80044a0:	e0de      	b.n	8004660 <USB_EPStartXfer+0x52c>
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	61fb      	str	r3, [r7, #28]
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d102      	bne.n	80044b8 <USB_EPStartXfer+0x384>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	029b      	lsls	r3, r3, #10
 80044be:	b29b      	uxth	r3, r3
 80044c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8023      	strh	r3, [r4, #0]
 80044cc:	e0c8      	b.n	8004660 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d148      	bne.n	8004568 <USB_EPStartXfer+0x434>
 80044d6:	687c      	ldr	r4, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044de:	b29b      	uxth	r3, r3
 80044e0:	441c      	add	r4, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4423      	add	r3, r4
 80044ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044ee:	461c      	mov	r4, r3
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10e      	bne.n	8004514 <USB_EPStartXfer+0x3e0>
 80044f6:	8823      	ldrh	r3, [r4, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044fe:	b29b      	uxth	r3, r3
 8004500:	8023      	strh	r3, [r4, #0]
 8004502:	8823      	ldrh	r3, [r4, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450e:	b29b      	uxth	r3, r3
 8004510:	8023      	strh	r3, [r4, #0]
 8004512:	e03d      	b.n	8004590 <USB_EPStartXfer+0x45c>
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	2b3e      	cmp	r3, #62	; 0x3e
 8004518:	d810      	bhi.n	800453c <USB_EPStartXfer+0x408>
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <USB_EPStartXfer+0x3fc>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	3301      	adds	r3, #1
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	b29b      	uxth	r3, r3
 8004534:	029b      	lsls	r3, r3, #10
 8004536:	b29b      	uxth	r3, r3
 8004538:	8023      	strh	r3, [r4, #0]
 800453a:	e029      	b.n	8004590 <USB_EPStartXfer+0x45c>
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <USB_EPStartXfer+0x41e>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	3b01      	subs	r3, #1
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	b29b      	uxth	r3, r3
 8004556:	029b      	lsls	r3, r3, #10
 8004558:	b29b      	uxth	r3, r3
 800455a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800455e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004562:	b29b      	uxth	r3, r3
 8004564:	8023      	strh	r3, [r4, #0]
 8004566:	e013      	b.n	8004590 <USB_EPStartXfer+0x45c>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10f      	bne.n	8004590 <USB_EPStartXfer+0x45c>
 8004570:	687c      	ldr	r4, [r7, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004578:	b29b      	uxth	r3, r3
 800457a:	441c      	add	r4, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	4423      	add	r3, r4
 8004584:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004588:	461c      	mov	r4, r3
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	b29b      	uxth	r3, r3
 800458e:	8023      	strh	r3, [r4, #0]
 8004590:	687c      	ldr	r4, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d14e      	bne.n	8004638 <USB_EPStartXfer+0x504>
 800459a:	687c      	ldr	r4, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	441c      	add	r4, r3
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	4423      	add	r3, r4
 80045ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045b2:	461c      	mov	r4, r3
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10e      	bne.n	80045d8 <USB_EPStartXfer+0x4a4>
 80045ba:	8823      	ldrh	r3, [r4, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8023      	strh	r3, [r4, #0]
 80045c6:	8823      	ldrh	r3, [r4, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	8023      	strh	r3, [r4, #0]
 80045d6:	e043      	b.n	8004660 <USB_EPStartXfer+0x52c>
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	2b3e      	cmp	r3, #62	; 0x3e
 80045dc:	d816      	bhi.n	800460c <USB_EPStartXfer+0x4d8>
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <USB_EPStartXfer+0x4c0>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	3301      	adds	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	029b      	lsls	r3, r3, #10
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8023      	strh	r3, [r4, #0]
 80045fe:	e02f      	b.n	8004660 <USB_EPStartXfer+0x52c>
 8004600:	ffff80c0 	.word	0xffff80c0
 8004604:	ffffc080 	.word	0xffffc080
 8004608:	ffff8080 	.word	0xffff8080
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <USB_EPStartXfer+0x4ee>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	3b01      	subs	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	b29b      	uxth	r3, r3
 8004626:	029b      	lsls	r3, r3, #10
 8004628:	b29b      	uxth	r3, r3
 800462a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004632:	b29b      	uxth	r3, r3
 8004634:	8023      	strh	r3, [r4, #0]
 8004636:	e013      	b.n	8004660 <USB_EPStartXfer+0x52c>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10f      	bne.n	8004660 <USB_EPStartXfer+0x52c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004646:	b29b      	uxth	r3, r3
 8004648:	441c      	add	r4, r3
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	4423      	add	r3, r4
 8004652:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	b29a      	uxth	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	b29c      	uxth	r4, r3
 8004678:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800467c:	b29c      	uxth	r4, r3
 800467e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004682:	b29c      	uxth	r4, r3
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <USB_EPStartXfer+0x56c>)
 8004690:	4323      	orrs	r3, r4
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3734      	adds	r7, #52	; 0x34
 800469c:	46bd      	mov	sp, r7
 800469e:	bd90      	pop	{r4, r7, pc}
 80046a0:	ffff8080 	.word	0xffff8080

080046a4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046a4:	b490      	push	{r4, r7}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d018      	beq.n	80046e8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046cc:	b29c      	uxth	r4, r3
 80046ce:	f084 0310 	eor.w	r3, r4, #16
 80046d2:	b29c      	uxth	r4, r3
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <USB_EPSetStall+0x80>)
 80046e0:	4323      	orrs	r3, r4
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]
 80046e6:	e017      	b.n	8004718 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	b29c      	uxth	r4, r3
 8004700:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004704:	b29c      	uxth	r4, r3
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	441a      	add	r2, r3
 8004710:	4b04      	ldr	r3, [pc, #16]	; (8004724 <USB_EPSetStall+0x80>)
 8004712:	4323      	orrs	r3, r4
 8004714:	b29b      	uxth	r3, r3
 8004716:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bc90      	pop	{r4, r7}
 8004722:	4770      	bx	lr
 8004724:	ffff8080 	.word	0xffff8080

08004728 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004728:	b490      	push	{r4, r7}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	7b1b      	ldrb	r3, [r3, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d17d      	bne.n	8004836 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	785b      	ldrb	r3, [r3, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d03d      	beq.n	80047be <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29c      	uxth	r4, r3
 8004750:	4623      	mov	r3, r4
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d014      	beq.n	8004784 <USB_EPClearStall+0x5c>
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004770:	b29c      	uxth	r4, r3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	441a      	add	r2, r3
 800477c:	4b31      	ldr	r3, [pc, #196]	; (8004844 <USB_EPClearStall+0x11c>)
 800477e:	4323      	orrs	r3, r4
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	78db      	ldrb	r3, [r3, #3]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d054      	beq.n	8004836 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a2:	b29c      	uxth	r4, r3
 80047a4:	f084 0320 	eor.w	r3, r4, #32
 80047a8:	b29c      	uxth	r4, r3
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	441a      	add	r2, r3
 80047b4:	4b24      	ldr	r3, [pc, #144]	; (8004848 <USB_EPClearStall+0x120>)
 80047b6:	4323      	orrs	r3, r4
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8013      	strh	r3, [r2, #0]
 80047bc:	e03b      	b.n	8004836 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29c      	uxth	r4, r3
 80047cc:	4623      	mov	r3, r4
 80047ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d014      	beq.n	8004800 <USB_EPClearStall+0xd8>
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ec:	b29c      	uxth	r4, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	441a      	add	r2, r3
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <USB_EPClearStall+0x124>)
 80047fa:	4323      	orrs	r3, r4
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	b29c      	uxth	r4, r3
 8004818:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800481c:	b29c      	uxth	r4, r3
 800481e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004822:	b29c      	uxth	r4, r3
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <USB_EPClearStall+0x120>)
 8004830:	4323      	orrs	r3, r4
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bc90      	pop	{r4, r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	ffff80c0 	.word	0xffff80c0
 8004848:	ffff8080 	.word	0xffff8080
 800484c:	ffffc080 	.word	0xffffc080

08004850 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2280      	movs	r2, #128	; 0x80
 8004866:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr

0800489e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80048b0:	68fb      	ldr	r3, [r7, #12]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b08d      	sub	sp, #52	; 0x34
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	4611      	mov	r1, r2
 80048de:	461a      	mov	r2, r3
 80048e0:	460b      	mov	r3, r1
 80048e2:	80fb      	strh	r3, [r7, #6]
 80048e4:	4613      	mov	r3, r2
 80048e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80048e8:	88bb      	ldrh	r3, [r7, #4]
 80048ea:	3301      	adds	r3, #1
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	005a      	lsls	r2, r3, #1
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490a:	e01e      	b.n	800494a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	3301      	adds	r3, #1
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	b29a      	uxth	r2, r3
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	3302      	adds	r3, #2
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	3302      	adds	r3, #2
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	3301      	adds	r3, #1
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	3b01      	subs	r3, #1
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1dd      	bne.n	800490c <USB_WritePMA+0x3a>
  }
}
 8004950:	bf00      	nop
 8004952:	3734      	adds	r7, #52	; 0x34
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800495a:	b480      	push	{r7}
 800495c:	b08b      	sub	sp, #44	; 0x2c
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	4611      	mov	r1, r2
 8004966:	461a      	mov	r2, r3
 8004968:	460b      	mov	r3, r1
 800496a:	80fb      	strh	r3, [r7, #6]
 800496c:	4613      	mov	r3, r2
 800496e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004970:	88bb      	ldrh	r3, [r7, #4]
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	b29b      	uxth	r3, r3
 8004976:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	005a      	lsls	r2, r3, #1
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800498c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	e01b      	b.n	80049cc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	3302      	adds	r3, #2
 80049a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	3302      	adds	r3, #2
 80049c4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	3b01      	subs	r3, #1
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e0      	bne.n	8004994 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80049d2:	88bb      	ldrh	r3, [r7, #4]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	701a      	strb	r2, [r3, #0]
  }
}
 80049ee:	bf00      	nop
 80049f0:	372c      	adds	r7, #44	; 0x2c
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7c1b      	ldrb	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d115      	bne.n	8004a3c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a14:	2202      	movs	r2, #2
 8004a16:	2181      	movs	r1, #129	; 0x81
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f001 fe80 	bl	800671e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a28:	2202      	movs	r2, #2
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 fe76 	bl	800671e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004a3a:	e012      	b.n	8004a62 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a3c:	2340      	movs	r3, #64	; 0x40
 8004a3e:	2202      	movs	r2, #2
 8004a40:	2181      	movs	r1, #129	; 0x81
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 fe6b 	bl	800671e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a4e:	2340      	movs	r3, #64	; 0x40
 8004a50:	2202      	movs	r2, #2
 8004a52:	2101      	movs	r1, #1
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f001 fe62 	bl	800671e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004a62:	2308      	movs	r3, #8
 8004a64:	2203      	movs	r2, #3
 8004a66:	2182      	movs	r1, #130	; 0x82
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f001 fe58 	bl	800671e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a78:	f001 ff72 	bl	8006960 <USBD_static_malloc>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	e026      	b.n	8004ae2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a9a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	7c1b      	ldrb	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac8:	2101      	movs	r1, #1
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 ff11 	bl	80068f2 <USBD_LL_PrepareReceive>
 8004ad0:	e007      	b.n	8004ae2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ad8:	2340      	movs	r3, #64	; 0x40
 8004ada:	2101      	movs	r1, #1
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f001 ff08 	bl	80068f2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004afc:	2181      	movs	r1, #129	; 0x81
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f001 fe33 	bl	800676a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f001 fe2c 	bl	800676a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b1a:	2182      	movs	r1, #130	; 0x82
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f001 fe24 	bl	800676a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00e      	beq.n	8004b50 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 ff18 	bl	8006978 <USBD_static_free>
    pdev->pClassData = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b086      	sub	sp, #24
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b6a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d039      	beq.n	8004bf8 <USBD_CDC_Setup+0x9e>
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d17c      	bne.n	8004c82 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	88db      	ldrh	r3, [r3, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d029      	beq.n	8004be4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	b25b      	sxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da11      	bge.n	8004bbe <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004ba6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	88d2      	ldrh	r2, [r2, #6]
 8004bac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004bae:	6939      	ldr	r1, [r7, #16]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	88db      	ldrh	r3, [r3, #6]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f001 f9f6 	bl	8005fa8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004bbc:	e068      	b.n	8004c90 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	785a      	ldrb	r2, [r3, #1]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	88db      	ldrh	r3, [r3, #6]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004bd4:	6939      	ldr	r1, [r7, #16]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	88db      	ldrh	r3, [r3, #6]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f001 fa11 	bl	8006004 <USBD_CtlPrepareRx>
      break;
 8004be2:	e055      	b.n	8004c90 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	7850      	ldrb	r0, [r2, #1]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	6839      	ldr	r1, [r7, #0]
 8004bf4:	4798      	blx	r3
      break;
 8004bf6:	e04b      	b.n	8004c90 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b0a      	cmp	r3, #10
 8004bfe:	d017      	beq.n	8004c30 <USBD_CDC_Setup+0xd6>
 8004c00:	2b0b      	cmp	r3, #11
 8004c02:	d029      	beq.n	8004c58 <USBD_CDC_Setup+0xfe>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d133      	bne.n	8004c70 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d107      	bne.n	8004c22 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004c12:	f107 030c 	add.w	r3, r7, #12
 8004c16:	2202      	movs	r2, #2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f001 f9c4 	bl	8005fa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c20:	e02e      	b.n	8004c80 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004c22:	6839      	ldr	r1, [r7, #0]
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 f955 	bl	8005ed4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c2e:	e027      	b.n	8004c80 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d107      	bne.n	8004c4a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c3a:	f107 030f 	add.w	r3, r7, #15
 8004c3e:	2201      	movs	r2, #1
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f001 f9b0 	bl	8005fa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c48:	e01a      	b.n	8004c80 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f001 f941 	bl	8005ed4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c52:	2302      	movs	r3, #2
 8004c54:	75fb      	strb	r3, [r7, #23]
          break;
 8004c56:	e013      	b.n	8004c80 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d00d      	beq.n	8004c7e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 f935 	bl	8005ed4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004c6e:	e006      	b.n	8004c7e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 f92e 	bl	8005ed4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	75fb      	strb	r3, [r7, #23]
          break;
 8004c7c:	e000      	b.n	8004c80 <USBD_CDC_Setup+0x126>
          break;
 8004c7e:	bf00      	nop
      }
      break;
 8004c80:	e006      	b.n	8004c90 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f001 f925 	bl	8005ed4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8e:	bf00      	nop
  }

  return ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cb4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d037      	beq.n	8004d30 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	331c      	adds	r3, #28
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d026      	beq.n	8004d24 <USBD_CDC_DataIn+0x8a>
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	331c      	adds	r3, #28
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	0152      	lsls	r2, r2, #5
 8004cee:	440a      	add	r2, r1
 8004cf0:	3238      	adds	r2, #56	; 0x38
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cf8:	fb02 f201 	mul.w	r2, r2, r1
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d110      	bne.n	8004d24 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	331c      	adds	r3, #28
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d16:	78f9      	ldrb	r1, [r7, #3]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f001 fdc5 	bl	80068ac <USBD_LL_Transmit>
 8004d22:	e003      	b.n	8004d2c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f001 fdf0 	bl	8006938 <USBD_LL_GetRxDataSize>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4798      	blx	r3

    return USBD_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e000      	b.n	8004d88 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004d86:	2302      	movs	r3, #2
  }
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d9e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d015      	beq.n	8004dd6 <USBD_CDC_EP0_RxReady+0x46>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004db0:	2bff      	cmp	r3, #255	; 0xff
 8004db2:	d010      	beq.n	8004dd6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004dc2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2243      	movs	r2, #67	; 0x43
 8004dec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004dee:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	200000a0 	.word	0x200000a0

08004e00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2243      	movs	r2, #67	; 0x43
 8004e0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004e0e:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	2000005c 	.word	0x2000005c

08004e20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2243      	movs	r2, #67	; 0x43
 8004e2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004e2e:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	200000e4 	.word	0x200000e4

08004e40 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	220a      	movs	r2, #10
 8004e4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004e4e:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000018 	.word	0x20000018

08004e60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ece:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01c      	beq.n	8004f38 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d115      	bne.n	8004f34 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2181      	movs	r1, #129	; 0x81
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f001 fcbe 	bl	80068ac <USBD_LL_Transmit>

      return USBD_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e002      	b.n	8004f3a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004f38:	2302      	movs	r3, #2
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d017      	beq.n	8004f8c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	7c1b      	ldrb	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f6e:	2101      	movs	r1, #1
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 fcbe 	bl	80068f2 <USBD_LL_PrepareReceive>
 8004f76:	e007      	b.n	8004f88 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	2101      	movs	r1, #1
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 fcb5 	bl	80068f2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004faa:	2302      	movs	r3, #2
 8004fac:	e01a      	b.n	8004fe4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	79fa      	ldrb	r2, [r7, #7]
 8004fda:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f001 fb29 	bl	8006634 <USBD_LL_Init>

  return USBD_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d006      	beq.n	800500e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e001      	b.n	8005012 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800500e:	2302      	movs	r3, #2
 8005010:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005012:	7bfb      	ldrb	r3, [r7, #15]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 fb5e 	bl	80066e8 <USBD_LL_Start>

  return USBD_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005056:	2302      	movs	r3, #2
 8005058:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00c      	beq.n	800507e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	78fa      	ldrb	r2, [r7, #3]
 800506e:	4611      	mov	r1, r2
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800507e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	4611      	mov	r1, r2
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3

  return USBD_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fecb 	bl	8005e5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80050d4:	461a      	mov	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d00c      	beq.n	8005104 <USBD_LL_SetupStage+0x56>
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d302      	bcc.n	80050f4 <USBD_LL_SetupStage+0x46>
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d010      	beq.n	8005114 <USBD_LL_SetupStage+0x66>
 80050f2:	e017      	b.n	8005124 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f9cb 	bl	8005498 <USBD_StdDevReq>
      break;
 8005102:	e01a      	b.n	800513a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fa2d 	bl	800556c <USBD_StdItfReq>
      break;
 8005112:	e012      	b.n	800513a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fa6b 	bl	80055f8 <USBD_StdEPReq>
      break;
 8005122:	e00a      	b.n	800513a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800512a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800512e:	b2db      	uxtb	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f001 fb38 	bl	80067a8 <USBD_LL_StallEP>
      break;
 8005138:	bf00      	nop
  }

  return USBD_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	460b      	mov	r3, r1
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005152:	7afb      	ldrb	r3, [r7, #11]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d14b      	bne.n	80051f0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800515e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005166:	2b03      	cmp	r3, #3
 8005168:	d134      	bne.n	80051d4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	429a      	cmp	r2, r3
 8005174:	d919      	bls.n	80051aa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800518c:	429a      	cmp	r2, r3
 800518e:	d203      	bcs.n	8005198 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005194:	b29b      	uxth	r3, r3
 8005196:	e002      	b.n	800519e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800519c:	b29b      	uxth	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 ff4c 	bl	8006040 <USBD_CtlContinueRx>
 80051a8:	e038      	b.n	800521c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d105      	bne.n	80051cc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 ff49 	bl	8006064 <USBD_CtlSendStatus>
 80051d2:	e023      	b.n	800521c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d11e      	bne.n	800521c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80051e6:	2100      	movs	r1, #0
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f001 fadd 	bl	80067a8 <USBD_LL_StallEP>
 80051ee:	e015      	b.n	800521c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005202:	2b03      	cmp	r3, #3
 8005204:	d108      	bne.n	8005218 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	7afa      	ldrb	r2, [r7, #11]
 8005210:	4611      	mov	r1, r2
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	4798      	blx	r3
 8005216:	e001      	b.n	800521c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005218:	2302      	movs	r3, #2
 800521a:	e000      	b.n	800521e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	460b      	mov	r3, r1
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005234:	7afb      	ldrb	r3, [r7, #11]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d17f      	bne.n	800533a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3314      	adds	r3, #20
 800523e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005246:	2b02      	cmp	r3, #2
 8005248:	d15c      	bne.n	8005304 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	429a      	cmp	r2, r3
 8005254:	d915      	bls.n	8005282 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	b29b      	uxth	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 feb6 	bl	8005fe0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005274:	2300      	movs	r3, #0
 8005276:	2200      	movs	r2, #0
 8005278:	2100      	movs	r1, #0
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f001 fb39 	bl	80068f2 <USBD_LL_PrepareReceive>
 8005280:	e04e      	b.n	8005320 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	6912      	ldr	r2, [r2, #16]
 800528a:	fbb3 f1f2 	udiv	r1, r3, r2
 800528e:	fb02 f201 	mul.w	r2, r2, r1
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d11c      	bne.n	80052d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d316      	bcc.n	80052d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d20f      	bcs.n	80052d2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052b2:	2200      	movs	r2, #0
 80052b4:	2100      	movs	r1, #0
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fe92 	bl	8005fe0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052c4:	2300      	movs	r3, #0
 80052c6:	2200      	movs	r2, #0
 80052c8:	2100      	movs	r1, #0
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f001 fb11 	bl	80068f2 <USBD_LL_PrepareReceive>
 80052d0:	e026      	b.n	8005320 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d105      	bne.n	80052f4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80052f4:	2180      	movs	r1, #128	; 0x80
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f001 fa56 	bl	80067a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fec4 	bl	800608a <USBD_CtlReceiveStatus>
 8005302:	e00d      	b.n	8005320 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800530a:	2b04      	cmp	r3, #4
 800530c:	d004      	beq.n	8005318 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005314:	2b00      	cmp	r3, #0
 8005316:	d103      	bne.n	8005320 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005318:	2180      	movs	r1, #128	; 0x80
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f001 fa44 	bl	80067a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005326:	2b01      	cmp	r3, #1
 8005328:	d11d      	bne.n	8005366 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff fe83 	bl	8005036 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005338:	e015      	b.n	8005366 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00d      	beq.n	8005362 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800534c:	2b03      	cmp	r3, #3
 800534e:	d108      	bne.n	8005362 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	7afa      	ldrb	r2, [r7, #11]
 800535a:	4611      	mov	r1, r2
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	4798      	blx	r3
 8005360:	e001      	b.n	8005366 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005362:	2302      	movs	r3, #2
 8005364:	e000      	b.n	8005368 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005378:	2340      	movs	r3, #64	; 0x40
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f001 f9cd 	bl	800671e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2240      	movs	r2, #64	; 0x40
 8005390:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	2200      	movs	r2, #0
 8005398:	2180      	movs	r1, #128	; 0x80
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 f9bf 	bl	800671e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2240      	movs	r2, #64	; 0x40
 80053aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d009      	beq.n	80053e8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6852      	ldr	r2, [r2, #4]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	4611      	mov	r1, r2
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	4798      	blx	r3
  }

  return USBD_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2204      	movs	r2, #4
 8005428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005446:	2b04      	cmp	r3, #4
 8005448:	d105      	bne.n	8005456 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005470:	2b03      	cmp	r3, #3
 8005472:	d10b      	bne.n	800548c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d004      	beq.n	80054bc <USBD_StdDevReq+0x24>
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d002      	beq.n	80054bc <USBD_StdDevReq+0x24>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <USBD_StdDevReq+0x34>
 80054ba:	e04c      	b.n	8005556 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
      break;
 80054ca:	e049      	b.n	8005560 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b09      	cmp	r3, #9
 80054d2:	d83a      	bhi.n	800554a <USBD_StdDevReq+0xb2>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <USBD_StdDevReq+0x44>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	0800552d 	.word	0x0800552d
 80054e0:	08005541 	.word	0x08005541
 80054e4:	0800554b 	.word	0x0800554b
 80054e8:	08005537 	.word	0x08005537
 80054ec:	0800554b 	.word	0x0800554b
 80054f0:	0800550f 	.word	0x0800550f
 80054f4:	08005505 	.word	0x08005505
 80054f8:	0800554b 	.word	0x0800554b
 80054fc:	08005523 	.word	0x08005523
 8005500:	08005519 	.word	0x08005519
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f9d4 	bl	80058b4 <USBD_GetDescriptor>
          break;
 800550c:	e022      	b.n	8005554 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fb37 	bl	8005b84 <USBD_SetAddress>
          break;
 8005516:	e01d      	b.n	8005554 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fb74 	bl	8005c08 <USBD_SetConfig>
          break;
 8005520:	e018      	b.n	8005554 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fbfd 	bl	8005d24 <USBD_GetConfig>
          break;
 800552a:	e013      	b.n	8005554 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fc2c 	bl	8005d8c <USBD_GetStatus>
          break;
 8005534:	e00e      	b.n	8005554 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fc5a 	bl	8005df2 <USBD_SetFeature>
          break;
 800553e:	e009      	b.n	8005554 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fc69 	bl	8005e1a <USBD_ClrFeature>
          break;
 8005548:	e004      	b.n	8005554 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fcc1 	bl	8005ed4 <USBD_CtlError>
          break;
 8005552:	bf00      	nop
      }
      break;
 8005554:	e004      	b.n	8005560 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fcbb 	bl	8005ed4 <USBD_CtlError>
      break;
 800555e:	bf00      	nop
  }

  return ret;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop

0800556c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005582:	2b20      	cmp	r3, #32
 8005584:	d003      	beq.n	800558e <USBD_StdItfReq+0x22>
 8005586:	2b40      	cmp	r3, #64	; 0x40
 8005588:	d001      	beq.n	800558e <USBD_StdItfReq+0x22>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d12a      	bne.n	80055e4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005594:	3b01      	subs	r3, #1
 8005596:	2b02      	cmp	r3, #2
 8005598:	d81d      	bhi.n	80055d6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	889b      	ldrh	r3, [r3, #4]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d813      	bhi.n	80055cc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	88db      	ldrh	r3, [r3, #6]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d110      	bne.n	80055e0 <USBD_StdItfReq+0x74>
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10d      	bne.n	80055e0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fd4d 	bl	8006064 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80055ca:	e009      	b.n	80055e0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fc80 	bl	8005ed4 <USBD_CtlError>
          break;
 80055d4:	e004      	b.n	80055e0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fc7b 	bl	8005ed4 <USBD_CtlError>
          break;
 80055de:	e000      	b.n	80055e2 <USBD_StdItfReq+0x76>
          break;
 80055e0:	bf00      	nop
      }
      break;
 80055e2:	e004      	b.n	80055ee <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fc74 	bl	8005ed4 <USBD_CtlError>
      break;
 80055ec:	bf00      	nop
  }

  return USBD_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	889b      	ldrh	r3, [r3, #4]
 800560a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005614:	2b20      	cmp	r3, #32
 8005616:	d004      	beq.n	8005622 <USBD_StdEPReq+0x2a>
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d002      	beq.n	8005622 <USBD_StdEPReq+0x2a>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <USBD_StdEPReq+0x3a>
 8005620:	e13d      	b.n	800589e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
      break;
 8005630:	e13a      	b.n	80058a8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800563a:	2b20      	cmp	r3, #32
 800563c:	d10a      	bne.n	8005654 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	4798      	blx	r3
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	e12a      	b.n	80058aa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d03e      	beq.n	80056da <USBD_StdEPReq+0xe2>
 800565c:	2b03      	cmp	r3, #3
 800565e:	d002      	beq.n	8005666 <USBD_StdEPReq+0x6e>
 8005660:	2b00      	cmp	r3, #0
 8005662:	d070      	beq.n	8005746 <USBD_StdEPReq+0x14e>
 8005664:	e115      	b.n	8005892 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800566c:	2b02      	cmp	r3, #2
 800566e:	d002      	beq.n	8005676 <USBD_StdEPReq+0x7e>
 8005670:	2b03      	cmp	r3, #3
 8005672:	d015      	beq.n	80056a0 <USBD_StdEPReq+0xa8>
 8005674:	e02b      	b.n	80056ce <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005676:	7bbb      	ldrb	r3, [r7, #14]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00c      	beq.n	8005696 <USBD_StdEPReq+0x9e>
 800567c:	7bbb      	ldrb	r3, [r7, #14]
 800567e:	2b80      	cmp	r3, #128	; 0x80
 8005680:	d009      	beq.n	8005696 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005682:	7bbb      	ldrb	r3, [r7, #14]
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f001 f88e 	bl	80067a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 f88a 	bl	80067a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005694:	e020      	b.n	80056d8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fc1b 	bl	8005ed4 <USBD_CtlError>
              break;
 800569e:	e01b      	b.n	80056d8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	885b      	ldrh	r3, [r3, #2]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10e      	bne.n	80056c6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80056a8:	7bbb      	ldrb	r3, [r7, #14]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00b      	beq.n	80056c6 <USBD_StdEPReq+0xce>
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	2b80      	cmp	r3, #128	; 0x80
 80056b2:	d008      	beq.n	80056c6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	88db      	ldrh	r3, [r3, #6]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80056bc:	7bbb      	ldrb	r3, [r7, #14]
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 f871 	bl	80067a8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fccc 	bl	8006064 <USBD_CtlSendStatus>

              break;
 80056cc:	e004      	b.n	80056d8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fbff 	bl	8005ed4 <USBD_CtlError>
              break;
 80056d6:	bf00      	nop
          }
          break;
 80056d8:	e0e0      	b.n	800589c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d002      	beq.n	80056ea <USBD_StdEPReq+0xf2>
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d015      	beq.n	8005714 <USBD_StdEPReq+0x11c>
 80056e8:	e026      	b.n	8005738 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056ea:	7bbb      	ldrb	r3, [r7, #14]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00c      	beq.n	800570a <USBD_StdEPReq+0x112>
 80056f0:	7bbb      	ldrb	r3, [r7, #14]
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d009      	beq.n	800570a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80056f6:	7bbb      	ldrb	r3, [r7, #14]
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f001 f854 	bl	80067a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005700:	2180      	movs	r1, #128	; 0x80
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f001 f850 	bl	80067a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005708:	e01c      	b.n	8005744 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fbe1 	bl	8005ed4 <USBD_CtlError>
              break;
 8005712:	e017      	b.n	8005744 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	885b      	ldrh	r3, [r3, #2]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d112      	bne.n	8005742 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005726:	7bbb      	ldrb	r3, [r7, #14]
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 f85b 	bl	80067e6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fc97 	bl	8006064 <USBD_CtlSendStatus>
              }
              break;
 8005736:	e004      	b.n	8005742 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005738:	6839      	ldr	r1, [r7, #0]
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fbca 	bl	8005ed4 <USBD_CtlError>
              break;
 8005740:	e000      	b.n	8005744 <USBD_StdEPReq+0x14c>
              break;
 8005742:	bf00      	nop
          }
          break;
 8005744:	e0aa      	b.n	800589c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574c:	2b02      	cmp	r3, #2
 800574e:	d002      	beq.n	8005756 <USBD_StdEPReq+0x15e>
 8005750:	2b03      	cmp	r3, #3
 8005752:	d032      	beq.n	80057ba <USBD_StdEPReq+0x1c2>
 8005754:	e097      	b.n	8005886 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005756:	7bbb      	ldrb	r3, [r7, #14]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <USBD_StdEPReq+0x174>
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	2b80      	cmp	r3, #128	; 0x80
 8005760:	d004      	beq.n	800576c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fbb5 	bl	8005ed4 <USBD_CtlError>
                break;
 800576a:	e091      	b.n	8005890 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800576c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005770:	2b00      	cmp	r3, #0
 8005772:	da0b      	bge.n	800578c <USBD_StdEPReq+0x194>
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	3310      	adds	r3, #16
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	4413      	add	r3, r2
 8005788:	3304      	adds	r3, #4
 800578a:	e00b      	b.n	80057a4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2202      	movs	r2, #2
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fbf8 	bl	8005fa8 <USBD_CtlSendData>
              break;
 80057b8:	e06a      	b.n	8005890 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80057ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da11      	bge.n	80057e6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3318      	adds	r3, #24
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d117      	bne.n	800580c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fb78 	bl	8005ed4 <USBD_CtlError>
                  break;
 80057e4:	e054      	b.n	8005890 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80057e6:	7bbb      	ldrb	r3, [r7, #14]
 80057e8:	f003 020f 	and.w	r2, r3, #15
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fb65 	bl	8005ed4 <USBD_CtlError>
                  break;
 800580a:	e041      	b.n	8005890 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800580c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005810:	2b00      	cmp	r3, #0
 8005812:	da0b      	bge.n	800582c <USBD_StdEPReq+0x234>
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	3310      	adds	r3, #16
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4413      	add	r3, r2
 8005828:	3304      	adds	r3, #4
 800582a:	e00b      	b.n	8005844 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4413      	add	r3, r2
 8005842:	3304      	adds	r3, #4
 8005844:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <USBD_StdEPReq+0x25a>
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	2b80      	cmp	r3, #128	; 0x80
 8005850:	d103      	bne.n	800585a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e00e      	b.n	8005878 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800585a:	7bbb      	ldrb	r3, [r7, #14]
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 ffe0 	bl	8006824 <USBD_LL_IsStallEP>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e002      	b.n	8005878 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2202      	movs	r2, #2
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fb92 	bl	8005fa8 <USBD_CtlSendData>
              break;
 8005884:	e004      	b.n	8005890 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fb23 	bl	8005ed4 <USBD_CtlError>
              break;
 800588e:	bf00      	nop
          }
          break;
 8005890:	e004      	b.n	800589c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb1d 	bl	8005ed4 <USBD_CtlError>
          break;
 800589a:	bf00      	nop
      }
      break;
 800589c:	e004      	b.n	80058a8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fb17 	bl	8005ed4 <USBD_CtlError>
      break;
 80058a6:	bf00      	nop
  }

  return ret;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	885b      	ldrh	r3, [r3, #2]
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	2b06      	cmp	r3, #6
 80058d6:	f200 8128 	bhi.w	8005b2a <USBD_GetDescriptor+0x276>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <USBD_GetDescriptor+0x2c>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	080058fd 	.word	0x080058fd
 80058e4:	08005915 	.word	0x08005915
 80058e8:	08005955 	.word	0x08005955
 80058ec:	08005b2b 	.word	0x08005b2b
 80058f0:	08005b2b 	.word	0x08005b2b
 80058f4:	08005acb 	.word	0x08005acb
 80058f8:	08005af7 	.word	0x08005af7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	7c12      	ldrb	r2, [r2, #16]
 8005908:	f107 0108 	add.w	r1, r7, #8
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
 8005910:	60f8      	str	r0, [r7, #12]
      break;
 8005912:	e112      	b.n	8005b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	7c1b      	ldrb	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10d      	bne.n	8005938 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	f107 0208 	add.w	r2, r7, #8
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
 800592c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3301      	adds	r3, #1
 8005932:	2202      	movs	r2, #2
 8005934:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005936:	e100      	b.n	8005b3a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f107 0208 	add.w	r2, r7, #8
 8005944:	4610      	mov	r0, r2
 8005946:	4798      	blx	r3
 8005948:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3301      	adds	r3, #1
 800594e:	2202      	movs	r2, #2
 8005950:	701a      	strb	r2, [r3, #0]
      break;
 8005952:	e0f2      	b.n	8005b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	885b      	ldrh	r3, [r3, #2]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b05      	cmp	r3, #5
 800595c:	f200 80ac 	bhi.w	8005ab8 <USBD_GetDescriptor+0x204>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <USBD_GetDescriptor+0xb4>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005981 	.word	0x08005981
 800596c:	080059b5 	.word	0x080059b5
 8005970:	080059e9 	.word	0x080059e9
 8005974:	08005a1d 	.word	0x08005a1d
 8005978:	08005a51 	.word	0x08005a51
 800597c:	08005a85 	.word	0x08005a85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	7c12      	ldrb	r2, [r2, #16]
 8005998:	f107 0108 	add.w	r1, r7, #8
 800599c:	4610      	mov	r0, r2
 800599e:	4798      	blx	r3
 80059a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059a2:	e091      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fa94 	bl	8005ed4 <USBD_CtlError>
            err++;
 80059ac:	7afb      	ldrb	r3, [r7, #11]
 80059ae:	3301      	adds	r3, #1
 80059b0:	72fb      	strb	r3, [r7, #11]
          break;
 80059b2:	e089      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	7c12      	ldrb	r2, [r2, #16]
 80059cc:	f107 0108 	add.w	r1, r7, #8
 80059d0:	4610      	mov	r0, r2
 80059d2:	4798      	blx	r3
 80059d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059d6:	e077      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa7a 	bl	8005ed4 <USBD_CtlError>
            err++;
 80059e0:	7afb      	ldrb	r3, [r7, #11]
 80059e2:	3301      	adds	r3, #1
 80059e4:	72fb      	strb	r3, [r7, #11]
          break;
 80059e6:	e06f      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	7c12      	ldrb	r2, [r2, #16]
 8005a00:	f107 0108 	add.w	r1, r7, #8
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
 8005a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a0a:	e05d      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa60 	bl	8005ed4 <USBD_CtlError>
            err++;
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	3301      	adds	r3, #1
 8005a18:	72fb      	strb	r3, [r7, #11]
          break;
 8005a1a:	e055      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	7c12      	ldrb	r2, [r2, #16]
 8005a34:	f107 0108 	add.w	r1, r7, #8
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4798      	blx	r3
 8005a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a3e:	e043      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa46 	bl	8005ed4 <USBD_CtlError>
            err++;
 8005a48:	7afb      	ldrb	r3, [r7, #11]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005a4e:	e03b      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	7c12      	ldrb	r2, [r2, #16]
 8005a68:	f107 0108 	add.w	r1, r7, #8
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
 8005a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a72:	e029      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa2c 	bl	8005ed4 <USBD_CtlError>
            err++;
 8005a7c:	7afb      	ldrb	r3, [r7, #11]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	72fb      	strb	r3, [r7, #11]
          break;
 8005a82:	e021      	b.n	8005ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	7c12      	ldrb	r2, [r2, #16]
 8005a9c:	f107 0108 	add.w	r1, r7, #8
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4798      	blx	r3
 8005aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aa6:	e00f      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa12 	bl	8005ed4 <USBD_CtlError>
            err++;
 8005ab0:	7afb      	ldrb	r3, [r7, #11]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ab6:	e007      	b.n	8005ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa0a 	bl	8005ed4 <USBD_CtlError>
          err++;
 8005ac0:	7afb      	ldrb	r3, [r7, #11]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005ac6:	e038      	b.n	8005b3a <USBD_GetDescriptor+0x286>
 8005ac8:	e037      	b.n	8005b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7c1b      	ldrb	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ada:	f107 0208 	add.w	r2, r7, #8
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4798      	blx	r3
 8005ae2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ae4:	e029      	b.n	8005b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f9f3 	bl	8005ed4 <USBD_CtlError>
        err++;
 8005aee:	7afb      	ldrb	r3, [r7, #11]
 8005af0:	3301      	adds	r3, #1
 8005af2:	72fb      	strb	r3, [r7, #11]
      break;
 8005af4:	e021      	b.n	8005b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	7c1b      	ldrb	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10d      	bne.n	8005b1a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	f107 0208 	add.w	r2, r7, #8
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4798      	blx	r3
 8005b0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	2207      	movs	r2, #7
 8005b16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b18:	e00f      	b.n	8005b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f9d9 	bl	8005ed4 <USBD_CtlError>
        err++;
 8005b22:	7afb      	ldrb	r3, [r7, #11]
 8005b24:	3301      	adds	r3, #1
 8005b26:	72fb      	strb	r3, [r7, #11]
      break;
 8005b28:	e007      	b.n	8005b3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f9d1 	bl	8005ed4 <USBD_CtlError>
      err++;
 8005b32:	7afb      	ldrb	r3, [r7, #11]
 8005b34:	3301      	adds	r3, #1
 8005b36:	72fb      	strb	r3, [r7, #11]
      break;
 8005b38:	bf00      	nop
  }

  if (err != 0U)
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d11c      	bne.n	8005b7a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005b40:	893b      	ldrh	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d011      	beq.n	8005b6a <USBD_GetDescriptor+0x2b6>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	88db      	ldrh	r3, [r3, #6]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00d      	beq.n	8005b6a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	88da      	ldrh	r2, [r3, #6]
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	4293      	cmp	r3, r2
 8005b56:	bf28      	it	cs
 8005b58:	4613      	movcs	r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b5e:	893b      	ldrh	r3, [r7, #8]
 8005b60:	461a      	mov	r2, r3
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fa1f 	bl	8005fa8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	88db      	ldrh	r3, [r3, #6]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d104      	bne.n	8005b7c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fa76 	bl	8006064 <USBD_CtlSendStatus>
 8005b78:	e000      	b.n	8005b7c <USBD_GetDescriptor+0x2c8>
    return;
 8005b7a:	bf00      	nop
    }
  }
}
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop

08005b84 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	889b      	ldrh	r3, [r3, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d130      	bne.n	8005bf8 <USBD_SetAddress+0x74>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	88db      	ldrh	r3, [r3, #6]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d12c      	bne.n	8005bf8 <USBD_SetAddress+0x74>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	885b      	ldrh	r3, [r3, #2]
 8005ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba4:	d828      	bhi.n	8005bf8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	885b      	ldrh	r3, [r3, #2]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d104      	bne.n	8005bc6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f988 	bl	8005ed4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc4:	e01c      	b.n	8005c00 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	7bfa      	ldrb	r2, [r7, #15]
 8005bca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fe4b 	bl	800686e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fa43 	bl	8006064 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bec:	e008      	b.n	8005c00 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf6:	e003      	b.n	8005c00 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f96a 	bl	8005ed4 <USBD_CtlError>
  }
}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	885b      	ldrh	r3, [r3, #2]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	4b41      	ldr	r3, [pc, #260]	; (8005d20 <USBD_SetConfig+0x118>)
 8005c1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c1c:	4b40      	ldr	r3, [pc, #256]	; (8005d20 <USBD_SetConfig+0x118>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d904      	bls.n	8005c2e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f954 	bl	8005ed4 <USBD_CtlError>
 8005c2c:	e075      	b.n	8005d1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d002      	beq.n	8005c3e <USBD_SetConfig+0x36>
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d023      	beq.n	8005c84 <USBD_SetConfig+0x7c>
 8005c3c:	e062      	b.n	8005d04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005c3e:	4b38      	ldr	r3, [pc, #224]	; (8005d20 <USBD_SetConfig+0x118>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01a      	beq.n	8005c7c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005c46:	4b36      	ldr	r3, [pc, #216]	; (8005d20 <USBD_SetConfig+0x118>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2203      	movs	r2, #3
 8005c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c58:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <USBD_SetConfig+0x118>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff f9f3 	bl	800504a <USBD_SetClassConfig>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d104      	bne.n	8005c74 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f931 	bl	8005ed4 <USBD_CtlError>
            return;
 8005c72:	e052      	b.n	8005d1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9f5 	bl	8006064 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005c7a:	e04e      	b.n	8005d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f9f1 	bl	8006064 <USBD_CtlSendStatus>
        break;
 8005c82:	e04a      	b.n	8005d1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005c84:	4b26      	ldr	r3, [pc, #152]	; (8005d20 <USBD_SetConfig+0x118>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d112      	bne.n	8005cb2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005c94:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <USBD_SetConfig+0x118>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005c9e:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <USBD_SetConfig+0x118>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff f9ef 	bl	8005088 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f9da 	bl	8006064 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005cb0:	e033      	b.n	8005d1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <USBD_SetConfig+0x118>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d01d      	beq.n	8005cfc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff f9dd 	bl	8005088 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005cce:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <USBD_SetConfig+0x118>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005cd8:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <USBD_SetConfig+0x118>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff f9b3 	bl	800504a <USBD_SetClassConfig>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d104      	bne.n	8005cf4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8f1 	bl	8005ed4 <USBD_CtlError>
            return;
 8005cf2:	e012      	b.n	8005d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f9b5 	bl	8006064 <USBD_CtlSendStatus>
        break;
 8005cfa:	e00e      	b.n	8005d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f9b1 	bl	8006064 <USBD_CtlSendStatus>
        break;
 8005d02:	e00a      	b.n	8005d1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8e4 	bl	8005ed4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <USBD_SetConfig+0x118>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff f9b8 	bl	8005088 <USBD_ClrClassConfig>
        break;
 8005d18:	bf00      	nop
    }
  }
}
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	200002d3 	.word	0x200002d3

08005d24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	88db      	ldrh	r3, [r3, #6]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d004      	beq.n	8005d40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8cb 	bl	8005ed4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005d3e:	e021      	b.n	8005d84 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	db17      	blt.n	8005d7a <USBD_GetConfig+0x56>
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	dd02      	ble.n	8005d54 <USBD_GetConfig+0x30>
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d00b      	beq.n	8005d6a <USBD_GetConfig+0x46>
 8005d52:	e012      	b.n	8005d7a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	2201      	movs	r2, #1
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f920 	bl	8005fa8 <USBD_CtlSendData>
        break;
 8005d68:	e00c      	b.n	8005d84 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f918 	bl	8005fa8 <USBD_CtlSendData>
        break;
 8005d78:	e004      	b.n	8005d84 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f8a9 	bl	8005ed4 <USBD_CtlError>
        break;
 8005d82:	bf00      	nop
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d81e      	bhi.n	8005de0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	88db      	ldrh	r3, [r3, #6]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d004      	beq.n	8005db4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f891 	bl	8005ed4 <USBD_CtlError>
        break;
 8005db2:	e01a      	b.n	8005dea <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f043 0202 	orr.w	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f8e5 	bl	8005fa8 <USBD_CtlSendData>
      break;
 8005dde:	e004      	b.n	8005dea <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f876 	bl	8005ed4 <USBD_CtlError>
      break;
 8005de8:	bf00      	nop
  }
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	885b      	ldrh	r3, [r3, #2]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d106      	bne.n	8005e12 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f929 	bl	8006064 <USBD_CtlSendStatus>
  }
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d80b      	bhi.n	8005e48 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	885b      	ldrh	r3, [r3, #2]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d10c      	bne.n	8005e52 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f90f 	bl	8006064 <USBD_CtlSendStatus>
      }
      break;
 8005e46:	e004      	b.n	8005e52 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f842 	bl	8005ed4 <USBD_CtlError>
      break;
 8005e50:	e000      	b.n	8005e54 <USBD_ClrFeature+0x3a>
      break;
 8005e52:	bf00      	nop
  }
}
 8005e54:	bf00      	nop
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781a      	ldrb	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	785a      	ldrb	r2, [r3, #1]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	3302      	adds	r3, #2
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	3303      	adds	r3, #3
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	4413      	add	r3, r2
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	3304      	adds	r3, #4
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	3305      	adds	r3, #5
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	3306      	adds	r3, #6
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	3307      	adds	r3, #7
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	80da      	strh	r2, [r3, #6]

}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr

08005ed4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005ede:	2180      	movs	r1, #128	; 0x80
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fc61 	bl	80067a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fc5d 	bl	80067a8 <USBD_LL_StallEP>
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b086      	sub	sp, #24
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d032      	beq.n	8005f72 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f834 	bl	8005f7a <USBD_GetLen>
 8005f12:	4603      	mov	r3, r0
 8005f14:	3301      	adds	r3, #1
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	75fa      	strb	r2, [r7, #23]
 8005f26:	461a      	mov	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	75fa      	strb	r2, [r7, #23]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	2203      	movs	r2, #3
 8005f40:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005f42:	e012      	b.n	8005f6a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	60fa      	str	r2, [r7, #12]
 8005f4a:	7dfa      	ldrb	r2, [r7, #23]
 8005f4c:	1c51      	adds	r1, r2, #1
 8005f4e:	75f9      	strb	r1, [r7, #23]
 8005f50:	4611      	mov	r1, r2
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	440a      	add	r2, r1
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	75fa      	strb	r2, [r7, #23]
 8005f60:	461a      	mov	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4413      	add	r3, r2
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e8      	bne.n	8005f44 <USBD_GetString+0x4e>
    }
  }
}
 8005f72:	bf00      	nop
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005f86:	e005      	b.n	8005f94 <USBD_GetLen+0x1a>
  {
    len++;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3301      	adds	r3, #1
 8005f92:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f5      	bne.n	8005f88 <USBD_GetLen+0xe>
  }

  return len;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr

08005fa8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	2100      	movs	r1, #0
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fc6b 	bl	80068ac <USBD_LL_Transmit>

  return USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fc59 	bl	80068ac <USBD_LL_Transmit>

  return USBD_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2203      	movs	r2, #3
 8006016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800601a:	88fa      	ldrh	r2, [r7, #6]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	2100      	movs	r1, #0
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fc5e 	bl	80068f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	2100      	movs	r1, #0
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fc4c 	bl	80068f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2204      	movs	r2, #4
 8006070:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006074:	2300      	movs	r3, #0
 8006076:	2200      	movs	r2, #0
 8006078:	2100      	movs	r1, #0
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fc16 	bl	80068ac <USBD_LL_Transmit>

  return USBD_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2205      	movs	r2, #5
 8006096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800609a:	2300      	movs	r3, #0
 800609c:	2200      	movs	r2, #0
 800609e:	2100      	movs	r1, #0
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fc26 	bl	80068f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80060b4:	2200      	movs	r2, #0
 80060b6:	4912      	ldr	r1, [pc, #72]	; (8006100 <MX_USB_DEVICE_Init+0x50>)
 80060b8:	4812      	ldr	r0, [pc, #72]	; (8006104 <MX_USB_DEVICE_Init+0x54>)
 80060ba:	f7fe ff6c 	bl	8004f96 <USBD_Init>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80060c4:	f7fa fb34 	bl	8000730 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80060c8:	490f      	ldr	r1, [pc, #60]	; (8006108 <MX_USB_DEVICE_Init+0x58>)
 80060ca:	480e      	ldr	r0, [pc, #56]	; (8006104 <MX_USB_DEVICE_Init+0x54>)
 80060cc:	f7fe ff8e 	bl	8004fec <USBD_RegisterClass>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80060d6:	f7fa fb2b 	bl	8000730 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80060da:	490c      	ldr	r1, [pc, #48]	; (800610c <MX_USB_DEVICE_Init+0x5c>)
 80060dc:	4809      	ldr	r0, [pc, #36]	; (8006104 <MX_USB_DEVICE_Init+0x54>)
 80060de:	f7fe febf 	bl	8004e60 <USBD_CDC_RegisterInterface>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80060e8:	f7fa fb22 	bl	8000730 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060ec:	4805      	ldr	r0, [pc, #20]	; (8006104 <MX_USB_DEVICE_Init+0x54>)
 80060ee:	f7fe ff96 	bl	800501e <USBD_Start>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80060f8:	f7fa fb1a 	bl	8000730 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060fc:	bf00      	nop
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20000138 	.word	0x20000138
 8006104:	200005c8 	.word	0x200005c8
 8006108:	20000024 	.word	0x20000024
 800610c:	20000128 	.word	0x20000128

08006110 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006114:	2200      	movs	r2, #0
 8006116:	4905      	ldr	r1, [pc, #20]	; (800612c <CDC_Init_FS+0x1c>)
 8006118:	4805      	ldr	r0, [pc, #20]	; (8006130 <CDC_Init_FS+0x20>)
 800611a:	f7fe feb7 	bl	8004e8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800611e:	4905      	ldr	r1, [pc, #20]	; (8006134 <CDC_Init_FS+0x24>)
 8006120:	4803      	ldr	r0, [pc, #12]	; (8006130 <CDC_Init_FS+0x20>)
 8006122:	f7fe fecc 	bl	8004ebe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006126:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006128:	4618      	mov	r0, r3
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000c74 	.word	0x20000c74
 8006130:	200005c8 	.word	0x200005c8
 8006134:	2000088c 	.word	0x2000088c

08006138 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800613c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800613e:	4618      	mov	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr
	...

08006148 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	6039      	str	r1, [r7, #0]
 8006152:	71fb      	strb	r3, [r7, #7]
 8006154:	4613      	mov	r3, r2
 8006156:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	2b23      	cmp	r3, #35	; 0x23
 800615c:	d84a      	bhi.n	80061f4 <CDC_Control_FS+0xac>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <CDC_Control_FS+0x1c>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	080061f5 	.word	0x080061f5
 8006168:	080061f5 	.word	0x080061f5
 800616c:	080061f5 	.word	0x080061f5
 8006170:	080061f5 	.word	0x080061f5
 8006174:	080061f5 	.word	0x080061f5
 8006178:	080061f5 	.word	0x080061f5
 800617c:	080061f5 	.word	0x080061f5
 8006180:	080061f5 	.word	0x080061f5
 8006184:	080061f5 	.word	0x080061f5
 8006188:	080061f5 	.word	0x080061f5
 800618c:	080061f5 	.word	0x080061f5
 8006190:	080061f5 	.word	0x080061f5
 8006194:	080061f5 	.word	0x080061f5
 8006198:	080061f5 	.word	0x080061f5
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	080061f5 	.word	0x080061f5
 80061a4:	080061f5 	.word	0x080061f5
 80061a8:	080061f5 	.word	0x080061f5
 80061ac:	080061f5 	.word	0x080061f5
 80061b0:	080061f5 	.word	0x080061f5
 80061b4:	080061f5 	.word	0x080061f5
 80061b8:	080061f5 	.word	0x080061f5
 80061bc:	080061f5 	.word	0x080061f5
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	080061f5 	.word	0x080061f5
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061f5 	.word	0x080061f5
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	080061f5 	.word	0x080061f5
 80061e0:	080061f5 	.word	0x080061f5
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	080061f5 	.word	0x080061f5
 80061ec:	080061f5 	.word	0x080061f5
 80061f0:	080061f5 	.word	0x080061f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80061f4:	bf00      	nop
  }

  return (USBD_OK);
 80061f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bc80      	pop	{r7}
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop

08006204 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	480c      	ldr	r0, [pc, #48]	; (8006244 <CDC_Receive_FS+0x40>)
 8006212:	f7fe fe54 	bl	8004ebe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006216:	480b      	ldr	r0, [pc, #44]	; (8006244 <CDC_Receive_FS+0x40>)
 8006218:	f7fe fe93 	bl	8004f42 <USBD_CDC_ReceivePacket>

  memcpy(rf_tx_buffer, Buf, *Len);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	4808      	ldr	r0, [pc, #32]	; (8006248 <CDC_Receive_FS+0x44>)
 8006226:	f000 fc0b 	bl	8006a40 <memcpy>
  rf_tx_buffer_count = *Len;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	4b06      	ldr	r3, [pc, #24]	; (800624c <CDC_Receive_FS+0x48>)
 8006232:	601a      	str	r2, [r3, #0]
  rx_newData = 1;
 8006234:	4b06      	ldr	r3, [pc, #24]	; (8006250 <CDC_Receive_FS+0x4c>)
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]

  //CDC_Transmit_FS(Buf, *Len);
  //HAL_Delay(5);

  return (USBD_OK);
 800623a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	200005c8 	.word	0x200005c8
 8006248:	200001c8 	.word	0x200001c8
 800624c:	200002c8 	.word	0x200002c8
 8006250:	200002ce 	.word	0x200002ce

08006254 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006264:	4b0d      	ldr	r3, [pc, #52]	; (800629c <CDC_Transmit_FS+0x48>)
 8006266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006276:	2301      	movs	r3, #1
 8006278:	e00b      	b.n	8006292 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800627a:	887b      	ldrh	r3, [r7, #2]
 800627c:	461a      	mov	r2, r3
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4806      	ldr	r0, [pc, #24]	; (800629c <CDC_Transmit_FS+0x48>)
 8006282:	f7fe fe03 	bl	8004e8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006286:	4805      	ldr	r0, [pc, #20]	; (800629c <CDC_Transmit_FS+0x48>)
 8006288:	f7fe fe2c 	bl	8004ee4 <USBD_CDC_TransmitPacket>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	200005c8 	.word	0x200005c8

080062a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	6039      	str	r1, [r7, #0]
 80062aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2212      	movs	r2, #18
 80062b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000154 	.word	0x20000154

080062c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2204      	movs	r2, #4
 80062d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80062d6:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	bc80      	pop	{r7}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000168 	.word	0x20000168

080062e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	6039      	str	r1, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d105      	bne.n	8006306 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	4907      	ldr	r1, [pc, #28]	; (800631c <USBD_FS_ProductStrDescriptor+0x34>)
 80062fe:	4808      	ldr	r0, [pc, #32]	; (8006320 <USBD_FS_ProductStrDescriptor+0x38>)
 8006300:	f7ff fdf9 	bl	8005ef6 <USBD_GetString>
 8006304:	e004      	b.n	8006310 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	4904      	ldr	r1, [pc, #16]	; (800631c <USBD_FS_ProductStrDescriptor+0x34>)
 800630a:	4805      	ldr	r0, [pc, #20]	; (8006320 <USBD_FS_ProductStrDescriptor+0x38>)
 800630c:	f7ff fdf3 	bl	8005ef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006310:	4b02      	ldr	r3, [pc, #8]	; (800631c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	2000105c 	.word	0x2000105c
 8006320:	08006a94 	.word	0x08006a94

08006324 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	6039      	str	r1, [r7, #0]
 800632e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	4904      	ldr	r1, [pc, #16]	; (8006344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006334:	4804      	ldr	r0, [pc, #16]	; (8006348 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006336:	f7ff fdde 	bl	8005ef6 <USBD_GetString>
  return USBD_StrDesc;
 800633a:	4b02      	ldr	r3, [pc, #8]	; (8006344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	2000105c 	.word	0x2000105c
 8006348:	08006aa4 	.word	0x08006aa4

0800634c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	4603      	mov	r3, r0
 8006354:	6039      	str	r1, [r7, #0]
 8006356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	221a      	movs	r2, #26
 800635c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800635e:	f000 f843 	bl	80063e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006362:	4b02      	ldr	r3, [pc, #8]	; (800636c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	2000016c 	.word	0x2000016c

08006370 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	6039      	str	r1, [r7, #0]
 800637a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d105      	bne.n	800638e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	4907      	ldr	r1, [pc, #28]	; (80063a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006386:	4808      	ldr	r0, [pc, #32]	; (80063a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006388:	f7ff fdb5 	bl	8005ef6 <USBD_GetString>
 800638c:	e004      	b.n	8006398 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	4904      	ldr	r1, [pc, #16]	; (80063a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006392:	4805      	ldr	r0, [pc, #20]	; (80063a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006394:	f7ff fdaf 	bl	8005ef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006398:	4b02      	ldr	r3, [pc, #8]	; (80063a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	2000105c 	.word	0x2000105c
 80063a8:	08006ab8 	.word	0x08006ab8

080063ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	4603      	mov	r3, r0
 80063b4:	6039      	str	r1, [r7, #0]
 80063b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d105      	bne.n	80063ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	4907      	ldr	r1, [pc, #28]	; (80063e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80063c2:	4808      	ldr	r0, [pc, #32]	; (80063e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80063c4:	f7ff fd97 	bl	8005ef6 <USBD_GetString>
 80063c8:	e004      	b.n	80063d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4904      	ldr	r1, [pc, #16]	; (80063e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80063ce:	4805      	ldr	r0, [pc, #20]	; (80063e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80063d0:	f7ff fd91 	bl	8005ef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80063d4:	4b02      	ldr	r3, [pc, #8]	; (80063e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	2000105c 	.word	0x2000105c
 80063e4:	08006ac4 	.word	0x08006ac4

080063e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80063ee:	4b0f      	ldr	r3, [pc, #60]	; (800642c <Get_SerialNum+0x44>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <Get_SerialNum+0x48>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80063fa:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <Get_SerialNum+0x4c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4413      	add	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800640e:	2208      	movs	r2, #8
 8006410:	4909      	ldr	r1, [pc, #36]	; (8006438 <Get_SerialNum+0x50>)
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 f814 	bl	8006440 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006418:	2204      	movs	r2, #4
 800641a:	4908      	ldr	r1, [pc, #32]	; (800643c <Get_SerialNum+0x54>)
 800641c:	68b8      	ldr	r0, [r7, #8]
 800641e:	f000 f80f 	bl	8006440 <IntToUnicode>
  }
}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	1ffff7e8 	.word	0x1ffff7e8
 8006430:	1ffff7ec 	.word	0x1ffff7ec
 8006434:	1ffff7f0 	.word	0x1ffff7f0
 8006438:	2000016e 	.word	0x2000016e
 800643c:	2000017e 	.word	0x2000017e

08006440 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
 8006456:	e027      	b.n	80064a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	0f1b      	lsrs	r3, r3, #28
 800645c:	2b09      	cmp	r3, #9
 800645e:	d80b      	bhi.n	8006478 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	0f1b      	lsrs	r3, r3, #28
 8006464:	b2da      	uxtb	r2, r3
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	4619      	mov	r1, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	440b      	add	r3, r1
 8006470:	3230      	adds	r2, #48	; 0x30
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e00a      	b.n	800648e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	0f1b      	lsrs	r3, r3, #28
 800647c:	b2da      	uxtb	r2, r3
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	4619      	mov	r1, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	440b      	add	r3, r1
 8006488:	3237      	adds	r2, #55	; 0x37
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	3301      	adds	r3, #1
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	4413      	add	r3, r2
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
 80064a4:	3301      	adds	r3, #1
 80064a6:	75fb      	strb	r3, [r7, #23]
 80064a8:	7dfa      	ldrb	r2, [r7, #23]
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d3d3      	bcc.n	8006458 <IntToUnicode+0x18>
  }
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr
	...

080064bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a0d      	ldr	r2, [pc, #52]	; (8006500 <HAL_PCD_MspInit+0x44>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d113      	bne.n	80064f6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80064ce:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <HAL_PCD_MspInit+0x48>)
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	4a0c      	ldr	r2, [pc, #48]	; (8006504 <HAL_PCD_MspInit+0x48>)
 80064d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064d8:	61d3      	str	r3, [r2, #28]
 80064da:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <HAL_PCD_MspInit+0x48>)
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80064e6:	2200      	movs	r2, #0
 80064e8:	2100      	movs	r1, #0
 80064ea:	2014      	movs	r0, #20
 80064ec:	f7fa fead 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80064f0:	2014      	movs	r0, #20
 80064f2:	f7fa fec6 	bl	8001282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40005c00 	.word	0x40005c00
 8006504:	40021000 	.word	0x40021000

08006508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f7fe fdc5 	bl	80050ae <USBD_LL_SetupStage>
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	015b      	lsls	r3, r3, #5
 8006544:	4413      	add	r3, r2
 8006546:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	4619      	mov	r1, r3
 8006550:	f7fe fdf8 	bl	8005144 <USBD_LL_DataOutStage>
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800656e:	78fb      	ldrb	r3, [r7, #3]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	015b      	lsls	r3, r3, #5
 8006574:	4413      	add	r3, r2
 8006576:	333c      	adds	r3, #60	; 0x3c
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	4619      	mov	r1, r3
 800657e:	f7fe fe52 	bl	8005226 <USBD_LL_DataInStage>
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006598:	4618      	mov	r0, r3
 800659a:	f7fe ff62 	bl	8005462 <USBD_LL_SOF>
}
 800659e:	bf00      	nop
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d001      	beq.n	80065be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80065ba:	f7fa f8b9 	bl	8000730 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80065c4:	7bfa      	ldrb	r2, [r7, #15]
 80065c6:	4611      	mov	r1, r2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe ff12 	bl	80053f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe fecb 	bl	8005370 <USBD_LL_Reset>
}
 80065da:	bf00      	nop
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe ff0c 	bl	8005410 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006600:	4b04      	ldr	r3, [pc, #16]	; (8006614 <HAL_PCD_SuspendCallback+0x30>)
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	4a03      	ldr	r2, [pc, #12]	; (8006614 <HAL_PCD_SuspendCallback+0x30>)
 8006606:	f043 0306 	orr.w	r3, r3, #6
 800660a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	e000ed00 	.word	0xe000ed00

08006618 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe ff06 	bl	8005438 <USBD_LL_Resume>
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800663c:	4a28      	ldr	r2, [pc, #160]	; (80066e0 <USBD_LL_Init+0xac>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <USBD_LL_Init+0xac>)
 8006648:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800664c:	4b24      	ldr	r3, [pc, #144]	; (80066e0 <USBD_LL_Init+0xac>)
 800664e:	4a25      	ldr	r2, [pc, #148]	; (80066e4 <USBD_LL_Init+0xb0>)
 8006650:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006652:	4b23      	ldr	r3, [pc, #140]	; (80066e0 <USBD_LL_Init+0xac>)
 8006654:	2208      	movs	r2, #8
 8006656:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006658:	4b21      	ldr	r3, [pc, #132]	; (80066e0 <USBD_LL_Init+0xac>)
 800665a:	2202      	movs	r2, #2
 800665c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800665e:	4b20      	ldr	r3, [pc, #128]	; (80066e0 <USBD_LL_Init+0xac>)
 8006660:	2200      	movs	r2, #0
 8006662:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006664:	4b1e      	ldr	r3, [pc, #120]	; (80066e0 <USBD_LL_Init+0xac>)
 8006666:	2200      	movs	r2, #0
 8006668:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800666a:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <USBD_LL_Init+0xac>)
 800666c:	2200      	movs	r2, #0
 800666e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006670:	481b      	ldr	r0, [pc, #108]	; (80066e0 <USBD_LL_Init+0xac>)
 8006672:	f7fa ffc2 	bl	80015fa <HAL_PCD_Init>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800667c:	f7fa f858 	bl	8000730 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006686:	2318      	movs	r3, #24
 8006688:	2200      	movs	r2, #0
 800668a:	2100      	movs	r1, #0
 800668c:	f7fb fe5a 	bl	8002344 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006696:	2358      	movs	r3, #88	; 0x58
 8006698:	2200      	movs	r2, #0
 800669a:	2180      	movs	r1, #128	; 0x80
 800669c:	f7fb fe52 	bl	8002344 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066a6:	23c0      	movs	r3, #192	; 0xc0
 80066a8:	2200      	movs	r2, #0
 80066aa:	2181      	movs	r1, #129	; 0x81
 80066ac:	f7fb fe4a 	bl	8002344 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80066ba:	2200      	movs	r2, #0
 80066bc:	2101      	movs	r1, #1
 80066be:	f7fb fe41 	bl	8002344 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066cc:	2200      	movs	r2, #0
 80066ce:	2182      	movs	r1, #130	; 0x82
 80066d0:	f7fb fe38 	bl	8002344 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	2000125c 	.word	0x2000125c
 80066e4:	40005c00 	.word	0x40005c00

080066e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fb f85c 	bl	80017bc <HAL_PCD_Start>
 8006704:	4603      	mov	r3, r0
 8006706:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 f948 	bl	80069a0 <USBD_Get_USB_Status>
 8006710:	4603      	mov	r3, r0
 8006712:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006714:	7bbb      	ldrb	r3, [r7, #14]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	4608      	mov	r0, r1
 8006728:	4611      	mov	r1, r2
 800672a:	461a      	mov	r2, r3
 800672c:	4603      	mov	r3, r0
 800672e:	70fb      	strb	r3, [r7, #3]
 8006730:	460b      	mov	r3, r1
 8006732:	70bb      	strb	r3, [r7, #2]
 8006734:	4613      	mov	r3, r2
 8006736:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006746:	78bb      	ldrb	r3, [r7, #2]
 8006748:	883a      	ldrh	r2, [r7, #0]
 800674a:	78f9      	ldrb	r1, [r7, #3]
 800674c:	f7fb f98f 	bl	8001a6e <HAL_PCD_EP_Open>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f922 	bl	80069a0 <USBD_Get_USB_Status>
 800675c:	4603      	mov	r3, r0
 800675e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006760:	7bbb      	ldrb	r3, [r7, #14]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	460b      	mov	r3, r1
 8006774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006784:	78fa      	ldrb	r2, [r7, #3]
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f7fb f9d0 	bl	8001b2e <HAL_PCD_EP_Close>
 800678e:	4603      	mov	r3, r0
 8006790:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f903 	bl	80069a0 <USBD_Get_USB_Status>
 800679a:	4603      	mov	r3, r0
 800679c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800679e:	7bbb      	ldrb	r3, [r7, #14]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067c2:	78fa      	ldrb	r2, [r7, #3]
 80067c4:	4611      	mov	r1, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fb fa7a 	bl	8001cc0 <HAL_PCD_EP_SetStall>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f8e4 	bl	80069a0 <USBD_Get_USB_Status>
 80067d8:	4603      	mov	r3, r0
 80067da:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	4611      	mov	r1, r2
 8006804:	4618      	mov	r0, r3
 8006806:	f7fb fab5 	bl	8001d74 <HAL_PCD_EP_ClrStall>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f8c5 	bl	80069a0 <USBD_Get_USB_Status>
 8006816:	4603      	mov	r3, r0
 8006818:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800681a:	7bbb      	ldrb	r3, [r7, #14]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006836:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800683c:	2b00      	cmp	r3, #0
 800683e:	da08      	bge.n	8006852 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	015b      	lsls	r3, r3, #5
 800684a:	4413      	add	r3, r2
 800684c:	332a      	adds	r3, #42	; 0x2a
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	e008      	b.n	8006864 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	015b      	lsls	r3, r3, #5
 800685c:	4413      	add	r3, r2
 800685e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006862:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	4770      	bx	lr

0800686e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	460b      	mov	r3, r1
 8006878:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	4611      	mov	r1, r2
 800688c:	4618      	mov	r0, r3
 800688e:	f7fb f8c9 	bl	8001a24 <HAL_PCD_SetAddress>
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 f881 	bl	80069a0 <USBD_Get_USB_Status>
 800689e:	4603      	mov	r3, r0
 80068a0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80068a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	607a      	str	r2, [r7, #4]
 80068b6:	461a      	mov	r2, r3
 80068b8:	460b      	mov	r3, r1
 80068ba:	72fb      	strb	r3, [r7, #11]
 80068bc:	4613      	mov	r3, r2
 80068be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80068ce:	893b      	ldrh	r3, [r7, #8]
 80068d0:	7af9      	ldrb	r1, [r7, #11]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	f7fb f9bb 	bl	8001c4e <HAL_PCD_EP_Transmit>
 80068d8:	4603      	mov	r3, r0
 80068da:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 f85e 	bl	80069a0 <USBD_Get_USB_Status>
 80068e4:	4603      	mov	r3, r0
 80068e6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80068e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b086      	sub	sp, #24
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	461a      	mov	r2, r3
 80068fe:	460b      	mov	r3, r1
 8006900:	72fb      	strb	r3, [r7, #11]
 8006902:	4613      	mov	r3, r2
 8006904:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006914:	893b      	ldrh	r3, [r7, #8]
 8006916:	7af9      	ldrb	r1, [r7, #11]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	f7fb f94a 	bl	8001bb2 <HAL_PCD_EP_Receive>
 800691e:	4603      	mov	r3, r0
 8006920:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 f83b 	bl	80069a0 <USBD_Get_USB_Status>
 800692a:	4603      	mov	r3, r0
 800692c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800692e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800694a:	78fa      	ldrb	r2, [r7, #3]
 800694c:	4611      	mov	r1, r2
 800694e:	4618      	mov	r0, r3
 8006950:	f7fb f969 	bl	8001c26 <HAL_PCD_EP_GetRxCount>
 8006954:	4603      	mov	r3, r0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <USBD_static_malloc+0x14>)
}
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr
 8006974:	200002d4 	.word	0x200002d4

08006978 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr

0800698a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d817      	bhi.n	80069e4 <USBD_Get_USB_Status+0x44>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <USBD_Get_USB_Status+0x1c>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069d3 	.word	0x080069d3
 80069c4:	080069d9 	.word	0x080069d9
 80069c8:	080069df 	.word	0x080069df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
    break;
 80069d0:	e00b      	b.n	80069ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80069d2:	2302      	movs	r3, #2
 80069d4:	73fb      	strb	r3, [r7, #15]
    break;
 80069d6:	e008      	b.n	80069ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
    break;
 80069dc:	e005      	b.n	80069ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80069de:	2302      	movs	r3, #2
 80069e0:	73fb      	strb	r3, [r7, #15]
    break;
 80069e2:	e002      	b.n	80069ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80069e4:	2302      	movs	r3, #2
 80069e6:	73fb      	strb	r3, [r7, #15]
    break;
 80069e8:	bf00      	nop
  }
  return usb_status;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop

080069f8 <__libc_init_array>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	2500      	movs	r5, #0
 80069fc:	4e0c      	ldr	r6, [pc, #48]	; (8006a30 <__libc_init_array+0x38>)
 80069fe:	4c0d      	ldr	r4, [pc, #52]	; (8006a34 <__libc_init_array+0x3c>)
 8006a00:	1ba4      	subs	r4, r4, r6
 8006a02:	10a4      	asrs	r4, r4, #2
 8006a04:	42a5      	cmp	r5, r4
 8006a06:	d109      	bne.n	8006a1c <__libc_init_array+0x24>
 8006a08:	f000 f82e 	bl	8006a68 <_init>
 8006a0c:	2500      	movs	r5, #0
 8006a0e:	4e0a      	ldr	r6, [pc, #40]	; (8006a38 <__libc_init_array+0x40>)
 8006a10:	4c0a      	ldr	r4, [pc, #40]	; (8006a3c <__libc_init_array+0x44>)
 8006a12:	1ba4      	subs	r4, r4, r6
 8006a14:	10a4      	asrs	r4, r4, #2
 8006a16:	42a5      	cmp	r5, r4
 8006a18:	d105      	bne.n	8006a26 <__libc_init_array+0x2e>
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a20:	4798      	blx	r3
 8006a22:	3501      	adds	r5, #1
 8006a24:	e7ee      	b.n	8006a04 <__libc_init_array+0xc>
 8006a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a2a:	4798      	blx	r3
 8006a2c:	3501      	adds	r5, #1
 8006a2e:	e7f2      	b.n	8006a16 <__libc_init_array+0x1e>
 8006a30:	08006ae4 	.word	0x08006ae4
 8006a34:	08006ae4 	.word	0x08006ae4
 8006a38:	08006ae4 	.word	0x08006ae4
 8006a3c:	08006ae8 	.word	0x08006ae8

08006a40 <memcpy>:
 8006a40:	b510      	push	{r4, lr}
 8006a42:	1e43      	subs	r3, r0, #1
 8006a44:	440a      	add	r2, r1
 8006a46:	4291      	cmp	r1, r2
 8006a48:	d100      	bne.n	8006a4c <memcpy+0xc>
 8006a4a:	bd10      	pop	{r4, pc}
 8006a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a54:	e7f7      	b.n	8006a46 <memcpy+0x6>

08006a56 <memset>:
 8006a56:	4603      	mov	r3, r0
 8006a58:	4402      	add	r2, r0
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d100      	bne.n	8006a60 <memset+0xa>
 8006a5e:	4770      	bx	lr
 8006a60:	f803 1b01 	strb.w	r1, [r3], #1
 8006a64:	e7f9      	b.n	8006a5a <memset+0x4>
	...

08006a68 <_init>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr

08006a74 <_fini>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	bf00      	nop
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr
